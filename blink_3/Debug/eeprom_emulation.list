
eeprom_emulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000252c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080025ec  080025ec  000035ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c4  080026c4  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080026c4  080026c4  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080026c4  080026c4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c4  080026c4  000036c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080026cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08002734  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08002734  00004284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abf6  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5a  00000000  00000000  0000ec86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000036cb  00000000  00000000  00010ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  000141b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079a  00000000  00000000  000148c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192f7  00000000  00000000  0001505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9e9  00000000  00000000  0002e351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008de70  00000000  00000000  0003ad3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c8baa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018e0  00000000  00000000  000c8bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000ca4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025d4 	.word	0x080025d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080025d4 	.word	0x080025d4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_llsr>:
 8000248:	40d0      	lsrs	r0, r2
 800024a:	000b      	movs	r3, r1
 800024c:	40d1      	lsrs	r1, r2
 800024e:	469c      	mov	ip, r3
 8000250:	3a20      	subs	r2, #32
 8000252:	40d3      	lsrs	r3, r2
 8000254:	4318      	orrs	r0, r3
 8000256:	4252      	negs	r2, r2
 8000258:	4663      	mov	r3, ip
 800025a:	4093      	lsls	r3, r2
 800025c:	4318      	orrs	r0, r3
 800025e:	4770      	bx	lr

08000260 <find_last_written_address>:
    return (result == HAL_OK) ? 0 : 1;
}

uint32_t find_last_written_address(void)
{
    uint32_t address = FLASH_STORAGE_ADDRESS;
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <find_last_written_address+0x14>)
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
    {
        uint16_t value = *(volatile uint16_t*)address;
        if (value == 0xFFFF)
 8000262:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <find_last_written_address+0x18>)
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 8000264:	4b05      	ldr	r3, [pc, #20]	@ (800027c <find_last_written_address+0x1c>)
        uint16_t value = *(volatile uint16_t*)address;
 8000266:	8801      	ldrh	r1, [r0, #0]
        if (value == 0xFFFF)
 8000268:	4291      	cmp	r1, r2
 800026a:	d002      	beq.n	8000272 <find_last_written_address+0x12>
            break;
        address += 2;
 800026c:	3002      	adds	r0, #2
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 800026e:	4298      	cmp	r0, r3
 8000270:	d1f9      	bne.n	8000266 <find_last_written_address+0x6>
    }
    return address;
}
 8000272:	4770      	bx	lr
 8000274:	08007c00 	.word	0x08007c00
 8000278:	0000ffff 	.word	0x0000ffff
 800027c:	08008000 	.word	0x08008000

08000280 <Flash_ReadLastValue>:

uint16_t Flash_ReadLastValue(void)
{
 8000280:	b510      	push	{r4, lr}
    uint32_t address = find_last_written_address();
 8000282:	f7ff ffed 	bl	8000260 <find_last_written_address>

    if (address == FLASH_STORAGE_ADDRESS)
 8000286:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <Flash_ReadLastValue+0x18>)
 8000288:	4298      	cmp	r0, r3
 800028a:	d003      	beq.n	8000294 <Flash_ReadLastValue+0x14>
        return 0xFFFF;  // Nothing written yet

    return *(volatile uint16_t*)(address - 2);  // Last written value
 800028c:	3802      	subs	r0, #2
 800028e:	8800      	ldrh	r0, [r0, #0]
 8000290:	b280      	uxth	r0, r0
}
 8000292:	bd10      	pop	{r4, pc}
        return 0xFFFF;  // Nothing written yet
 8000294:	4801      	ldr	r0, [pc, #4]	@ (800029c <Flash_ReadLastValue+0x1c>)
 8000296:	e7fc      	b.n	8000292 <Flash_ReadLastValue+0x12>
 8000298:	08007c00 	.word	0x08007c00
 800029c:	0000ffff 	.word	0x0000ffff

080002a0 <erase_storage_page>:

void erase_storage_page(void)
{
 80002a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_FLASH_Unlock();
 80002a2:	f000 fa8d 	bl	80007c0 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error;

    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80002a6:	2300      	movs	r3, #0
 80002a8:	9301      	str	r3, [sp, #4]
    erase.PageAddress = FLASH_STORAGE_ADDRESS;
 80002aa:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <erase_storage_page+0x24>)
    erase.NbPages = 1;

    HAL_FLASHEx_Erase(&erase, &page_error);
 80002ac:	4669      	mov	r1, sp
    erase.PageAddress = FLASH_STORAGE_ADDRESS;
 80002ae:	9302      	str	r3, [sp, #8]
    erase.NbPages = 1;
 80002b0:	2301      	movs	r3, #1
    HAL_FLASHEx_Erase(&erase, &page_error);
 80002b2:	a801      	add	r0, sp, #4
    erase.NbPages = 1;
 80002b4:	9303      	str	r3, [sp, #12]
    HAL_FLASHEx_Erase(&erase, &page_error);
 80002b6:	f000 fb35 	bl	8000924 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 80002ba:	f000 fa95 	bl	80007e8 <HAL_FLASH_Lock>
}
 80002be:	b005      	add	sp, #20
 80002c0:	bd00      	pop	{pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	08007c00 	.word	0x08007c00

080002c8 <Flash_Append>:
{
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	0005      	movs	r5, r0
    uint32_t address = find_last_written_address();
 80002cc:	f7ff ffc8 	bl	8000260 <find_last_written_address>
    if (address >= (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE)) {
 80002d0:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <Flash_Append+0x34>)
    uint32_t address = find_last_written_address();
 80002d2:	0004      	movs	r4, r0
    if (address >= (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE)) {
 80002d4:	4298      	cmp	r0, r3
 80002d6:	d902      	bls.n	80002de <Flash_Append+0x16>
        erase_storage_page();
 80002d8:	f7ff ffe2 	bl	80002a0 <erase_storage_page>
        address = FLASH_STORAGE_ADDRESS;
 80002dc:	4c08      	ldr	r4, [pc, #32]	@ (8000300 <Flash_Append+0x38>)
    HAL_FLASH_Unlock();
 80002de:	f000 fa6f 	bl	80007c0 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 80002e2:	002a      	movs	r2, r5
 80002e4:	2300      	movs	r3, #0
 80002e6:	0021      	movs	r1, r4
 80002e8:	2001      	movs	r0, #1
 80002ea:	f000 fab1 	bl	8000850 <HAL_FLASH_Program>
 80002ee:	0004      	movs	r4, r0
    return (result == HAL_OK) ? 0 : 1;
 80002f0:	1e63      	subs	r3, r4, #1
 80002f2:	419c      	sbcs	r4, r3
    HAL_FLASH_Lock();
 80002f4:	f000 fa78 	bl	80007e8 <HAL_FLASH_Lock>
    return (result == HAL_OK) ? 0 : 1;
 80002f8:	b2e0      	uxtb	r0, r4
}
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	08007fff 	.word	0x08007fff
 8000300:	08007c00 	.word	0x08007c00

08000304 <_write>:

extern UART_HandleTypeDef huart2;

int _write(int file, char *ptr, int len)
{
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000304:	2301      	movs	r3, #1
{
 8000306:	b510      	push	{r4, lr}
 8000308:	0014      	movs	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800030a:	b292      	uxth	r2, r2
 800030c:	425b      	negs	r3, r3
 800030e:	4802      	ldr	r0, [pc, #8]	@ (8000318 <_write+0x14>)
 8000310:	f001 f8a8 	bl	8001464 <HAL_UART_Transmit>
  return len;
}
 8000314:	0020      	movs	r0, r4
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000084 	.word	0x20000084

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	2410      	movs	r4, #16
{
 8000320:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	2230      	movs	r2, #48	@ 0x30
 8000324:	2100      	movs	r1, #0
 8000326:	a806      	add	r0, sp, #24
 8000328:	f001 fbb4 	bl	8001a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	2100      	movs	r1, #0
 800032e:	0022      	movs	r2, r4
 8000330:	a801      	add	r0, sp, #4
 8000332:	f001 fbaf 	bl	8001a94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000336:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	3b01      	subs	r3, #1
 800033e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f000 fbf9 	bl	8000b38 <HAL_RCC_OscConfig>
 8000346:	1e01      	subs	r1, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000350:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000356:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035a:	f000 fe73 	bl	8001044 <HAL_RCC_ClockConfig>
 800035e:	2800      	cmp	r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x4a>
 8000362:	b672      	cpsid	i
  while (1)
 8000364:	e7fe      	b.n	8000364 <SystemClock_Config+0x48>
}
 8000366:	b012      	add	sp, #72	@ 0x48
 8000368:	bd10      	pop	{r4, pc}
	...

0800036c <main>:
{
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	b08d      	sub	sp, #52	@ 0x34
  HAL_Init();
 8000370:	f000 f990 	bl	8000694 <HAL_Init>
  SystemClock_Config();
 8000374:	f7ff ffd2 	bl	800031c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000378:	2214      	movs	r2, #20
 800037a:	2100      	movs	r1, #0
 800037c:	a804      	add	r0, sp, #16
 800037e:	f001 fb89 	bl	8001a94 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	2180      	movs	r1, #128	@ 0x80
 8000384:	4b3f      	ldr	r3, [pc, #252]	@ (8000484 <main+0x118>)
 8000386:	03c9      	lsls	r1, r1, #15
 8000388:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800038a:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038c:	430a      	orrs	r2, r1
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000392:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000394:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000398:	9201      	str	r2, [sp, #4]
 800039a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	695a      	ldr	r2, [r3, #20]
 800039e:	0289      	lsls	r1, r1, #10
 80003a0:	430a      	orrs	r2, r1
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	9202      	str	r2, [sp, #8]
 80003ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	695a      	ldr	r2, [r3, #20]
 80003b2:	02c9      	lsls	r1, r1, #11
 80003b4:	430a      	orrs	r2, r1
 80003b6:	615a      	str	r2, [r3, #20]
 80003b8:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	400b      	ands	r3, r1
 80003be:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003c0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003c4:	f000 fbaa 	bl	8000b1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2108      	movs	r1, #8
 80003cc:	482e      	ldr	r0, [pc, #184]	@ (8000488 <main+0x11c>)
 80003ce:	f000 fba5 	bl	8000b1c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003d4:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	a904      	add	r1, sp, #16
 80003da:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003dc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f000 fae8 	bl	80009b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003e8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ea:	4827      	ldr	r0, [pc, #156]	@ (8000488 <main+0x11c>)
 80003ec:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003ee:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f6:	f000 fadf 	bl	80009b8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80003fa:	4824      	ldr	r0, [pc, #144]	@ (800048c <main+0x120>)
 80003fc:	4b24      	ldr	r3, [pc, #144]	@ (8000490 <main+0x124>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8000400:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8000402:	2396      	movs	r3, #150	@ 0x96
 8000404:	021b      	lsls	r3, r3, #8
 8000406:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800040a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800040c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800040e:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000410:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000412:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000414:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000416:	6244      	str	r4, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000418:	f001 f8ea 	bl	80015f0 <HAL_UART_Init>
 800041c:	42a0      	cmp	r0, r4
 800041e:	d12d      	bne.n	800047c <main+0x110>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle the LED pin (PA5)
 8000420:	2590      	movs	r5, #144	@ 0x90
 8000422:	05ed      	lsls	r5, r5, #23
 8000424:	2120      	movs	r1, #32
 8000426:	0028      	movs	r0, r5
 8000428:	f000 fb7e 	bl	8000b28 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // Toggle the LED pin (PB3)
 800042c:	2108      	movs	r1, #8
 800042e:	4816      	ldr	r0, [pc, #88]	@ (8000488 <main+0x11c>)
 8000430:	f000 fb7a 	bl	8000b28 <HAL_GPIO_TogglePin>
      printf("LED Toggled! The time is %lu\r\n", HAL_GetTick());
 8000434:	f000 f94a 	bl	80006cc <HAL_GetTick>
 8000438:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <main+0x128>)
 800043a:	0001      	movs	r1, r0
 800043c:	0018      	movs	r0, r3
 800043e:	f001 f9cd 	bl	80017dc <iprintf>
      uint16_t last = Flash_ReadLastValue();
 8000442:	f7ff ff1d 	bl	8000280 <Flash_ReadLastValue>
	 printf(msg, "Last value: %u\r\n", last);
 8000446:	4914      	ldr	r1, [pc, #80]	@ (8000498 <main+0x12c>)
 8000448:	0002      	movs	r2, r0
      uint16_t last = Flash_ReadLastValue();
 800044a:	0004      	movs	r4, r0
	 printf(msg, "Last value: %u\r\n", last);
 800044c:	a804      	add	r0, sp, #16
 800044e:	f001 f9c5 	bl	80017dc <iprintf>
	 uint16_t next = (last == 0xFFFF) ? 0 : last + 1;
 8000452:	4b12      	ldr	r3, [pc, #72]	@ (800049c <main+0x130>)
 8000454:	2000      	movs	r0, #0
 8000456:	429c      	cmp	r4, r3
 8000458:	d001      	beq.n	800045e <main+0xf2>
 800045a:	3401      	adds	r4, #1
 800045c:	b2a0      	uxth	r0, r4
	 if (Flash_Append(next) != 0) {
 800045e:	f7ff ff33 	bl	80002c8 <Flash_Append>
 8000462:	2800      	cmp	r0, #0
 8000464:	d00c      	beq.n	8000480 <main+0x114>
		 printf("Flash append failed!\r\n");
 8000466:	480e      	ldr	r0, [pc, #56]	@ (80004a0 <main+0x134>)
		 printf("Value written.\r\n");
 8000468:	f001 fa1e 	bl	80018a8 <puts>
	 HAL_Delay(1000);
 800046c:	20fa      	movs	r0, #250	@ 0xfa
 800046e:	0080      	lsls	r0, r0, #2
 8000470:	f000 f932 	bl	80006d8 <HAL_Delay>
	 printf("Resetting system.\r\n");
 8000474:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <main+0x138>)
 8000476:	f001 fa17 	bl	80018a8 <puts>
    {
 800047a:	e7d3      	b.n	8000424 <main+0xb8>
 800047c:	b672      	cpsid	i
  while (1)
 800047e:	e7fe      	b.n	800047e <main+0x112>
		 printf("Value written.\r\n");
 8000480:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <main+0x13c>)
 8000482:	e7f1      	b.n	8000468 <main+0xfc>
 8000484:	40021000 	.word	0x40021000
 8000488:	48000400 	.word	0x48000400
 800048c:	20000084 	.word	0x20000084
 8000490:	40004400 	.word	0x40004400
 8000494:	080025ec 	.word	0x080025ec
 8000498:	0800260b 	.word	0x0800260b
 800049c:	0000ffff 	.word	0x0000ffff
 80004a0:	0800261c 	.word	0x0800261c
 80004a4:	08002642 	.word	0x08002642
 80004a8:	08002632 	.word	0x08002632

080004ac <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ac:	2101      	movs	r1, #1
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <HAL_MspInit+0x2c>)
{
 80004b0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	430a      	orrs	r2, r1
 80004b6:	619a      	str	r2, [r3, #24]
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80004bc:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004be:	9200      	str	r2, [sp, #0]
 80004c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	69da      	ldr	r2, [r3, #28]
 80004c4:	0549      	lsls	r1, r1, #21
 80004c6:	430a      	orrs	r2, r1
 80004c8:	61da      	str	r2, [r3, #28]
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	400b      	ands	r3, r1
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	b002      	add	sp, #8
 80004d4:	4770      	bx	lr
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	0004      	movs	r4, r0
 80004e0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	2214      	movs	r2, #20
 80004e4:	2100      	movs	r1, #0
 80004e6:	a803      	add	r0, sp, #12
 80004e8:	f001 fad4 	bl	8001a94 <memset>
  if(huart->Instance==USART2)
 80004ec:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <HAL_UART_MspInit+0x58>)
 80004ee:	6822      	ldr	r2, [r4, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d11d      	bne.n	8000530 <HAL_UART_MspInit+0x54>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <HAL_UART_MspInit+0x5c>)
 80004f8:	0292      	lsls	r2, r2, #10
 80004fa:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80004fe:	4311      	orrs	r1, r2
 8000500:	61d9      	str	r1, [r3, #28]
 8000502:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000506:	4011      	ands	r1, r2
 8000508:	9101      	str	r1, [sp, #4]
 800050a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	6959      	ldr	r1, [r3, #20]
 800050e:	4311      	orrs	r1, r2
 8000510:	6159      	str	r1, [r3, #20]
 8000512:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4013      	ands	r3, r2
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <HAL_UART_MspInit+0x60>)
 800051e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	3301      	adds	r3, #1
 8000526:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000528:	3b02      	subs	r3, #2
 800052a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f000 fa44 	bl	80009b8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000530:	b008      	add	sp, #32
 8000532:	bd10      	pop	{r4, pc}
 8000534:	40004400 	.word	0x40004400
 8000538:	40021000 	.word	0x40021000
 800053c:	00008004 	.word	0x00008004

08000540 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler>

08000542 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler>

08000544 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054a:	f000 f8b3 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054e:	bd10      	pop	{r4, pc}

08000550 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	000e      	movs	r6, r1
 8000554:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	2500      	movs	r5, #0
 8000558:	42a5      	cmp	r5, r4
 800055a:	db01      	blt.n	8000560 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800055c:	0020      	movs	r0, r4
 800055e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000560:	e000      	b.n	8000564 <_read+0x14>
 8000562:	bf00      	nop
 8000564:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	3501      	adds	r5, #1
 8000568:	e7f6      	b.n	8000558 <_read+0x8>

0800056a <_close>:
}

int _close(int file)
{
  (void)file;
  return -1;
 800056a:	2001      	movs	r0, #1
}
 800056c:	4240      	negs	r0, r0
 800056e:	4770      	bx	lr

08000570 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	019b      	lsls	r3, r3, #6
  return 0;
}
 8000574:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000576:	604b      	str	r3, [r1, #4]
}
 8000578:	4770      	bx	lr

0800057a <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800057a:	2001      	movs	r0, #1
 800057c:	4770      	bx	lr

0800057e <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800057e:	2000      	movs	r0, #0
 8000580:	4770      	bx	lr
	...

08000584 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000584:	490b      	ldr	r1, [pc, #44]	@ (80005b4 <_sbrk+0x30>)
 8000586:	4a0c      	ldr	r2, [pc, #48]	@ (80005b8 <_sbrk+0x34>)
{
 8000588:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800058a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800058c:	490b      	ldr	r1, [pc, #44]	@ (80005bc <_sbrk+0x38>)
{
 800058e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000590:	6808      	ldr	r0, [r1, #0]
 8000592:	2800      	cmp	r0, #0
 8000594:	d101      	bne.n	800059a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000596:	480a      	ldr	r0, [pc, #40]	@ (80005c0 <_sbrk+0x3c>)
 8000598:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059a:	6808      	ldr	r0, [r1, #0]
 800059c:	18c3      	adds	r3, r0, r3
 800059e:	4293      	cmp	r3, r2
 80005a0:	d906      	bls.n	80005b0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80005a2:	f001 facd 	bl	8001b40 <__errno>
 80005a6:	230c      	movs	r3, #12
 80005a8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80005aa:	2001      	movs	r0, #1
 80005ac:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80005ae:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80005b0:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80005b2:	e7fc      	b.n	80005ae <_sbrk+0x2a>
 80005b4:	00000400 	.word	0x00000400
 80005b8:	20001800 	.word	0x20001800
 80005bc:	2000010c 	.word	0x2000010c
 80005c0:	20000288 	.word	0x20000288

080005c4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005c4:	4770      	bx	lr
	...

080005c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c8:	4813      	ldr	r0, [pc, #76]	@ (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005cc:	f7ff fffa 	bl	80005c4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80005d0:	4812      	ldr	r0, [pc, #72]	@ (800061c <LoopForever+0x6>)
    LDR R1, [R0]
 80005d2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80005d4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <LoopForever+0xa>)
    CMP R1, R2
 80005d8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80005da:	d105      	bne.n	80005e8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80005dc:	4811      	ldr	r0, [pc, #68]	@ (8000624 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80005de:	4912      	ldr	r1, [pc, #72]	@ (8000628 <LoopForever+0x12>)
    STR R1, [R0]
 80005e0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80005e2:	4812      	ldr	r0, [pc, #72]	@ (800062c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80005e4:	4912      	ldr	r1, [pc, #72]	@ (8000630 <LoopForever+0x1a>)
    STR R1, [R0]
 80005e6:	6001      	str	r1, [r0, #0]

080005e8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	4812      	ldr	r0, [pc, #72]	@ (8000634 <LoopForever+0x1e>)
  ldr r1, =_edata
 80005ea:	4913      	ldr	r1, [pc, #76]	@ (8000638 <LoopForever+0x22>)
  ldr r2, =_sidata
 80005ec:	4a13      	ldr	r2, [pc, #76]	@ (800063c <LoopForever+0x26>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a10      	ldr	r2, [pc, #64]	@ (8000640 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000600:	4c10      	ldr	r4, [pc, #64]	@ (8000644 <LoopForever+0x2e>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060e:	f001 fa9d 	bl	8001b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff feab 	bl	800036c <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800061c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000620:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000624:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000628:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800062c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000630:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800063c:	080026cc 	.word	0x080026cc
  ldr r2, =_sbss
 8000640:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000644:	20000284 	.word	0x20000284

08000648 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_IRQHandler>
	...

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	20fa      	movs	r0, #250	@ 0xfa
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <HAL_InitTick+0x3c>)
 8000654:	0080      	lsls	r0, r0, #2
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	f7ff fd6a 	bl	8000130 <__udivsi3>
 800065c:	4c0b      	ldr	r4, [pc, #44]	@ (800068c <HAL_InitTick+0x40>)
 800065e:	0001      	movs	r1, r0
 8000660:	6820      	ldr	r0, [r4, #0]
 8000662:	f7ff fd65 	bl	8000130 <__udivsi3>
 8000666:	f000 f873 	bl	8000750 <HAL_SYSTICK_Config>
 800066a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800066c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800066e:	2c00      	cmp	r4, #0
 8000670:	d109      	bne.n	8000686 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000672:	2d03      	cmp	r5, #3
 8000674:	d807      	bhi.n	8000686 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000676:	3802      	subs	r0, #2
 8000678:	0022      	movs	r2, r4
 800067a:	0029      	movs	r1, r5
 800067c:	f000 f83e 	bl	80006fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	0020      	movs	r0, r4
 8000682:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <HAL_InitTick+0x44>)
 8000684:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	20000004 	.word	0x20000004
 800068c:	20000000 	.word	0x20000000
 8000690:	20000008 	.word	0x20000008

08000694 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	2310      	movs	r3, #16
 8000696:	4a06      	ldr	r2, [pc, #24]	@ (80006b0 <HAL_Init+0x1c>)
{
 8000698:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800069c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069e:	430b      	orrs	r3, r1
 80006a0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	f7ff ffd3 	bl	800064c <HAL_InitTick>
  HAL_MspInit();
 80006a6:	f7ff ff01 	bl	80004ac <HAL_MspInit>
}
 80006aa:	2000      	movs	r0, #0
 80006ac:	bd10      	pop	{r4, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006b4:	4a03      	ldr	r2, [pc, #12]	@ (80006c4 <HAL_IncTick+0x10>)
 80006b6:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <HAL_IncTick+0x14>)
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	185b      	adds	r3, r3, r1
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	4770      	bx	lr
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	20000110 	.word	0x20000110
 80006c8:	20000004 	.word	0x20000004

080006cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006cc:	4b01      	ldr	r3, [pc, #4]	@ (80006d4 <HAL_GetTick+0x8>)
 80006ce:	6818      	ldr	r0, [r3, #0]
}
 80006d0:	4770      	bx	lr
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	20000110 	.word	0x20000110

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f7ff fff6 	bl	80006cc <HAL_GetTick>
 80006e0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e2:	1c63      	adds	r3, r4, #1
 80006e4:	d002      	beq.n	80006ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <HAL_Delay+0x20>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006ec:	f7ff ffee 	bl	80006cc <HAL_GetTick>
 80006f0:	1b40      	subs	r0, r0, r5
 80006f2:	42a0      	cmp	r0, r4
 80006f4:	d3fa      	bcc.n	80006ec <HAL_Delay+0x14>
  {
  }
}
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fe:	24ff      	movs	r4, #255	@ 0xff
 8000700:	2203      	movs	r2, #3
 8000702:	000b      	movs	r3, r1
 8000704:	0021      	movs	r1, r4
 8000706:	4002      	ands	r2, r0
 8000708:	00d2      	lsls	r2, r2, #3
 800070a:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070c:	019b      	lsls	r3, r3, #6
 800070e:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000710:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000712:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000714:	2800      	cmp	r0, #0
 8000716:	db0a      	blt.n	800072e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000718:	24c0      	movs	r4, #192	@ 0xc0
 800071a:	4a0b      	ldr	r2, [pc, #44]	@ (8000748 <HAL_NVIC_SetPriority+0x4c>)
 800071c:	0880      	lsrs	r0, r0, #2
 800071e:	0080      	lsls	r0, r0, #2
 8000720:	1880      	adds	r0, r0, r2
 8000722:	00a4      	lsls	r4, r4, #2
 8000724:	5902      	ldr	r2, [r0, r4]
 8000726:	400a      	ands	r2, r1
 8000728:	4313      	orrs	r3, r2
 800072a:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800072c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800072e:	220f      	movs	r2, #15
 8000730:	4010      	ands	r0, r2
 8000732:	3808      	subs	r0, #8
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <HAL_NVIC_SetPriority+0x50>)
 8000736:	0880      	lsrs	r0, r0, #2
 8000738:	0080      	lsls	r0, r0, #2
 800073a:	1880      	adds	r0, r0, r2
 800073c:	69c2      	ldr	r2, [r0, #28]
 800073e:	4011      	ands	r1, r2
 8000740:	4319      	orrs	r1, r3
 8000742:	61c1      	str	r1, [r0, #28]
 8000744:	e7f2      	b.n	800072c <HAL_NVIC_SetPriority+0x30>
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	1e43      	subs	r3, r0, #1
 8000754:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	4293      	cmp	r3, r2
 800075a:	d20d      	bcs.n	8000778 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a07      	ldr	r2, [pc, #28]	@ (800077c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000760:	4807      	ldr	r0, [pc, #28]	@ (8000780 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000764:	6a03      	ldr	r3, [r0, #32]
 8000766:	0609      	lsls	r1, r1, #24
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	430b      	orrs	r3, r1
 800076e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000778:	4770      	bx	lr
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	e000e010 	.word	0xe000e010
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000784:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <FLASH_SetErrorCode+0x34>)
 8000786:	2110      	movs	r1, #16
 8000788:	68d0      	ldr	r0, [r2, #12]
{
 800078a:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800078c:	0003      	movs	r3, r0
 800078e:	400b      	ands	r3, r1
 8000790:	4208      	tst	r0, r1
 8000792:	d005      	beq.n	80007a0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000794:	2302      	movs	r3, #2
 8000796:	4809      	ldr	r0, [pc, #36]	@ (80007bc <FLASH_SetErrorCode+0x38>)
 8000798:	69c4      	ldr	r4, [r0, #28]
 800079a:	4323      	orrs	r3, r4
 800079c:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800079e:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80007a0:	2004      	movs	r0, #4
 80007a2:	68d1      	ldr	r1, [r2, #12]
 80007a4:	4201      	tst	r1, r0
 80007a6:	d005      	beq.n	80007b4 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007a8:	2101      	movs	r1, #1
 80007aa:	4c04      	ldr	r4, [pc, #16]	@ (80007bc <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 80007ac:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007ae:	69e5      	ldr	r5, [r4, #28]
 80007b0:	4329      	orrs	r1, r5
 80007b2:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80007b4:	60d3      	str	r3, [r2, #12]
}  
 80007b6:	bd30      	pop	{r4, r5, pc}
 80007b8:	40022000 	.word	0x40022000
 80007bc:	20000118 	.word	0x20000118

080007c0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 80007c2:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80007c4:	691a      	ldr	r2, [r3, #16]
 80007c6:	0612      	lsls	r2, r2, #24
 80007c8:	d506      	bpl.n	80007d8 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <HAL_FLASH_Unlock+0x20>)
 80007cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <HAL_FLASH_Unlock+0x24>)
 80007d0:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80007d2:	6918      	ldr	r0, [r3, #16]
 80007d4:	0600      	lsls	r0, r0, #24
 80007d6:	0fc0      	lsrs	r0, r0, #31
}
 80007d8:	4770      	bx	lr
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40022000 	.word	0x40022000
 80007e0:	45670123 	.word	0x45670123
 80007e4:	cdef89ab 	.word	0xcdef89ab

080007e8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80007e8:	2380      	movs	r3, #128	@ 0x80
 80007ea:	4a03      	ldr	r2, [pc, #12]	@ (80007f8 <HAL_FLASH_Lock+0x10>)
}
 80007ec:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80007ee:	6911      	ldr	r1, [r2, #16]
 80007f0:	430b      	orrs	r3, r1
 80007f2:	6113      	str	r3, [r2, #16]
}
 80007f4:	4770      	bx	lr
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	40022000 	.word	0x40022000

080007fc <FLASH_WaitForLastOperation>:
{
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff ff64 	bl	80006cc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000804:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8000806:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <FLASH_WaitForLastOperation+0x50>)
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	4232      	tst	r2, r6
 800080e:	d111      	bne.n	8000834 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000810:	2220      	movs	r2, #32
 8000812:	68d9      	ldr	r1, [r3, #12]
 8000814:	4211      	tst	r1, r2
 8000816:	d000      	beq.n	800081a <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000818:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800081a:	68d9      	ldr	r1, [r3, #12]
 800081c:	2210      	movs	r2, #16
 800081e:	0008      	movs	r0, r1
 8000820:	4010      	ands	r0, r2
 8000822:	4211      	tst	r1, r2
 8000824:	d102      	bne.n	800082c <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000826:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000828:	075b      	lsls	r3, r3, #29
 800082a:	d508      	bpl.n	800083e <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800082c:	f7ff ffaa 	bl	8000784 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000830:	2001      	movs	r0, #1
 8000832:	e004      	b.n	800083e <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8000834:	1c62      	adds	r2, r4, #1
 8000836:	d0e8      	beq.n	800080a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000838:	2c00      	cmp	r4, #0
 800083a:	d101      	bne.n	8000840 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 800083c:	2003      	movs	r0, #3
}
 800083e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000840:	f7ff ff44 	bl	80006cc <HAL_GetTick>
 8000844:	1b40      	subs	r0, r0, r5
 8000846:	42a0      	cmp	r0, r4
 8000848:	d9de      	bls.n	8000808 <FLASH_WaitForLastOperation+0xc>
 800084a:	e7f7      	b.n	800083c <FLASH_WaitForLastOperation+0x40>
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_FLASH_Program>:
{
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 8000856:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <HAL_FLASH_Program+0x80>)
{
 8000858:	9100      	str	r1, [sp, #0]
 800085a:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 800085c:	7e1a      	ldrb	r2, [r3, #24]
{
 800085e:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8000860:	2002      	movs	r0, #2
 8000862:	2a01      	cmp	r2, #1
 8000864:	d031      	beq.n	80008ca <HAL_FLASH_Program+0x7a>
 8000866:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000868:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <HAL_FLASH_Program+0x84>)
  __HAL_LOCK(&pFlash);
 800086a:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800086c:	f7ff ffc6 	bl	80007fc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000870:	2800      	cmp	r0, #0
 8000872:	d127      	bne.n	80008c4 <HAL_FLASH_Program+0x74>
      nbiterations = 1U;
 8000874:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000876:	2c01      	cmp	r4, #1
 8000878:	d003      	beq.n	8000882 <HAL_FLASH_Program+0x32>
      nbiterations = 4U;
 800087a:	2604      	movs	r6, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800087c:	2c02      	cmp	r4, #2
 800087e:	d100      	bne.n	8000882 <HAL_FLASH_Program+0x32>
      nbiterations = 2U;
 8000880:	0026      	movs	r6, r4
      nbiterations = 4U;
 8000882:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_FLASH_Program+0x80>)
 8000886:	9301      	str	r3, [sp, #4]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000888:	9802      	ldr	r0, [sp, #8]
 800088a:	9903      	ldr	r1, [sp, #12]
 800088c:	0122      	lsls	r2, r4, #4
 800088e:	f7ff fcdb 	bl	8000248 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000892:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000894:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000896:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000898:	4d0f      	ldr	r5, [pc, #60]	@ (80008d8 <HAL_FLASH_Program+0x88>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800089a:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800089c:	692b      	ldr	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 800089e:	9a00      	ldr	r2, [sp, #0]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008a0:	433b      	orrs	r3, r7
 80008a2:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 80008a4:	0063      	lsls	r3, r4, #1
 80008a6:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008a8:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 80008aa:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <HAL_FLASH_Program+0x84>)
 80008ae:	f7ff ffa5 	bl	80007fc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80008b2:	692b      	ldr	r3, [r5, #16]
 80008b4:	43bb      	bics	r3, r7
 80008b6:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d103      	bne.n	80008c4 <HAL_FLASH_Program+0x74>
    for (index = 0U; index < nbiterations; index++)
 80008bc:	19e4      	adds	r4, r4, r7
 80008be:	b2e3      	uxtb	r3, r4
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d8e1      	bhi.n	8000888 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 80008c4:	2200      	movs	r2, #0
 80008c6:	4b02      	ldr	r3, [pc, #8]	@ (80008d0 <HAL_FLASH_Program+0x80>)
 80008c8:	761a      	strb	r2, [r3, #24]
}
 80008ca:	b005      	add	sp, #20
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	20000118 	.word	0x20000118
 80008d4:	0000c350 	.word	0x0000c350
 80008d8:	40022000 	.word	0x40022000

080008dc <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008dc:	2200      	movs	r2, #0
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <FLASH_MassErase+0x1c>)
 80008e0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <FLASH_MassErase+0x20>)
 80008e4:	3204      	adds	r2, #4
 80008e6:	6919      	ldr	r1, [r3, #16]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80008ec:	2240      	movs	r2, #64	@ 0x40
 80008ee:	6919      	ldr	r1, [r3, #16]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	611a      	str	r2, [r3, #16]
}
 80008f4:	4770      	bx	lr
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	20000118 	.word	0x20000118
 80008fc:	40022000 	.word	0x40022000

08000900 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000900:	2200      	movs	r2, #0
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <FLASH_PageErase+0x1c>)
 8000904:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <FLASH_PageErase+0x20>)
 8000908:	3202      	adds	r2, #2
 800090a:	6919      	ldr	r1, [r3, #16]
 800090c:	430a      	orrs	r2, r1
 800090e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000910:	2240      	movs	r2, #64	@ 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8000912:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000914:	6919      	ldr	r1, [r3, #16]
 8000916:	430a      	orrs	r2, r1
 8000918:	611a      	str	r2, [r3, #16]
}
 800091a:	4770      	bx	lr
 800091c:	20000118 	.word	0x20000118
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_FLASHEx_Erase>:
{
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000926:	4f21      	ldr	r7, [pc, #132]	@ (80009ac <HAL_FLASHEx_Erase+0x88>)
{
 8000928:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800092a:	7e3b      	ldrb	r3, [r7, #24]
{
 800092c:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800092e:	2002      	movs	r0, #2
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00c      	beq.n	800094e <HAL_FLASHEx_Erase+0x2a>
 8000934:	2301      	movs	r3, #1
 8000936:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000938:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800093a:	481d      	ldr	r0, [pc, #116]	@ (80009b0 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800093c:	2b01      	cmp	r3, #1
 800093e:	d112      	bne.n	8000966 <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000940:	f7ff ff5c 	bl	80007fc <FLASH_WaitForLastOperation>
 8000944:	2800      	cmp	r0, #0
 8000946:	d003      	beq.n	8000950 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000948:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800094a:	2300      	movs	r3, #0
 800094c:	763b      	strb	r3, [r7, #24]
}
 800094e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8000950:	f7ff ffc4 	bl	80008dc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000954:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <HAL_FLASHEx_Erase+0x8c>)
 8000956:	f7ff ff51 	bl	80007fc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800095a:	2104      	movs	r1, #4
 800095c:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <HAL_FLASHEx_Erase+0x90>)
 800095e:	6913      	ldr	r3, [r2, #16]
 8000960:	438b      	bics	r3, r1
 8000962:	6113      	str	r3, [r2, #16]
 8000964:	e7f1      	b.n	800094a <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000966:	f7ff ff49 	bl	80007fc <FLASH_WaitForLastOperation>
 800096a:	2800      	cmp	r0, #0
 800096c:	d1ec      	bne.n	8000948 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800096e:	2301      	movs	r3, #1
 8000970:	425b      	negs	r3, r3
 8000972:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000974:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000976:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000978:	68a3      	ldr	r3, [r4, #8]
 800097a:	6862      	ldr	r2, [r4, #4]
 800097c:	029b      	lsls	r3, r3, #10
 800097e:	189b      	adds	r3, r3, r2
 8000980:	42ab      	cmp	r3, r5
 8000982:	d9e2      	bls.n	800094a <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000984:	0028      	movs	r0, r5
 8000986:	f7ff ffbb 	bl	8000900 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800098a:	4809      	ldr	r0, [pc, #36]	@ (80009b0 <HAL_FLASHEx_Erase+0x8c>)
 800098c:	f7ff ff36 	bl	80007fc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000990:	2102      	movs	r1, #2
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_FLASHEx_Erase+0x90>)
 8000994:	6913      	ldr	r3, [r2, #16]
 8000996:	438b      	bics	r3, r1
 8000998:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800099a:	2800      	cmp	r0, #0
 800099c:	d001      	beq.n	80009a2 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 800099e:	6035      	str	r5, [r6, #0]
            break;
 80009a0:	e7d3      	b.n	800094a <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80009a2:	2380      	movs	r3, #128	@ 0x80
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	18ed      	adds	r5, r5, r3
 80009a8:	e7e6      	b.n	8000978 <HAL_FLASHEx_Erase+0x54>
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	20000118 	.word	0x20000118
 80009b0:	0000c350 	.word	0x0000c350
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80009b8:	2300      	movs	r3, #0
{
 80009ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009bc:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	680a      	ldr	r2, [r1, #0]
 80009c0:	0014      	movs	r4, r2
 80009c2:	40dc      	lsrs	r4, r3
 80009c4:	d101      	bne.n	80009ca <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80009c6:	b007      	add	sp, #28
 80009c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ca:	2501      	movs	r5, #1
 80009cc:	0014      	movs	r4, r2
 80009ce:	409d      	lsls	r5, r3
 80009d0:	402c      	ands	r4, r5
 80009d2:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80009d4:	422a      	tst	r2, r5
 80009d6:	d100      	bne.n	80009da <HAL_GPIO_Init+0x22>
 80009d8:	e094      	b.n	8000b04 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009da:	684a      	ldr	r2, [r1, #4]
 80009dc:	005f      	lsls	r7, r3, #1
 80009de:	4694      	mov	ip, r2
 80009e0:	2203      	movs	r2, #3
 80009e2:	4664      	mov	r4, ip
 80009e4:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009e6:	2403      	movs	r4, #3
 80009e8:	40bc      	lsls	r4, r7
 80009ea:	43e4      	mvns	r4, r4
 80009ec:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009ee:	1e54      	subs	r4, r2, #1
 80009f0:	2c01      	cmp	r4, #1
 80009f2:	d82e      	bhi.n	8000a52 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80009f4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009f6:	9c01      	ldr	r4, [sp, #4]
 80009f8:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009fa:	68cc      	ldr	r4, [r1, #12]
 80009fc:	40bc      	lsls	r4, r7
 80009fe:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000a00:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a02:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a04:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a06:	43ac      	bics	r4, r5
 8000a08:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a0a:	4664      	mov	r4, ip
 8000a0c:	0924      	lsrs	r4, r4, #4
 8000a0e:	4034      	ands	r4, r6
 8000a10:	409c      	lsls	r4, r3
 8000a12:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000a14:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000a16:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a18:	9c01      	ldr	r4, [sp, #4]
 8000a1a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a1c:	688c      	ldr	r4, [r1, #8]
 8000a1e:	40bc      	lsls	r4, r7
 8000a20:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000a22:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a24:	2a02      	cmp	r2, #2
 8000a26:	d116      	bne.n	8000a56 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a28:	2507      	movs	r5, #7
 8000a2a:	260f      	movs	r6, #15
 8000a2c:	401d      	ands	r5, r3
 8000a2e:	00ad      	lsls	r5, r5, #2
 8000a30:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000a32:	08dc      	lsrs	r4, r3, #3
 8000a34:	00a4      	lsls	r4, r4, #2
 8000a36:	1904      	adds	r4, r0, r4
 8000a38:	9402      	str	r4, [sp, #8]
 8000a3a:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a3c:	9603      	str	r6, [sp, #12]
 8000a3e:	0026      	movs	r6, r4
 8000a40:	9c03      	ldr	r4, [sp, #12]
 8000a42:	43a6      	bics	r6, r4
 8000a44:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	690e      	ldr	r6, [r1, #16]
 8000a48:	40ae      	lsls	r6, r5
 8000a4a:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000a4c:	9c02      	ldr	r4, [sp, #8]
 8000a4e:	6226      	str	r6, [r4, #32]
 8000a50:	e001      	b.n	8000a56 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a52:	2a03      	cmp	r2, #3
 8000a54:	d1df      	bne.n	8000a16 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a56:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000a58:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a5a:	9d01      	ldr	r5, [sp, #4]
 8000a5c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a5e:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a60:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000a62:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a64:	4662      	mov	r2, ip
 8000a66:	02a4      	lsls	r4, r4, #10
 8000a68:	4222      	tst	r2, r4
 8000a6a:	d04b      	beq.n	8000b04 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6c:	2501      	movs	r5, #1
 8000a6e:	4a26      	ldr	r2, [pc, #152]	@ (8000b08 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a70:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a74:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	432c      	orrs	r4, r5
 8000a78:	6194      	str	r4, [r2, #24]
 8000a7a:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a7c:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	402a      	ands	r2, r5
 8000a80:	9205      	str	r2, [sp, #20]
 8000a82:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a84:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <HAL_GPIO_Init+0x154>)
 8000a86:	00a4      	lsls	r4, r4, #2
 8000a88:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	3502      	adds	r5, #2
 8000a8e:	401d      	ands	r5, r3
 8000a90:	00ad      	lsls	r5, r5, #2
 8000a92:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a94:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a96:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a98:	2200      	movs	r2, #0
 8000a9a:	42b8      	cmp	r0, r7
 8000a9c:	d008      	beq.n	8000ab0 <HAL_GPIO_Init+0xf8>
 8000a9e:	4f1c      	ldr	r7, [pc, #112]	@ (8000b10 <HAL_GPIO_Init+0x158>)
 8000aa0:	3201      	adds	r2, #1
 8000aa2:	42b8      	cmp	r0, r7
 8000aa4:	d004      	beq.n	8000ab0 <HAL_GPIO_Init+0xf8>
 8000aa6:	4f1b      	ldr	r7, [pc, #108]	@ (8000b14 <HAL_GPIO_Init+0x15c>)
 8000aa8:	3204      	adds	r2, #4
 8000aaa:	42b8      	cmp	r0, r7
 8000aac:	d100      	bne.n	8000ab0 <HAL_GPIO_Init+0xf8>
 8000aae:	3a03      	subs	r2, #3
 8000ab0:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab2:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab4:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab6:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000ab8:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8000aba:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000abc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000abe:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000ac0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000ac2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ac4:	02ff      	lsls	r7, r7, #11
 8000ac6:	d401      	bmi.n	8000acc <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8000ac8:	0035      	movs	r5, r6
 8000aca:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000acc:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000ace:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000ad0:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000ad2:	9d00      	ldr	r5, [sp, #0]
 8000ad4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad6:	02bf      	lsls	r7, r7, #10
 8000ad8:	d401      	bmi.n	8000ade <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8000ada:	0035      	movs	r5, r6
 8000adc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ade:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000ae0:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000ae2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000ae4:	9d00      	ldr	r5, [sp, #0]
 8000ae6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae8:	03bf      	lsls	r7, r7, #14
 8000aea:	d401      	bmi.n	8000af0 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000aec:	0035      	movs	r5, r6
 8000aee:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000af2:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000af4:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000af6:	9e00      	ldr	r6, [sp, #0]
 8000af8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000afa:	03ff      	lsls	r7, r7, #15
 8000afc:	d401      	bmi.n	8000b02 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8000afe:	4025      	ands	r5, r4
 8000b00:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000b02:	6016      	str	r6, [r2, #0]
    position++;
 8000b04:	3301      	adds	r3, #1
 8000b06:	e75a      	b.n	80009be <HAL_GPIO_Init+0x6>
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800
 8000b18:	40010400 	.word	0x40010400

08000b1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b20:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b22:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b24:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000b26:	e7fc      	b.n	8000b22 <HAL_GPIO_WritePin+0x6>

08000b28 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b28:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	041b      	lsls	r3, r3, #16
 8000b30:	4391      	bics	r1, r2
 8000b32:	430b      	orrs	r3, r1
 8000b34:	6183      	str	r3, [r0, #24]
}
 8000b36:	4770      	bx	lr

08000b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	0004      	movs	r4, r0
 8000b3c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d102      	bne.n	8000b48 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b42:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000b44:	b005      	add	sp, #20
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b48:	6803      	ldr	r3, [r0, #0]
 8000b4a:	07db      	lsls	r3, r3, #31
 8000b4c:	d433      	bmi.n	8000bb6 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	079b      	lsls	r3, r3, #30
 8000b52:	d500      	bpl.n	8000b56 <HAL_RCC_OscConfig+0x1e>
 8000b54:	e087      	b.n	8000c66 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	071b      	lsls	r3, r3, #28
 8000b5a:	d500      	bpl.n	8000b5e <HAL_RCC_OscConfig+0x26>
 8000b5c:	e0c8      	b.n	8000cf0 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	075b      	lsls	r3, r3, #29
 8000b62:	d500      	bpl.n	8000b66 <HAL_RCC_OscConfig+0x2e>
 8000b64:	e0eb      	b.n	8000d3e <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	06db      	lsls	r3, r3, #27
 8000b6a:	d51a      	bpl.n	8000ba2 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b6c:	6962      	ldr	r2, [r4, #20]
 8000b6e:	2304      	movs	r3, #4
 8000b70:	4db9      	ldr	r5, [pc, #740]	@ (8000e58 <HAL_RCC_OscConfig+0x320>)
 8000b72:	2a01      	cmp	r2, #1
 8000b74:	d000      	beq.n	8000b78 <HAL_RCC_OscConfig+0x40>
 8000b76:	e154      	b.n	8000e22 <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b78:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b7a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b80:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000b82:	431a      	orrs	r2, r3
 8000b84:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000b86:	f7ff fda1 	bl	80006cc <HAL_GetTick>
 8000b8a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b8c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000b8e:	423b      	tst	r3, r7
 8000b90:	d100      	bne.n	8000b94 <HAL_RCC_OscConfig+0x5c>
 8000b92:	e13f      	b.n	8000e14 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b94:	21f8      	movs	r1, #248	@ 0xf8
 8000b96:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8000b98:	69a3      	ldr	r3, [r4, #24]
 8000b9a:	438a      	bics	r2, r1
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	069b      	lsls	r3, r3, #26
 8000ba6:	d500      	bpl.n	8000baa <HAL_RCC_OscConfig+0x72>
 8000ba8:	e162      	b.n	8000e70 <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000baa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d000      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x7a>
 8000bb0:	e1a1      	b.n	8000ef6 <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	e7c6      	b.n	8000b44 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	4da7      	ldr	r5, [pc, #668]	@ (8000e58 <HAL_RCC_OscConfig+0x320>)
 8000bba:	686b      	ldr	r3, [r5, #4]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d00b      	beq.n	8000bda <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc2:	686b      	ldr	r3, [r5, #4]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d10e      	bne.n	8000be8 <HAL_RCC_OscConfig+0xb0>
 8000bca:	22c0      	movs	r2, #192	@ 0xc0
 8000bcc:	686b      	ldr	r3, [r5, #4]
 8000bce:	0252      	lsls	r2, r2, #9
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2280      	movs	r2, #128	@ 0x80
 8000bd4:	0252      	lsls	r2, r2, #9
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d106      	bne.n	8000be8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	039b      	lsls	r3, r3, #14
 8000bde:	d5b6      	bpl.n	8000b4e <HAL_RCC_OscConfig+0x16>
 8000be0:	6863      	ldr	r3, [r4, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1b3      	bne.n	8000b4e <HAL_RCC_OscConfig+0x16>
 8000be6:	e7ac      	b.n	8000b42 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be8:	6863      	ldr	r3, [r4, #4]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d113      	bne.n	8000c16 <HAL_RCC_OscConfig+0xde>
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	682a      	ldr	r2, [r5, #0]
 8000bf2:	025b      	lsls	r3, r3, #9
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fd68 	bl	80006cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfc:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000bfe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c00:	02bf      	lsls	r7, r7, #10
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	423b      	tst	r3, r7
 8000c06:	d1a2      	bne.n	8000b4e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fd60 	bl	80006cc <HAL_GetTick>
 8000c0c:	1b80      	subs	r0, r0, r6
 8000c0e:	2864      	cmp	r0, #100	@ 0x64
 8000c10:	d9f7      	bls.n	8000c02 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000c12:	2003      	movs	r0, #3
 8000c14:	e796      	b.n	8000b44 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d115      	bne.n	8000c46 <HAL_RCC_OscConfig+0x10e>
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	4a8f      	ldr	r2, [pc, #572]	@ (8000e5c <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c20:	4013      	ands	r3, r2
 8000c22:	602b      	str	r3, [r5, #0]
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	4a8e      	ldr	r2, [pc, #568]	@ (8000e60 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c28:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fd4d 	bl	80006cc <HAL_GetTick>
 8000c32:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	423b      	tst	r3, r7
 8000c38:	d089      	beq.n	8000b4e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3a:	f7ff fd47 	bl	80006cc <HAL_GetTick>
 8000c3e:	1b80      	subs	r0, r0, r6
 8000c40:	2864      	cmp	r0, #100	@ 0x64
 8000c42:	d9f7      	bls.n	8000c34 <HAL_RCC_OscConfig+0xfc>
 8000c44:	e7e5      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d105      	bne.n	8000c56 <HAL_RCC_OscConfig+0x11e>
 8000c4a:	2380      	movs	r3, #128	@ 0x80
 8000c4c:	682a      	ldr	r2, [r5, #0]
 8000c4e:	02db      	lsls	r3, r3, #11
 8000c50:	4313      	orrs	r3, r2
 8000c52:	602b      	str	r3, [r5, #0]
 8000c54:	e7cb      	b.n	8000bee <HAL_RCC_OscConfig+0xb6>
 8000c56:	682b      	ldr	r3, [r5, #0]
 8000c58:	4a80      	ldr	r2, [pc, #512]	@ (8000e5c <HAL_RCC_OscConfig+0x324>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	602b      	str	r3, [r5, #0]
 8000c5e:	682b      	ldr	r3, [r5, #0]
 8000c60:	4a7f      	ldr	r2, [pc, #508]	@ (8000e60 <HAL_RCC_OscConfig+0x328>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	e7c7      	b.n	8000bf6 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c66:	220c      	movs	r2, #12
 8000c68:	4d7b      	ldr	r5, [pc, #492]	@ (8000e58 <HAL_RCC_OscConfig+0x320>)
 8000c6a:	686b      	ldr	r3, [r5, #4]
 8000c6c:	4213      	tst	r3, r2
 8000c6e:	d00b      	beq.n	8000c88 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c70:	686b      	ldr	r3, [r5, #4]
 8000c72:	4013      	ands	r3, r2
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d116      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x16e>
 8000c78:	22c0      	movs	r2, #192	@ 0xc0
 8000c7a:	686b      	ldr	r3, [r5, #4]
 8000c7c:	0252      	lsls	r2, r2, #9
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	0212      	lsls	r2, r2, #8
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d10e      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	079b      	lsls	r3, r3, #30
 8000c8c:	d503      	bpl.n	8000c96 <HAL_RCC_OscConfig+0x15e>
 8000c8e:	68e3      	ldr	r3, [r4, #12]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d000      	beq.n	8000c96 <HAL_RCC_OscConfig+0x15e>
 8000c94:	e755      	b.n	8000b42 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c96:	21f8      	movs	r1, #248	@ 0xf8
 8000c98:	682a      	ldr	r2, [r5, #0]
 8000c9a:	6923      	ldr	r3, [r4, #16]
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	602b      	str	r3, [r5, #0]
 8000ca4:	e757      	b.n	8000b56 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca6:	68e2      	ldr	r2, [r4, #12]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d00f      	beq.n	8000cce <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8000cae:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fd09 	bl	80006cc <HAL_GetTick>
 8000cba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	423b      	tst	r3, r7
 8000cc0:	d1e9      	bne.n	8000c96 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fd03 	bl	80006cc <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	2802      	cmp	r0, #2
 8000cca:	d9f7      	bls.n	8000cbc <HAL_RCC_OscConfig+0x184>
 8000ccc:	e7a1      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000cce:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000cd2:	439a      	bics	r2, r3
 8000cd4:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fcf9 	bl	80006cc <HAL_GetTick>
 8000cda:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	423b      	tst	r3, r7
 8000ce0:	d100      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1ac>
 8000ce2:	e738      	b.n	8000b56 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fcf2 	bl	80006cc <HAL_GetTick>
 8000ce8:	1b80      	subs	r0, r0, r6
 8000cea:	2802      	cmp	r0, #2
 8000cec:	d9f6      	bls.n	8000cdc <HAL_RCC_OscConfig+0x1a4>
 8000cee:	e790      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cf0:	69e2      	ldr	r2, [r4, #28]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	4d58      	ldr	r5, [pc, #352]	@ (8000e58 <HAL_RCC_OscConfig+0x320>)
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d010      	beq.n	8000d1c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000cfa:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfc:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000d02:	f7ff fce3 	bl	80006cc <HAL_GetTick>
 8000d06:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d08:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000d0a:	423b      	tst	r3, r7
 8000d0c:	d000      	beq.n	8000d10 <HAL_RCC_OscConfig+0x1d8>
 8000d0e:	e726      	b.n	8000b5e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fcdc 	bl	80006cc <HAL_GetTick>
 8000d14:	1b80      	subs	r0, r0, r6
 8000d16:	2802      	cmp	r0, #2
 8000d18:	d9f6      	bls.n	8000d08 <HAL_RCC_OscConfig+0x1d0>
 8000d1a:	e77a      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000d1c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000d20:	439a      	bics	r2, r3
 8000d22:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000d24:	f7ff fcd2 	bl	80006cc <HAL_GetTick>
 8000d28:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d2a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000d2c:	423b      	tst	r3, r7
 8000d2e:	d100      	bne.n	8000d32 <HAL_RCC_OscConfig+0x1fa>
 8000d30:	e715      	b.n	8000b5e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d32:	f7ff fccb 	bl	80006cc <HAL_GetTick>
 8000d36:	1b80      	subs	r0, r0, r6
 8000d38:	2802      	cmp	r0, #2
 8000d3a:	d9f6      	bls.n	8000d2a <HAL_RCC_OscConfig+0x1f2>
 8000d3c:	e769      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3e:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000d40:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d42:	4d45      	ldr	r5, [pc, #276]	@ (8000e58 <HAL_RCC_OscConfig+0x320>)
 8000d44:	0552      	lsls	r2, r2, #21
 8000d46:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000d48:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d4a:	4213      	tst	r3, r2
 8000d4c:	d108      	bne.n	8000d60 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	69eb      	ldr	r3, [r5, #28]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61eb      	str	r3, [r5, #28]
 8000d54:	69eb      	ldr	r3, [r5, #28]
 8000d56:	4013      	ands	r3, r2
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d60:	2780      	movs	r7, #128	@ 0x80
 8000d62:	4e40      	ldr	r6, [pc, #256]	@ (8000e64 <HAL_RCC_OscConfig+0x32c>)
 8000d64:	007f      	lsls	r7, r7, #1
 8000d66:	6833      	ldr	r3, [r6, #0]
 8000d68:	423b      	tst	r3, r7
 8000d6a:	d015      	beq.n	8000d98 <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6c:	68a3      	ldr	r3, [r4, #8]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d122      	bne.n	8000db8 <HAL_RCC_OscConfig+0x280>
 8000d72:	6a2a      	ldr	r2, [r5, #32]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000d78:	f7ff fca8 	bl	80006cc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d7e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d80:	6a2b      	ldr	r3, [r5, #32]
 8000d82:	423b      	tst	r3, r7
 8000d84:	d03f      	beq.n	8000e06 <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 8000d86:	9b00      	ldr	r3, [sp, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d000      	beq.n	8000d8e <HAL_RCC_OscConfig+0x256>
 8000d8c:	e6eb      	b.n	8000b66 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d8e:	69eb      	ldr	r3, [r5, #28]
 8000d90:	4a35      	ldr	r2, [pc, #212]	@ (8000e68 <HAL_RCC_OscConfig+0x330>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	61eb      	str	r3, [r5, #28]
 8000d96:	e6e6      	b.n	8000b66 <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d98:	6833      	ldr	r3, [r6, #0]
 8000d9a:	433b      	orrs	r3, r7
 8000d9c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc95 	bl	80006cc <HAL_GetTick>
 8000da2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da4:	6833      	ldr	r3, [r6, #0]
 8000da6:	423b      	tst	r3, r7
 8000da8:	d1e0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000daa:	f7ff fc8f 	bl	80006cc <HAL_GetTick>
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	1ac0      	subs	r0, r0, r3
 8000db2:	2864      	cmp	r0, #100	@ 0x64
 8000db4:	d9f6      	bls.n	8000da4 <HAL_RCC_OscConfig+0x26c>
 8000db6:	e72c      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d114      	bne.n	8000de8 <HAL_RCC_OscConfig+0x2b0>
 8000dbe:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc2:	4393      	bics	r3, r2
 8000dc4:	622b      	str	r3, [r5, #32]
 8000dc6:	6a2b      	ldr	r3, [r5, #32]
 8000dc8:	3203      	adds	r2, #3
 8000dca:	4393      	bics	r3, r2
 8000dcc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000dce:	f7ff fc7d 	bl	80006cc <HAL_GetTick>
 8000dd2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dd4:	6a2b      	ldr	r3, [r5, #32]
 8000dd6:	423b      	tst	r3, r7
 8000dd8:	d0d5      	beq.n	8000d86 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dda:	f7ff fc77 	bl	80006cc <HAL_GetTick>
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <HAL_RCC_OscConfig+0x334>)
 8000de0:	1b80      	subs	r0, r0, r6
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d9f6      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x29c>
 8000de6:	e714      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d105      	bne.n	8000df8 <HAL_RCC_OscConfig+0x2c0>
 8000dec:	6a29      	ldr	r1, [r5, #32]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	430b      	orrs	r3, r1
 8000df2:	622b      	str	r3, [r5, #32]
 8000df4:	6a2b      	ldr	r3, [r5, #32]
 8000df6:	e7bd      	b.n	8000d74 <HAL_RCC_OscConfig+0x23c>
 8000df8:	6a2b      	ldr	r3, [r5, #32]
 8000dfa:	4393      	bics	r3, r2
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	622b      	str	r3, [r5, #32]
 8000e00:	6a2b      	ldr	r3, [r5, #32]
 8000e02:	4393      	bics	r3, r2
 8000e04:	e7b7      	b.n	8000d76 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e06:	f7ff fc61 	bl	80006cc <HAL_GetTick>
 8000e0a:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <HAL_RCC_OscConfig+0x334>)
 8000e0c:	1b80      	subs	r0, r0, r6
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d9b6      	bls.n	8000d80 <HAL_RCC_OscConfig+0x248>
 8000e12:	e6fe      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e14:	f7ff fc5a 	bl	80006cc <HAL_GetTick>
 8000e18:	1b80      	subs	r0, r0, r6
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d800      	bhi.n	8000e20 <HAL_RCC_OscConfig+0x2e8>
 8000e1e:	e6b5      	b.n	8000b8c <HAL_RCC_OscConfig+0x54>
 8000e20:	e6f7      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e22:	3205      	adds	r2, #5
 8000e24:	d103      	bne.n	8000e2e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e26:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8000e28:	439a      	bics	r2, r3
 8000e2a:	636a      	str	r2, [r5, #52]	@ 0x34
 8000e2c:	e6b2      	b.n	8000b94 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e2e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e30:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e32:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000e34:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e36:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000e38:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000e3a:	4393      	bics	r3, r2
 8000e3c:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fc45 	bl	80006cc <HAL_GetTick>
 8000e42:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e44:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000e46:	423b      	tst	r3, r7
 8000e48:	d100      	bne.n	8000e4c <HAL_RCC_OscConfig+0x314>
 8000e4a:	e6aa      	b.n	8000ba2 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e4c:	f7ff fc3e 	bl	80006cc <HAL_GetTick>
 8000e50:	1b80      	subs	r0, r0, r6
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9f6      	bls.n	8000e44 <HAL_RCC_OscConfig+0x30c>
 8000e56:	e6dc      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	fffeffff 	.word	0xfffeffff
 8000e60:	fffbffff 	.word	0xfffbffff
 8000e64:	40007000 	.word	0x40007000
 8000e68:	efffffff 	.word	0xefffffff
 8000e6c:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000e70:	220c      	movs	r2, #12
 8000e72:	4d55      	ldr	r5, [pc, #340]	@ (8000fc8 <HAL_RCC_OscConfig+0x490>)
 8000e74:	686b      	ldr	r3, [r5, #4]
 8000e76:	4013      	ands	r3, r2
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d009      	beq.n	8000e90 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000e7c:	686b      	ldr	r3, [r5, #4]
 8000e7e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d10e      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000e84:	22c0      	movs	r2, #192	@ 0xc0
 8000e86:	686b      	ldr	r3, [r5, #4]
 8000e88:	0252      	lsls	r2, r2, #9
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d108      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000e90:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000e92:	039b      	lsls	r3, r3, #14
 8000e94:	d400      	bmi.n	8000e98 <HAL_RCC_OscConfig+0x360>
 8000e96:	e688      	b.n	8000baa <HAL_RCC_OscConfig+0x72>
 8000e98:	6a23      	ldr	r3, [r4, #32]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d000      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x368>
 8000e9e:	e650      	b.n	8000b42 <HAL_RCC_OscConfig+0xa>
 8000ea0:	e683      	b.n	8000baa <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ea2:	6a23      	ldr	r3, [r4, #32]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d013      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8000eac:	025b      	lsls	r3, r3, #9
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fc0b 	bl	80006cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000eb6:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000eb8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000eba:	02bf      	lsls	r7, r7, #10
 8000ebc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000ebe:	423b      	tst	r3, r7
 8000ec0:	d000      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x38c>
 8000ec2:	e672      	b.n	8000baa <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ec4:	f7ff fc02 	bl	80006cc <HAL_GetTick>
 8000ec8:	1b80      	subs	r0, r0, r6
 8000eca:	2802      	cmp	r0, #2
 8000ecc:	d9f6      	bls.n	8000ebc <HAL_RCC_OscConfig+0x384>
 8000ece:	e6a0      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8000ed0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8000fcc <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000ed4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8000eda:	f7ff fbf7 	bl	80006cc <HAL_GetTick>
 8000ede:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000ee0:	02bf      	lsls	r7, r7, #10
 8000ee2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000ee4:	423b      	tst	r3, r7
 8000ee6:	d100      	bne.n	8000eea <HAL_RCC_OscConfig+0x3b2>
 8000ee8:	e65f      	b.n	8000baa <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eea:	f7ff fbef 	bl	80006cc <HAL_GetTick>
 8000eee:	1b80      	subs	r0, r0, r6
 8000ef0:	2802      	cmp	r0, #2
 8000ef2:	d9f6      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x3aa>
 8000ef4:	e68d      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	4d33      	ldr	r5, [pc, #204]	@ (8000fc8 <HAL_RCC_OscConfig+0x490>)
 8000efa:	686a      	ldr	r2, [r5, #4]
 8000efc:	400a      	ands	r2, r1
 8000efe:	2a08      	cmp	r2, #8
 8000f00:	d047      	beq.n	8000f92 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f02:	4a33      	ldr	r2, [pc, #204]	@ (8000fd0 <HAL_RCC_OscConfig+0x498>)
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d132      	bne.n	8000f6e <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8000f08:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0a:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f10:	f7ff fbdc 	bl	80006cc <HAL_GetTick>
 8000f14:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f16:	04bf      	lsls	r7, r7, #18
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	423b      	tst	r3, r7
 8000f1c:	d121      	bne.n	8000f62 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f1e:	220f      	movs	r2, #15
 8000f20:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f22:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f24:	4393      	bics	r3, r2
 8000f26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8000f2e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000f32:	686a      	ldr	r2, [r5, #4]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	4927      	ldr	r1, [pc, #156]	@ (8000fd4 <HAL_RCC_OscConfig+0x49c>)
 8000f38:	400a      	ands	r2, r1
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	682a      	ldr	r2, [r5, #0]
 8000f42:	045b      	lsls	r3, r3, #17
 8000f44:	4313      	orrs	r3, r2
 8000f46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f48:	f7ff fbc0 	bl	80006cc <HAL_GetTick>
 8000f4c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f4e:	682b      	ldr	r3, [r5, #0]
 8000f50:	4233      	tst	r3, r6
 8000f52:	d000      	beq.n	8000f56 <HAL_RCC_OscConfig+0x41e>
 8000f54:	e62d      	b.n	8000bb2 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff fbb9 	bl	80006cc <HAL_GetTick>
 8000f5a:	1b00      	subs	r0, r0, r4
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d9f6      	bls.n	8000f4e <HAL_RCC_OscConfig+0x416>
 8000f60:	e657      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff fbb3 	bl	80006cc <HAL_GetTick>
 8000f66:	1b80      	subs	r0, r0, r6
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9d5      	bls.n	8000f18 <HAL_RCC_OscConfig+0x3e0>
 8000f6c:	e651      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8000f6e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f72:	4013      	ands	r3, r2
 8000f74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f76:	f7ff fba9 	bl	80006cc <HAL_GetTick>
 8000f7a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7c:	04b6      	lsls	r6, r6, #18
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	4233      	tst	r3, r6
 8000f82:	d100      	bne.n	8000f86 <HAL_RCC_OscConfig+0x44e>
 8000f84:	e615      	b.n	8000bb2 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f86:	f7ff fba1 	bl	80006cc <HAL_GetTick>
 8000f8a:	1b00      	subs	r0, r0, r4
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f6      	bls.n	8000f7e <HAL_RCC_OscConfig+0x446>
 8000f90:	e63f      	b.n	8000c12 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d100      	bne.n	8000f98 <HAL_RCC_OscConfig+0x460>
 8000f96:	e5d4      	b.n	8000b42 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f98:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8000f9a:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f9e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8000fa0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa2:	4002      	ands	r2, r0
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	d000      	beq.n	8000faa <HAL_RCC_OscConfig+0x472>
 8000fa8:	e5cb      	b.n	8000b42 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000faa:	220f      	movs	r2, #15
 8000fac:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d000      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x47e>
 8000fb4:	e5c5      	b.n	8000b42 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	039b      	lsls	r3, r3, #14
 8000fba:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000fbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000fbe:	1ac0      	subs	r0, r0, r3
 8000fc0:	1e43      	subs	r3, r0, #1
 8000fc2:	4198      	sbcs	r0, r3
 8000fc4:	b2c0      	uxtb	r0, r0
 8000fc6:	e5bd      	b.n	8000b44 <HAL_RCC_OscConfig+0xc>
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	fffeffff 	.word	0xfffeffff
 8000fd0:	feffffff 	.word	0xfeffffff
 8000fd4:	ffc27fff 	.word	0xffc27fff

08000fd8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fd8:	200c      	movs	r0, #12
{
 8000fda:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000fdc:	4d13      	ldr	r5, [pc, #76]	@ (800102c <HAL_RCC_GetSysClockFreq+0x54>)
 8000fde:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fe0:	4018      	ands	r0, r3
 8000fe2:	2808      	cmp	r0, #8
 8000fe4:	d008      	beq.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fe6:	380c      	subs	r0, #12
 8000fe8:	4243      	negs	r3, r0
 8000fea:	4158      	adcs	r0, r3
 8000fec:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_RCC_GetSysClockFreq+0x58>)
 8000fee:	4240      	negs	r0, r0
 8000ff0:	4018      	ands	r0, r3
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000ff4:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000ff8:	200f      	movs	r0, #15
 8000ffa:	490f      	ldr	r1, [pc, #60]	@ (8001038 <HAL_RCC_GetSysClockFreq+0x60>)
 8000ffc:	0c9a      	lsrs	r2, r3, #18
 8000ffe:	4002      	ands	r2, r0
 8001000:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001002:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001004:	490d      	ldr	r1, [pc, #52]	@ (800103c <HAL_RCC_GetSysClockFreq+0x64>)
 8001006:	4002      	ands	r2, r0
 8001008:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800100a:	22c0      	movs	r2, #192	@ 0xc0
 800100c:	2080      	movs	r0, #128	@ 0x80
 800100e:	0252      	lsls	r2, r2, #9
 8001010:	4013      	ands	r3, r2
 8001012:	0240      	lsls	r0, r0, #9
 8001014:	4283      	cmp	r3, r0
 8001016:	d101      	bne.n	800101c <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001018:	4806      	ldr	r0, [pc, #24]	@ (8001034 <HAL_RCC_GetSysClockFreq+0x5c>)
 800101a:	e002      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800101c:	4293      	cmp	r3, r2
 800101e:	d1fb      	bne.n	8001018 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001020:	4807      	ldr	r0, [pc, #28]	@ (8001040 <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001022:	f7ff f885 	bl	8000130 <__udivsi3>
 8001026:	4360      	muls	r0, r4
 8001028:	e7e5      	b.n	8000ff6 <HAL_RCC_GetSysClockFreq+0x1e>
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	40021000 	.word	0x40021000
 8001030:	02625a00 	.word	0x02625a00
 8001034:	007a1200 	.word	0x007a1200
 8001038:	080026b0 	.word	0x080026b0
 800103c:	080026a0 	.word	0x080026a0
 8001040:	02dc6c00 	.word	0x02dc6c00

08001044 <HAL_RCC_ClockConfig>:
{
 8001044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001046:	0004      	movs	r4, r0
 8001048:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800104a:	2800      	cmp	r0, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800104e:	2001      	movs	r0, #1
}
 8001050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001052:	2201      	movs	r2, #1
 8001054:	4d3a      	ldr	r5, [pc, #232]	@ (8001140 <HAL_RCC_ClockConfig+0xfc>)
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	4013      	ands	r3, r2
 800105a:	428b      	cmp	r3, r1
 800105c:	d31c      	bcc.n	8001098 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105e:	6822      	ldr	r2, [r4, #0]
 8001060:	0793      	lsls	r3, r2, #30
 8001062:	d422      	bmi.n	80010aa <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001064:	07d2      	lsls	r2, r2, #31
 8001066:	d42f      	bmi.n	80010c8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001068:	2301      	movs	r3, #1
 800106a:	682a      	ldr	r2, [r5, #0]
 800106c:	401a      	ands	r2, r3
 800106e:	42ba      	cmp	r2, r7
 8001070:	d857      	bhi.n	8001122 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	4d33      	ldr	r5, [pc, #204]	@ (8001144 <HAL_RCC_ClockConfig+0x100>)
 8001076:	075b      	lsls	r3, r3, #29
 8001078:	d45a      	bmi.n	8001130 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800107a:	f7ff ffad 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 800107e:	686b      	ldr	r3, [r5, #4]
 8001080:	4a31      	ldr	r2, [pc, #196]	@ (8001148 <HAL_RCC_ClockConfig+0x104>)
 8001082:	061b      	lsls	r3, r3, #24
 8001084:	0f1b      	lsrs	r3, r3, #28
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	4930      	ldr	r1, [pc, #192]	@ (800114c <HAL_RCC_ClockConfig+0x108>)
 800108a:	40d8      	lsrs	r0, r3
 800108c:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fadc 	bl	800064c <HAL_InitTick>
  return HAL_OK;
 8001094:	2000      	movs	r0, #0
 8001096:	e7db      	b.n	8001050 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	4393      	bics	r3, r2
 800109c:	430b      	orrs	r3, r1
 800109e:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	4013      	ands	r3, r2
 80010a4:	428b      	cmp	r3, r1
 80010a6:	d1d2      	bne.n	800104e <HAL_RCC_ClockConfig+0xa>
 80010a8:	e7d9      	b.n	800105e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010aa:	4926      	ldr	r1, [pc, #152]	@ (8001144 <HAL_RCC_ClockConfig+0x100>)
 80010ac:	0753      	lsls	r3, r2, #29
 80010ae:	d504      	bpl.n	80010ba <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010b0:	23e0      	movs	r3, #224	@ 0xe0
 80010b2:	6848      	ldr	r0, [r1, #4]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4303      	orrs	r3, r0
 80010b8:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ba:	20f0      	movs	r0, #240	@ 0xf0
 80010bc:	684b      	ldr	r3, [r1, #4]
 80010be:	4383      	bics	r3, r0
 80010c0:	68a0      	ldr	r0, [r4, #8]
 80010c2:	4303      	orrs	r3, r0
 80010c4:	604b      	str	r3, [r1, #4]
 80010c6:	e7cd      	b.n	8001064 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c8:	6862      	ldr	r2, [r4, #4]
 80010ca:	4e1e      	ldr	r6, [pc, #120]	@ (8001144 <HAL_RCC_ClockConfig+0x100>)
 80010cc:	2a01      	cmp	r2, #1
 80010ce:	d103      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d0:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010d2:	039b      	lsls	r3, r3, #14
 80010d4:	d405      	bmi.n	80010e2 <HAL_RCC_ClockConfig+0x9e>
 80010d6:	e7ba      	b.n	800104e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d8:	2a02      	cmp	r2, #2
 80010da:	d11a      	bne.n	8001112 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010dc:	6833      	ldr	r3, [r6, #0]
 80010de:	019b      	lsls	r3, r3, #6
 80010e0:	d5b5      	bpl.n	800104e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	2103      	movs	r1, #3
 80010e4:	6873      	ldr	r3, [r6, #4]
 80010e6:	438b      	bics	r3, r1
 80010e8:	4313      	orrs	r3, r2
 80010ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010ec:	f7ff faee 	bl	80006cc <HAL_GetTick>
 80010f0:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	230c      	movs	r3, #12
 80010f4:	6872      	ldr	r2, [r6, #4]
 80010f6:	401a      	ands	r2, r3
 80010f8:	6863      	ldr	r3, [r4, #4]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d0b3      	beq.n	8001068 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff fae4 	bl	80006cc <HAL_GetTick>
 8001104:	9b01      	ldr	r3, [sp, #4]
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_RCC_ClockConfig+0x10c>)
 800110a:	4298      	cmp	r0, r3
 800110c:	d9f1      	bls.n	80010f2 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	e79e      	b.n	8001050 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001112:	2a03      	cmp	r2, #3
 8001114:	d101      	bne.n	800111a <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001116:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8001118:	e7db      	b.n	80010d2 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111a:	6833      	ldr	r3, [r6, #0]
 800111c:	079b      	lsls	r3, r3, #30
 800111e:	d4e0      	bmi.n	80010e2 <HAL_RCC_ClockConfig+0x9e>
 8001120:	e795      	b.n	800104e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	682a      	ldr	r2, [r5, #0]
 8001124:	439a      	bics	r2, r3
 8001126:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001128:	682a      	ldr	r2, [r5, #0]
 800112a:	421a      	tst	r2, r3
 800112c:	d0a1      	beq.n	8001072 <HAL_RCC_ClockConfig+0x2e>
 800112e:	e78e      	b.n	800104e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001130:	686b      	ldr	r3, [r5, #4]
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_RCC_ClockConfig+0x110>)
 8001134:	4013      	ands	r3, r2
 8001136:	68e2      	ldr	r2, [r4, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	606b      	str	r3, [r5, #4]
 800113c:	e79d      	b.n	800107a <HAL_RCC_ClockConfig+0x36>
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	40022000 	.word	0x40022000
 8001144:	40021000 	.word	0x40021000
 8001148:	08002690 	.word	0x08002690
 800114c:	20000000 	.word	0x20000000
 8001150:	00001388 	.word	0x00001388
 8001154:	fffff8ff 	.word	0xfffff8ff

08001158 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4905      	ldr	r1, [pc, #20]	@ (8001174 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001160:	055b      	lsls	r3, r3, #21
 8001162:	0f5b      	lsrs	r3, r3, #29
 8001164:	5ccb      	ldrb	r3, [r1, r3]
 8001166:	6810      	ldr	r0, [r2, #0]
 8001168:	40d8      	lsrs	r0, r3
}    
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000
 8001170:	20000000 	.word	0x20000000
 8001174:	08002688 	.word	0x08002688

08001178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001178:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800117a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800117e:	2201      	movs	r2, #1
 8001180:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001184:	6801      	ldr	r1, [r0, #0]
 8001186:	4d12      	ldr	r5, [pc, #72]	@ (80011d0 <UART_EndRxTransfer+0x58>)
 8001188:	680b      	ldr	r3, [r1, #0]
 800118a:	402b      	ands	r3, r5
 800118c:	600b      	str	r3, [r1, #0]
 800118e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001192:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001196:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800119a:	6801      	ldr	r1, [r0, #0]
 800119c:	688b      	ldr	r3, [r1, #8]
 800119e:	4393      	bics	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
 80011a2:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80011a6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10a      	bne.n	80011c2 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b0:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80011b4:	2410      	movs	r4, #16
 80011b6:	6802      	ldr	r2, [r0, #0]
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	43a3      	bics	r3, r4
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011c2:	2220      	movs	r2, #32
 80011c4:	1d03      	adds	r3, r0, #4
 80011c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80011c8:	2300      	movs	r3, #0
 80011ca:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80011cc:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80011ce:	bd30      	pop	{r4, r5, pc}
 80011d0:	fffffedf 	.word	0xfffffedf

080011d4 <UART_SetConfig>:
{
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011d8:	6925      	ldr	r5, [r4, #16]
 80011da:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011dc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011de:	4329      	orrs	r1, r5
 80011e0:	6965      	ldr	r5, [r4, #20]
 80011e2:	69c2      	ldr	r2, [r0, #28]
 80011e4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	4d3d      	ldr	r5, [pc, #244]	@ (80012e0 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011ea:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011ec:	4028      	ands	r0, r5
 80011ee:	4301      	orrs	r1, r0
 80011f0:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	483b      	ldr	r0, [pc, #236]	@ (80012e4 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 80011f6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011f8:	4001      	ands	r1, r0
 80011fa:	68e0      	ldr	r0, [r4, #12]
 80011fc:	4301      	orrs	r1, r0
 80011fe:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001200:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001202:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001204:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001206:	4d38      	ldr	r5, [pc, #224]	@ (80012e8 <UART_SetConfig+0x114>)
 8001208:	4028      	ands	r0, r5
 800120a:	4301      	orrs	r1, r0
 800120c:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800120e:	4937      	ldr	r1, [pc, #220]	@ (80012ec <UART_SetConfig+0x118>)
 8001210:	428b      	cmp	r3, r1
 8001212:	d115      	bne.n	8001240 <UART_SetConfig+0x6c>
 8001214:	2103      	movs	r1, #3
 8001216:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <UART_SetConfig+0x11c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	400b      	ands	r3, r1
 800121c:	3b01      	subs	r3, #1
 800121e:	2b02      	cmp	r3, #2
 8001220:	d851      	bhi.n	80012c6 <UART_SetConfig+0xf2>
 8001222:	4934      	ldr	r1, [pc, #208]	@ (80012f4 <UART_SetConfig+0x120>)
 8001224:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	429a      	cmp	r2, r3
 800122c:	d127      	bne.n	800127e <UART_SetConfig+0xaa>
    switch (clocksource)
 800122e:	2808      	cmp	r0, #8
 8001230:	d847      	bhi.n	80012c2 <UART_SetConfig+0xee>
 8001232:	f7fe ff69 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001236:	464c      	.short	0x464c
 8001238:	460b460e 	.word	0x460b460e
 800123c:	4646      	.short	0x4646
 800123e:	0f          	.byte	0x0f
 800123f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001240:	492d      	ldr	r1, [pc, #180]	@ (80012f8 <UART_SetConfig+0x124>)
 8001242:	185b      	adds	r3, r3, r1
 8001244:	1e59      	subs	r1, r3, #1
 8001246:	418b      	sbcs	r3, r1
 8001248:	0118      	lsls	r0, r3, #4
 800124a:	e7ec      	b.n	8001226 <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 800124c:	f7ff fec4 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8001250:	e03f      	b.n	80012d2 <UART_SetConfig+0xfe>
    switch (clocksource)
 8001252:	4a2a      	ldr	r2, [pc, #168]	@ (80012fc <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001254:	6861      	ldr	r1, [r4, #4]
 8001256:	0052      	lsls	r2, r2, #1
 8001258:	0848      	lsrs	r0, r1, #1
 800125a:	1810      	adds	r0, r2, r0
 800125c:	f7fe ff68 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001260:	0002      	movs	r2, r0
 8001262:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <UART_SetConfig+0x12c>)
 8001264:	3a10      	subs	r2, #16
 8001266:	429a      	cmp	r2, r3
 8001268:	d82b      	bhi.n	80012c2 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800126a:	230f      	movs	r3, #15
 800126c:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800126e:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001270:	439a      	bics	r2, r3
 8001272:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001274:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	4303      	orrs	r3, r0
 800127a:	60d3      	str	r3, [r2, #12]
 800127c:	e02b      	b.n	80012d6 <UART_SetConfig+0x102>
    switch (clocksource)
 800127e:	2808      	cmp	r0, #8
 8001280:	d81f      	bhi.n	80012c2 <UART_SetConfig+0xee>
 8001282:	f7fe ff41 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001286:	1e13      	.short	0x1e13
 8001288:	1e181e05 	.word	0x1e181e05
 800128c:	1e1e      	.short	0x1e1e
 800128e:	1b          	.byte	0x1b
 800128f:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8001290:	481a      	ldr	r0, [pc, #104]	@ (80012fc <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001292:	6861      	ldr	r1, [r4, #4]
 8001294:	084b      	lsrs	r3, r1, #1
 8001296:	1818      	adds	r0, r3, r0
 8001298:	f7fe ff4a 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800129c:	0002      	movs	r2, r0
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <UART_SetConfig+0x12c>)
 80012a0:	3a10      	subs	r2, #16
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d80d      	bhi.n	80012c2 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	60d8      	str	r0, [r3, #12]
 80012aa:	e014      	b.n	80012d6 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 80012ac:	f7ff ff54 	bl	8001158 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d010      	beq.n	80012d6 <UART_SetConfig+0x102>
 80012b4:	e7ed      	b.n	8001292 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 80012b6:	f7ff fe8f 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
        break;
 80012ba:	e7f9      	b.n	80012b0 <UART_SetConfig+0xdc>
    switch (clocksource)
 80012bc:	2080      	movs	r0, #128	@ 0x80
 80012be:	0200      	lsls	r0, r0, #8
 80012c0:	e7e7      	b.n	8001292 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 80012c2:	2001      	movs	r0, #1
 80012c4:	e008      	b.n	80012d8 <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d1ee      	bne.n	80012ac <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80012ce:	f7ff ff43 	bl	8001158 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80012d2:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 80012d4:	d1be      	bne.n	8001254 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 80012d6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80012dc:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	efff69f3 	.word	0xefff69f3
 80012e4:	ffffcfff 	.word	0xffffcfff
 80012e8:	fffff4ff 	.word	0xfffff4ff
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40021000 	.word	0x40021000
 80012f4:	080026c0 	.word	0x080026c0
 80012f8:	bfffbc00 	.word	0xbfffbc00
 80012fc:	007a1200 	.word	0x007a1200
 8001300:	0000ffef 	.word	0x0000ffef

08001304 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001304:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8001306:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001308:	071a      	lsls	r2, r3, #28
 800130a:	d506      	bpl.n	800131a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800130c:	6801      	ldr	r1, [r0, #0]
 800130e:	4c28      	ldr	r4, [pc, #160]	@ (80013b0 <UART_AdvFeatureConfig+0xac>)
 8001310:	684a      	ldr	r2, [r1, #4]
 8001312:	4022      	ands	r2, r4
 8001314:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8001316:	4322      	orrs	r2, r4
 8001318:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800131a:	07da      	lsls	r2, r3, #31
 800131c:	d506      	bpl.n	800132c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800131e:	6801      	ldr	r1, [r0, #0]
 8001320:	4c24      	ldr	r4, [pc, #144]	@ (80013b4 <UART_AdvFeatureConfig+0xb0>)
 8001322:	684a      	ldr	r2, [r1, #4]
 8001324:	4022      	ands	r2, r4
 8001326:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8001328:	4322      	orrs	r2, r4
 800132a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800132c:	079a      	lsls	r2, r3, #30
 800132e:	d506      	bpl.n	800133e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001330:	6801      	ldr	r1, [r0, #0]
 8001332:	4c21      	ldr	r4, [pc, #132]	@ (80013b8 <UART_AdvFeatureConfig+0xb4>)
 8001334:	684a      	ldr	r2, [r1, #4]
 8001336:	4022      	ands	r2, r4
 8001338:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800133a:	4322      	orrs	r2, r4
 800133c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800133e:	075a      	lsls	r2, r3, #29
 8001340:	d506      	bpl.n	8001350 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001342:	6801      	ldr	r1, [r0, #0]
 8001344:	4c1d      	ldr	r4, [pc, #116]	@ (80013bc <UART_AdvFeatureConfig+0xb8>)
 8001346:	684a      	ldr	r2, [r1, #4]
 8001348:	4022      	ands	r2, r4
 800134a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800134c:	4322      	orrs	r2, r4
 800134e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001350:	06da      	lsls	r2, r3, #27
 8001352:	d506      	bpl.n	8001362 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001354:	6801      	ldr	r1, [r0, #0]
 8001356:	4c1a      	ldr	r4, [pc, #104]	@ (80013c0 <UART_AdvFeatureConfig+0xbc>)
 8001358:	688a      	ldr	r2, [r1, #8]
 800135a:	4022      	ands	r2, r4
 800135c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800135e:	4322      	orrs	r2, r4
 8001360:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001362:	069a      	lsls	r2, r3, #26
 8001364:	d506      	bpl.n	8001374 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001366:	6801      	ldr	r1, [r0, #0]
 8001368:	4c16      	ldr	r4, [pc, #88]	@ (80013c4 <UART_AdvFeatureConfig+0xc0>)
 800136a:	688a      	ldr	r2, [r1, #8]
 800136c:	4022      	ands	r2, r4
 800136e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8001370:	4322      	orrs	r2, r4
 8001372:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001374:	065a      	lsls	r2, r3, #25
 8001376:	d510      	bpl.n	800139a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001378:	6801      	ldr	r1, [r0, #0]
 800137a:	4d13      	ldr	r5, [pc, #76]	@ (80013c8 <UART_AdvFeatureConfig+0xc4>)
 800137c:	684a      	ldr	r2, [r1, #4]
 800137e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8001380:	402a      	ands	r2, r5
 8001382:	4322      	orrs	r2, r4
 8001384:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	0352      	lsls	r2, r2, #13
 800138a:	4294      	cmp	r4, r2
 800138c:	d105      	bne.n	800139a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800138e:	684a      	ldr	r2, [r1, #4]
 8001390:	4c0e      	ldr	r4, [pc, #56]	@ (80013cc <UART_AdvFeatureConfig+0xc8>)
 8001392:	4022      	ands	r2, r4
 8001394:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001396:	4322      	orrs	r2, r4
 8001398:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800139a:	061b      	lsls	r3, r3, #24
 800139c:	d506      	bpl.n	80013ac <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800139e:	6802      	ldr	r2, [r0, #0]
 80013a0:	490b      	ldr	r1, [pc, #44]	@ (80013d0 <UART_AdvFeatureConfig+0xcc>)
 80013a2:	6853      	ldr	r3, [r2, #4]
 80013a4:	400b      	ands	r3, r1
 80013a6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6053      	str	r3, [r2, #4]
}
 80013ac:	bd30      	pop	{r4, r5, pc}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	ffff7fff 	.word	0xffff7fff
 80013b4:	fffdffff 	.word	0xfffdffff
 80013b8:	fffeffff 	.word	0xfffeffff
 80013bc:	fffbffff 	.word	0xfffbffff
 80013c0:	ffffefff 	.word	0xffffefff
 80013c4:	ffffdfff 	.word	0xffffdfff
 80013c8:	ffefffff 	.word	0xffefffff
 80013cc:	ff9fffff 	.word	0xff9fffff
 80013d0:	fff7ffff 	.word	0xfff7ffff

080013d4 <UART_WaitOnFlagUntilTimeout>:
{
 80013d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013d6:	0004      	movs	r4, r0
 80013d8:	000d      	movs	r5, r1
 80013da:	0017      	movs	r7, r2
 80013dc:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013de:	6822      	ldr	r2, [r4, #0]
 80013e0:	69d3      	ldr	r3, [r2, #28]
 80013e2:	402b      	ands	r3, r5
 80013e4:	1b5b      	subs	r3, r3, r5
 80013e6:	4259      	negs	r1, r3
 80013e8:	414b      	adcs	r3, r1
 80013ea:	42bb      	cmp	r3, r7
 80013ec:	d001      	beq.n	80013f2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80013ee:	2000      	movs	r0, #0
 80013f0:	e025      	b.n	800143e <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80013f2:	9b08      	ldr	r3, [sp, #32]
 80013f4:	3301      	adds	r3, #1
 80013f6:	d0f3      	beq.n	80013e0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013f8:	f7ff f968 	bl	80006cc <HAL_GetTick>
 80013fc:	9b00      	ldr	r3, [sp, #0]
 80013fe:	1ac0      	subs	r0, r0, r3
 8001400:	9b08      	ldr	r3, [sp, #32]
 8001402:	4298      	cmp	r0, r3
 8001404:	d82c      	bhi.n	8001460 <UART_WaitOnFlagUntilTimeout+0x8c>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d02a      	beq.n	8001460 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	0752      	lsls	r2, r2, #29
 8001410:	d5e5      	bpl.n	80013de <UART_WaitOnFlagUntilTimeout+0xa>
 8001412:	002a      	movs	r2, r5
 8001414:	2140      	movs	r1, #64	@ 0x40
 8001416:	3a40      	subs	r2, #64	@ 0x40
 8001418:	438a      	bics	r2, r1
 800141a:	d0e0      	beq.n	80013de <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	2608      	movs	r6, #8
 8001420:	0011      	movs	r1, r2
 8001422:	4031      	ands	r1, r6
 8001424:	9101      	str	r1, [sp, #4]
 8001426:	4232      	tst	r2, r6
 8001428:	d00a      	beq.n	8001440 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800142a:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800142c:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800142e:	f7ff fea3 	bl	8001178 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001432:	19a3      	adds	r3, r4, r6
 8001434:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8001436:	2300      	movs	r3, #0
          return HAL_ERROR;
 8001438:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800143a:	3478      	adds	r4, #120	@ 0x78
 800143c:	7023      	strb	r3, [r4, #0]
}
 800143e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	69d9      	ldr	r1, [r3, #28]
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	4211      	tst	r1, r2
 8001448:	d0c9      	beq.n	80013de <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800144a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800144c:	0020      	movs	r0, r4
 800144e:	f7ff fe93 	bl	8001178 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001452:	0023      	movs	r3, r4
 8001454:	2220      	movs	r2, #32
 8001456:	3308      	adds	r3, #8
 8001458:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	3478      	adds	r4, #120	@ 0x78
 800145e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001460:	2003      	movs	r0, #3
 8001462:	e7ec      	b.n	800143e <UART_WaitOnFlagUntilTimeout+0x6a>

08001464 <HAL_UART_Transmit>:
{
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	b087      	sub	sp, #28
 8001468:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800146a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 800146c:	0004      	movs	r4, r0
 800146e:	000d      	movs	r5, r1
 8001470:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001472:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001474:	2b20      	cmp	r3, #32
 8001476:	d138      	bne.n	80014ea <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 8001478:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800147a:	2900      	cmp	r1, #0
 800147c:	d035      	beq.n	80014ea <HAL_UART_Transmit+0x86>
 800147e:	2a00      	cmp	r2, #0
 8001480:	d033      	beq.n	80014ea <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	68a2      	ldr	r2, [r4, #8]
 8001486:	015b      	lsls	r3, r3, #5
 8001488:	429a      	cmp	r2, r3
 800148a:	d104      	bne.n	8001496 <HAL_UART_Transmit+0x32>
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001492:	4201      	tst	r1, r0
 8001494:	d129      	bne.n	80014ea <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001496:	0023      	movs	r3, r4
 8001498:	2600      	movs	r6, #0
 800149a:	3308      	adds	r3, #8
 800149c:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800149e:	2321      	movs	r3, #33	@ 0x21
 80014a0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80014a2:	f7ff f913 	bl	80006cc <HAL_GetTick>
    huart->TxXferSize  = Size;
 80014a6:	0023      	movs	r3, r4
 80014a8:	3350      	adds	r3, #80	@ 0x50
 80014aa:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80014ac:	3302      	adds	r3, #2
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80014b6:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014b8:	015b      	lsls	r3, r3, #5
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d104      	bne.n	80014c8 <HAL_UART_Transmit+0x64>
 80014be:	6923      	ldr	r3, [r4, #16]
 80014c0:	42b3      	cmp	r3, r6
 80014c2:	d101      	bne.n	80014c8 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 80014c4:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80014c6:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80014c8:	0023      	movs	r3, r4
 80014ca:	3352      	adds	r3, #82	@ 0x52
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10c      	bne.n	80014ee <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014d4:	9b05      	ldr	r3, [sp, #20]
 80014d6:	2140      	movs	r1, #64	@ 0x40
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	0020      	movs	r0, r4
 80014dc:	9b04      	ldr	r3, [sp, #16]
 80014de:	f7ff ff79 	bl	80013d4 <UART_WaitOnFlagUntilTimeout>
 80014e2:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80014e4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d10d      	bne.n	8001506 <HAL_UART_Transmit+0xa2>
}
 80014ea:	b007      	add	sp, #28
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ee:	9b05      	ldr	r3, [sp, #20]
 80014f0:	2200      	movs	r2, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	0020      	movs	r0, r4
 80014f8:	9b04      	ldr	r3, [sp, #16]
 80014fa:	f7ff ff6b 	bl	80013d4 <UART_WaitOnFlagUntilTimeout>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d003      	beq.n	800150a <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8001502:	2320      	movs	r3, #32
 8001504:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8001506:	2003      	movs	r0, #3
 8001508:	e7ef      	b.n	80014ea <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800150a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800150c:	2d00      	cmp	r5, #0
 800150e:	d10b      	bne.n	8001528 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001510:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001512:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	0ddb      	lsrs	r3, r3, #23
 8001518:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800151a:	9b03      	ldr	r3, [sp, #12]
 800151c:	9a03      	ldr	r2, [sp, #12]
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	8013      	strh	r3, [r2, #0]
 8001526:	e7cf      	b.n	80014c8 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001528:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800152a:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800152c:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 800152e:	e7f4      	b.n	800151a <HAL_UART_Transmit+0xb6>

08001530 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001530:	0003      	movs	r3, r0
{
 8001532:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001534:	2500      	movs	r5, #0
{
 8001536:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001538:	3308      	adds	r3, #8
 800153a:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 800153c:	f7ff f8c6 	bl	80006cc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001540:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001542:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	071b      	lsls	r3, r3, #28
 8001548:	d51d      	bpl.n	8001586 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800154a:	2180      	movs	r1, #128	@ 0x80
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <UART_CheckIdleState+0xb8>)
 800154e:	002a      	movs	r2, r5
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	0389      	lsls	r1, r1, #14
 8001554:	0003      	movs	r3, r0
 8001556:	0020      	movs	r0, r4
 8001558:	f7ff ff3c 	bl	80013d4 <UART_WaitOnFlagUntilTimeout>
 800155c:	42a8      	cmp	r0, r5
 800155e:	d012      	beq.n	8001586 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001560:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001564:	2301      	movs	r3, #1
 8001566:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800156a:	2080      	movs	r0, #128	@ 0x80
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	4383      	bics	r3, r0
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001578:	2320      	movs	r3, #32
 800157a:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800157c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800157e:	2300      	movs	r3, #0
 8001580:	3478      	adds	r4, #120	@ 0x78
 8001582:	7023      	strb	r3, [r4, #0]
}
 8001584:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001586:	0025      	movs	r5, r4
 8001588:	cd08      	ldmia	r5!, {r3}
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	075b      	lsls	r3, r3, #29
 800158e:	d523      	bpl.n	80015d8 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <UART_CheckIdleState+0xb8>)
 8001594:	2200      	movs	r2, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	0020      	movs	r0, r4
 800159a:	0033      	movs	r3, r6
 800159c:	03c9      	lsls	r1, r1, #15
 800159e:	f7ff ff19 	bl	80013d4 <UART_WaitOnFlagUntilTimeout>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d018      	beq.n	80015d8 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015a6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015aa:	2201      	movs	r2, #1
 80015ac:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	4e0e      	ldr	r6, [pc, #56]	@ (80015ec <UART_CheckIdleState+0xbc>)
 80015b4:	680b      	ldr	r3, [r1, #0]
 80015b6:	4033      	ands	r3, r6
 80015b8:	600b      	str	r3, [r1, #0]
 80015ba:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015be:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015c6:	6821      	ldr	r1, [r4, #0]
 80015c8:	688b      	ldr	r3, [r1, #8]
 80015ca:	4393      	bics	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
 80015ce:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80015d2:	2320      	movs	r3, #32
 80015d4:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80015d6:	e7d1      	b.n	800157c <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 80015d8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015da:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80015dc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80015de:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015e0:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80015e2:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 80015e4:	e7cb      	b.n	800157e <UART_CheckIdleState+0x4e>
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	01ffffff 	.word	0x01ffffff
 80015ec:	fffffedf 	.word	0xfffffedf

080015f0 <HAL_UART_Init>:
{
 80015f0:	b510      	push	{r4, lr}
 80015f2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80015f4:	d101      	bne.n	80015fa <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
}
 80015f8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80015fa:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001600:	0002      	movs	r2, r0
 8001602:	3278      	adds	r2, #120	@ 0x78
 8001604:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001606:	f7fe ff69 	bl	80004dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800160a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800160c:	2101      	movs	r1, #1
 800160e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001610:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	438b      	bics	r3, r1
 8001616:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001618:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800161e:	0020      	movs	r0, r4
 8001620:	f7ff fe70 	bl	8001304 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001624:	0020      	movs	r0, r4
 8001626:	f7ff fdd5 	bl	80011d4 <UART_SetConfig>
 800162a:	2801      	cmp	r0, #1
 800162c:	d0e3      	beq.n	80015f6 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	4907      	ldr	r1, [pc, #28]	@ (8001650 <HAL_UART_Init+0x60>)
 8001632:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001634:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001636:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001638:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800163a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	438a      	bics	r2, r1
 8001640:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001642:	2201      	movs	r2, #1
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800164a:	f7ff ff71 	bl	8001530 <UART_CheckIdleState>
 800164e:	e7d3      	b.n	80015f8 <HAL_UART_Init+0x8>
 8001650:	ffffb7ff 	.word	0xffffb7ff

08001654 <std>:
 8001654:	2300      	movs	r3, #0
 8001656:	b510      	push	{r4, lr}
 8001658:	0004      	movs	r4, r0
 800165a:	6003      	str	r3, [r0, #0]
 800165c:	6043      	str	r3, [r0, #4]
 800165e:	6083      	str	r3, [r0, #8]
 8001660:	8181      	strh	r1, [r0, #12]
 8001662:	6643      	str	r3, [r0, #100]	@ 0x64
 8001664:	81c2      	strh	r2, [r0, #14]
 8001666:	6103      	str	r3, [r0, #16]
 8001668:	6143      	str	r3, [r0, #20]
 800166a:	6183      	str	r3, [r0, #24]
 800166c:	0019      	movs	r1, r3
 800166e:	2208      	movs	r2, #8
 8001670:	305c      	adds	r0, #92	@ 0x5c
 8001672:	f000 fa0f 	bl	8001a94 <memset>
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <std+0x50>)
 8001678:	6224      	str	r4, [r4, #32]
 800167a:	6263      	str	r3, [r4, #36]	@ 0x24
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <std+0x54>)
 800167e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <std+0x58>)
 8001682:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001684:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <std+0x5c>)
 8001686:	6323      	str	r3, [r4, #48]	@ 0x30
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <std+0x60>)
 800168a:	429c      	cmp	r4, r3
 800168c:	d005      	beq.n	800169a <std+0x46>
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <std+0x64>)
 8001690:	429c      	cmp	r4, r3
 8001692:	d002      	beq.n	800169a <std+0x46>
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <std+0x68>)
 8001696:	429c      	cmp	r4, r3
 8001698:	d103      	bne.n	80016a2 <std+0x4e>
 800169a:	0020      	movs	r0, r4
 800169c:	3058      	adds	r0, #88	@ 0x58
 800169e:	f000 fa79 	bl	8001b94 <__retarget_lock_init_recursive>
 80016a2:	bd10      	pop	{r4, pc}
 80016a4:	080018bd 	.word	0x080018bd
 80016a8:	080018e5 	.word	0x080018e5
 80016ac:	0800191d 	.word	0x0800191d
 80016b0:	08001949 	.word	0x08001949
 80016b4:	20000138 	.word	0x20000138
 80016b8:	200001a0 	.word	0x200001a0
 80016bc:	20000208 	.word	0x20000208

080016c0 <stdio_exit_handler>:
 80016c0:	b510      	push	{r4, lr}
 80016c2:	4a03      	ldr	r2, [pc, #12]	@ (80016d0 <stdio_exit_handler+0x10>)
 80016c4:	4903      	ldr	r1, [pc, #12]	@ (80016d4 <stdio_exit_handler+0x14>)
 80016c6:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <stdio_exit_handler+0x18>)
 80016c8:	f000 f86c 	bl	80017a4 <_fwalk_sglue>
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	08002421 	.word	0x08002421
 80016d8:	2000001c 	.word	0x2000001c

080016dc <cleanup_stdio>:
 80016dc:	6841      	ldr	r1, [r0, #4]
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <cleanup_stdio+0x30>)
 80016e0:	b510      	push	{r4, lr}
 80016e2:	0004      	movs	r4, r0
 80016e4:	4299      	cmp	r1, r3
 80016e6:	d001      	beq.n	80016ec <cleanup_stdio+0x10>
 80016e8:	f000 fe9a 	bl	8002420 <_fflush_r>
 80016ec:	68a1      	ldr	r1, [r4, #8]
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <cleanup_stdio+0x34>)
 80016f0:	4299      	cmp	r1, r3
 80016f2:	d002      	beq.n	80016fa <cleanup_stdio+0x1e>
 80016f4:	0020      	movs	r0, r4
 80016f6:	f000 fe93 	bl	8002420 <_fflush_r>
 80016fa:	68e1      	ldr	r1, [r4, #12]
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <cleanup_stdio+0x38>)
 80016fe:	4299      	cmp	r1, r3
 8001700:	d002      	beq.n	8001708 <cleanup_stdio+0x2c>
 8001702:	0020      	movs	r0, r4
 8001704:	f000 fe8c 	bl	8002420 <_fflush_r>
 8001708:	bd10      	pop	{r4, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	20000138 	.word	0x20000138
 8001710:	200001a0 	.word	0x200001a0
 8001714:	20000208 	.word	0x20000208

08001718 <global_stdio_init.part.0>:
 8001718:	b510      	push	{r4, lr}
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <global_stdio_init.part.0+0x28>)
 800171c:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <global_stdio_init.part.0+0x2c>)
 800171e:	2104      	movs	r1, #4
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	4809      	ldr	r0, [pc, #36]	@ (8001748 <global_stdio_init.part.0+0x30>)
 8001724:	2200      	movs	r2, #0
 8001726:	f7ff ff95 	bl	8001654 <std>
 800172a:	2201      	movs	r2, #1
 800172c:	2109      	movs	r1, #9
 800172e:	4807      	ldr	r0, [pc, #28]	@ (800174c <global_stdio_init.part.0+0x34>)
 8001730:	f7ff ff90 	bl	8001654 <std>
 8001734:	2202      	movs	r2, #2
 8001736:	2112      	movs	r1, #18
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <global_stdio_init.part.0+0x38>)
 800173a:	f7ff ff8b 	bl	8001654 <std>
 800173e:	bd10      	pop	{r4, pc}
 8001740:	20000270 	.word	0x20000270
 8001744:	080016c1 	.word	0x080016c1
 8001748:	20000138 	.word	0x20000138
 800174c:	200001a0 	.word	0x200001a0
 8001750:	20000208 	.word	0x20000208

08001754 <__sfp_lock_acquire>:
 8001754:	b510      	push	{r4, lr}
 8001756:	4802      	ldr	r0, [pc, #8]	@ (8001760 <__sfp_lock_acquire+0xc>)
 8001758:	f000 fa1d 	bl	8001b96 <__retarget_lock_acquire_recursive>
 800175c:	bd10      	pop	{r4, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	20000279 	.word	0x20000279

08001764 <__sfp_lock_release>:
 8001764:	b510      	push	{r4, lr}
 8001766:	4802      	ldr	r0, [pc, #8]	@ (8001770 <__sfp_lock_release+0xc>)
 8001768:	f000 fa16 	bl	8001b98 <__retarget_lock_release_recursive>
 800176c:	bd10      	pop	{r4, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	20000279 	.word	0x20000279

08001774 <__sinit>:
 8001774:	b510      	push	{r4, lr}
 8001776:	0004      	movs	r4, r0
 8001778:	f7ff ffec 	bl	8001754 <__sfp_lock_acquire>
 800177c:	6a23      	ldr	r3, [r4, #32]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <__sinit+0x14>
 8001782:	f7ff ffef 	bl	8001764 <__sfp_lock_release>
 8001786:	bd10      	pop	{r4, pc}
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__sinit+0x28>)
 800178a:	6223      	str	r3, [r4, #32]
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__sinit+0x2c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f6      	bne.n	8001782 <__sinit+0xe>
 8001794:	f7ff ffc0 	bl	8001718 <global_stdio_init.part.0>
 8001798:	e7f3      	b.n	8001782 <__sinit+0xe>
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	080016dd 	.word	0x080016dd
 80017a0:	20000270 	.word	0x20000270

080017a4 <_fwalk_sglue>:
 80017a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017a6:	0014      	movs	r4, r2
 80017a8:	2600      	movs	r6, #0
 80017aa:	9000      	str	r0, [sp, #0]
 80017ac:	9101      	str	r1, [sp, #4]
 80017ae:	68a5      	ldr	r5, [r4, #8]
 80017b0:	6867      	ldr	r7, [r4, #4]
 80017b2:	3f01      	subs	r7, #1
 80017b4:	d504      	bpl.n	80017c0 <_fwalk_sglue+0x1c>
 80017b6:	6824      	ldr	r4, [r4, #0]
 80017b8:	2c00      	cmp	r4, #0
 80017ba:	d1f8      	bne.n	80017ae <_fwalk_sglue+0xa>
 80017bc:	0030      	movs	r0, r6
 80017be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017c0:	89ab      	ldrh	r3, [r5, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d908      	bls.n	80017d8 <_fwalk_sglue+0x34>
 80017c6:	220e      	movs	r2, #14
 80017c8:	5eab      	ldrsh	r3, [r5, r2]
 80017ca:	3301      	adds	r3, #1
 80017cc:	d004      	beq.n	80017d8 <_fwalk_sglue+0x34>
 80017ce:	0029      	movs	r1, r5
 80017d0:	9800      	ldr	r0, [sp, #0]
 80017d2:	9b01      	ldr	r3, [sp, #4]
 80017d4:	4798      	blx	r3
 80017d6:	4306      	orrs	r6, r0
 80017d8:	3568      	adds	r5, #104	@ 0x68
 80017da:	e7ea      	b.n	80017b2 <_fwalk_sglue+0xe>

080017dc <iprintf>:
 80017dc:	b40f      	push	{r0, r1, r2, r3}
 80017de:	b507      	push	{r0, r1, r2, lr}
 80017e0:	4905      	ldr	r1, [pc, #20]	@ (80017f8 <iprintf+0x1c>)
 80017e2:	ab04      	add	r3, sp, #16
 80017e4:	6808      	ldr	r0, [r1, #0]
 80017e6:	cb04      	ldmia	r3!, {r2}
 80017e8:	6881      	ldr	r1, [r0, #8]
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	f000 fafa 	bl	8001de4 <_vfiprintf_r>
 80017f0:	b003      	add	sp, #12
 80017f2:	bc08      	pop	{r3}
 80017f4:	b004      	add	sp, #16
 80017f6:	4718      	bx	r3
 80017f8:	20000018 	.word	0x20000018

080017fc <_puts_r>:
 80017fc:	6a03      	ldr	r3, [r0, #32]
 80017fe:	b570      	push	{r4, r5, r6, lr}
 8001800:	0005      	movs	r5, r0
 8001802:	000e      	movs	r6, r1
 8001804:	6884      	ldr	r4, [r0, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <_puts_r+0x12>
 800180a:	f7ff ffb3 	bl	8001774 <__sinit>
 800180e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001810:	07db      	lsls	r3, r3, #31
 8001812:	d405      	bmi.n	8001820 <_puts_r+0x24>
 8001814:	89a3      	ldrh	r3, [r4, #12]
 8001816:	059b      	lsls	r3, r3, #22
 8001818:	d402      	bmi.n	8001820 <_puts_r+0x24>
 800181a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800181c:	f000 f9bb 	bl	8001b96 <__retarget_lock_acquire_recursive>
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	071b      	lsls	r3, r3, #28
 8001824:	d502      	bpl.n	800182c <_puts_r+0x30>
 8001826:	6923      	ldr	r3, [r4, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11f      	bne.n	800186c <_puts_r+0x70>
 800182c:	0021      	movs	r1, r4
 800182e:	0028      	movs	r0, r5
 8001830:	f000 f8d2 	bl	80019d8 <__swsetup_r>
 8001834:	2800      	cmp	r0, #0
 8001836:	d019      	beq.n	800186c <_puts_r+0x70>
 8001838:	2501      	movs	r5, #1
 800183a:	426d      	negs	r5, r5
 800183c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800183e:	07db      	lsls	r3, r3, #31
 8001840:	d405      	bmi.n	800184e <_puts_r+0x52>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	059b      	lsls	r3, r3, #22
 8001846:	d402      	bmi.n	800184e <_puts_r+0x52>
 8001848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800184a:	f000 f9a5 	bl	8001b98 <__retarget_lock_release_recursive>
 800184e:	0028      	movs	r0, r5
 8001850:	bd70      	pop	{r4, r5, r6, pc}
 8001852:	3601      	adds	r6, #1
 8001854:	60a3      	str	r3, [r4, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da04      	bge.n	8001864 <_puts_r+0x68>
 800185a:	69a2      	ldr	r2, [r4, #24]
 800185c:	429a      	cmp	r2, r3
 800185e:	dc16      	bgt.n	800188e <_puts_r+0x92>
 8001860:	290a      	cmp	r1, #10
 8001862:	d014      	beq.n	800188e <_puts_r+0x92>
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	6022      	str	r2, [r4, #0]
 800186a:	7019      	strb	r1, [r3, #0]
 800186c:	68a3      	ldr	r3, [r4, #8]
 800186e:	7831      	ldrb	r1, [r6, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	2900      	cmp	r1, #0
 8001874:	d1ed      	bne.n	8001852 <_puts_r+0x56>
 8001876:	60a3      	str	r3, [r4, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	da0f      	bge.n	800189c <_puts_r+0xa0>
 800187c:	0022      	movs	r2, r4
 800187e:	0028      	movs	r0, r5
 8001880:	310a      	adds	r1, #10
 8001882:	f000 f867 	bl	8001954 <__swbuf_r>
 8001886:	3001      	adds	r0, #1
 8001888:	d0d6      	beq.n	8001838 <_puts_r+0x3c>
 800188a:	250a      	movs	r5, #10
 800188c:	e7d6      	b.n	800183c <_puts_r+0x40>
 800188e:	0022      	movs	r2, r4
 8001890:	0028      	movs	r0, r5
 8001892:	f000 f85f 	bl	8001954 <__swbuf_r>
 8001896:	3001      	adds	r0, #1
 8001898:	d1e8      	bne.n	800186c <_puts_r+0x70>
 800189a:	e7cd      	b.n	8001838 <_puts_r+0x3c>
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	6022      	str	r2, [r4, #0]
 80018a2:	220a      	movs	r2, #10
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e7f0      	b.n	800188a <_puts_r+0x8e>

080018a8 <puts>:
 80018a8:	b510      	push	{r4, lr}
 80018aa:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <puts+0x10>)
 80018ac:	0001      	movs	r1, r0
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	f7ff ffa4 	bl	80017fc <_puts_r>
 80018b4:	bd10      	pop	{r4, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	20000018 	.word	0x20000018

080018bc <__sread>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	000c      	movs	r4, r1
 80018c0:	250e      	movs	r5, #14
 80018c2:	5f49      	ldrsh	r1, [r1, r5]
 80018c4:	f000 f914 	bl	8001af0 <_read_r>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	db03      	blt.n	80018d4 <__sread+0x18>
 80018cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018ce:	181b      	adds	r3, r3, r0
 80018d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	89a3      	ldrh	r3, [r4, #12]
 80018d6:	4a02      	ldr	r2, [pc, #8]	@ (80018e0 <__sread+0x24>)
 80018d8:	4013      	ands	r3, r2
 80018da:	81a3      	strh	r3, [r4, #12]
 80018dc:	e7f9      	b.n	80018d2 <__sread+0x16>
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	ffffefff 	.word	0xffffefff

080018e4 <__swrite>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	001f      	movs	r7, r3
 80018e8:	898b      	ldrh	r3, [r1, #12]
 80018ea:	0005      	movs	r5, r0
 80018ec:	000c      	movs	r4, r1
 80018ee:	0016      	movs	r6, r2
 80018f0:	05db      	lsls	r3, r3, #23
 80018f2:	d505      	bpl.n	8001900 <__swrite+0x1c>
 80018f4:	230e      	movs	r3, #14
 80018f6:	5ec9      	ldrsh	r1, [r1, r3]
 80018f8:	2200      	movs	r2, #0
 80018fa:	2302      	movs	r3, #2
 80018fc:	f000 f8e4 	bl	8001ac8 <_lseek_r>
 8001900:	89a3      	ldrh	r3, [r4, #12]
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <__swrite+0x34>)
 8001904:	0028      	movs	r0, r5
 8001906:	4013      	ands	r3, r2
 8001908:	81a3      	strh	r3, [r4, #12]
 800190a:	0032      	movs	r2, r6
 800190c:	230e      	movs	r3, #14
 800190e:	5ee1      	ldrsh	r1, [r4, r3]
 8001910:	003b      	movs	r3, r7
 8001912:	f000 f901 	bl	8001b18 <_write_r>
 8001916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001918:	ffffefff 	.word	0xffffefff

0800191c <__sseek>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	000c      	movs	r4, r1
 8001920:	250e      	movs	r5, #14
 8001922:	5f49      	ldrsh	r1, [r1, r5]
 8001924:	f000 f8d0 	bl	8001ac8 <_lseek_r>
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	1c42      	adds	r2, r0, #1
 800192c:	d103      	bne.n	8001936 <__sseek+0x1a>
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <__sseek+0x28>)
 8001930:	4013      	ands	r3, r2
 8001932:	81a3      	strh	r3, [r4, #12]
 8001934:	bd70      	pop	{r4, r5, r6, pc}
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	0152      	lsls	r2, r2, #5
 800193a:	4313      	orrs	r3, r2
 800193c:	81a3      	strh	r3, [r4, #12]
 800193e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001940:	e7f8      	b.n	8001934 <__sseek+0x18>
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	ffffefff 	.word	0xffffefff

08001948 <__sclose>:
 8001948:	b510      	push	{r4, lr}
 800194a:	230e      	movs	r3, #14
 800194c:	5ec9      	ldrsh	r1, [r1, r3]
 800194e:	f000 f8a9 	bl	8001aa4 <_close_r>
 8001952:	bd10      	pop	{r4, pc}

08001954 <__swbuf_r>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	0006      	movs	r6, r0
 8001958:	000d      	movs	r5, r1
 800195a:	0014      	movs	r4, r2
 800195c:	2800      	cmp	r0, #0
 800195e:	d004      	beq.n	800196a <__swbuf_r+0x16>
 8001960:	6a03      	ldr	r3, [r0, #32]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <__swbuf_r+0x16>
 8001966:	f7ff ff05 	bl	8001774 <__sinit>
 800196a:	69a3      	ldr	r3, [r4, #24]
 800196c:	60a3      	str	r3, [r4, #8]
 800196e:	89a3      	ldrh	r3, [r4, #12]
 8001970:	071b      	lsls	r3, r3, #28
 8001972:	d502      	bpl.n	800197a <__swbuf_r+0x26>
 8001974:	6923      	ldr	r3, [r4, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <__swbuf_r+0x3a>
 800197a:	0021      	movs	r1, r4
 800197c:	0030      	movs	r0, r6
 800197e:	f000 f82b 	bl	80019d8 <__swsetup_r>
 8001982:	2800      	cmp	r0, #0
 8001984:	d003      	beq.n	800198e <__swbuf_r+0x3a>
 8001986:	2501      	movs	r5, #1
 8001988:	426d      	negs	r5, r5
 800198a:	0028      	movs	r0, r5
 800198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800198e:	6923      	ldr	r3, [r4, #16]
 8001990:	6820      	ldr	r0, [r4, #0]
 8001992:	b2ef      	uxtb	r7, r5
 8001994:	1ac0      	subs	r0, r0, r3
 8001996:	6963      	ldr	r3, [r4, #20]
 8001998:	b2ed      	uxtb	r5, r5
 800199a:	4283      	cmp	r3, r0
 800199c:	dc05      	bgt.n	80019aa <__swbuf_r+0x56>
 800199e:	0021      	movs	r1, r4
 80019a0:	0030      	movs	r0, r6
 80019a2:	f000 fd3d 	bl	8002420 <_fflush_r>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d1ed      	bne.n	8001986 <__swbuf_r+0x32>
 80019aa:	68a3      	ldr	r3, [r4, #8]
 80019ac:	3001      	adds	r0, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	60a3      	str	r3, [r4, #8]
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	6022      	str	r2, [r4, #0]
 80019b8:	701f      	strb	r7, [r3, #0]
 80019ba:	6963      	ldr	r3, [r4, #20]
 80019bc:	4283      	cmp	r3, r0
 80019be:	d004      	beq.n	80019ca <__swbuf_r+0x76>
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	07db      	lsls	r3, r3, #31
 80019c4:	d5e1      	bpl.n	800198a <__swbuf_r+0x36>
 80019c6:	2d0a      	cmp	r5, #10
 80019c8:	d1df      	bne.n	800198a <__swbuf_r+0x36>
 80019ca:	0021      	movs	r1, r4
 80019cc:	0030      	movs	r0, r6
 80019ce:	f000 fd27 	bl	8002420 <_fflush_r>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d0d9      	beq.n	800198a <__swbuf_r+0x36>
 80019d6:	e7d6      	b.n	8001986 <__swbuf_r+0x32>

080019d8 <__swsetup_r>:
 80019d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <__swsetup_r+0xb8>)
 80019da:	b570      	push	{r4, r5, r6, lr}
 80019dc:	0005      	movs	r5, r0
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	000c      	movs	r4, r1
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d004      	beq.n	80019f0 <__swsetup_r+0x18>
 80019e6:	6a03      	ldr	r3, [r0, #32]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <__swsetup_r+0x18>
 80019ec:	f7ff fec2 	bl	8001774 <__sinit>
 80019f0:	220c      	movs	r2, #12
 80019f2:	5ea3      	ldrsh	r3, [r4, r2]
 80019f4:	071a      	lsls	r2, r3, #28
 80019f6:	d423      	bmi.n	8001a40 <__swsetup_r+0x68>
 80019f8:	06da      	lsls	r2, r3, #27
 80019fa:	d407      	bmi.n	8001a0c <__swsetup_r+0x34>
 80019fc:	2209      	movs	r2, #9
 80019fe:	602a      	str	r2, [r5, #0]
 8001a00:	2240      	movs	r2, #64	@ 0x40
 8001a02:	2001      	movs	r0, #1
 8001a04:	4313      	orrs	r3, r2
 8001a06:	81a3      	strh	r3, [r4, #12]
 8001a08:	4240      	negs	r0, r0
 8001a0a:	e03a      	b.n	8001a82 <__swsetup_r+0xaa>
 8001a0c:	075b      	lsls	r3, r3, #29
 8001a0e:	d513      	bpl.n	8001a38 <__swsetup_r+0x60>
 8001a10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a12:	2900      	cmp	r1, #0
 8001a14:	d008      	beq.n	8001a28 <__swsetup_r+0x50>
 8001a16:	0023      	movs	r3, r4
 8001a18:	3344      	adds	r3, #68	@ 0x44
 8001a1a:	4299      	cmp	r1, r3
 8001a1c:	d002      	beq.n	8001a24 <__swsetup_r+0x4c>
 8001a1e:	0028      	movs	r0, r5
 8001a20:	f000 f8bc 	bl	8001b9c <_free_r>
 8001a24:	2300      	movs	r3, #0
 8001a26:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a28:	2224      	movs	r2, #36	@ 0x24
 8001a2a:	89a3      	ldrh	r3, [r4, #12]
 8001a2c:	4393      	bics	r3, r2
 8001a2e:	81a3      	strh	r3, [r4, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	6063      	str	r3, [r4, #4]
 8001a34:	6923      	ldr	r3, [r4, #16]
 8001a36:	6023      	str	r3, [r4, #0]
 8001a38:	2308      	movs	r3, #8
 8001a3a:	89a2      	ldrh	r2, [r4, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	81a3      	strh	r3, [r4, #12]
 8001a40:	6923      	ldr	r3, [r4, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10b      	bne.n	8001a5e <__swsetup_r+0x86>
 8001a46:	21a0      	movs	r1, #160	@ 0xa0
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	0089      	lsls	r1, r1, #2
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	400b      	ands	r3, r1
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d003      	beq.n	8001a5e <__swsetup_r+0x86>
 8001a56:	0021      	movs	r1, r4
 8001a58:	0028      	movs	r0, r5
 8001a5a:	f000 fd37 	bl	80024cc <__smakebuf_r>
 8001a5e:	220c      	movs	r2, #12
 8001a60:	5ea3      	ldrsh	r3, [r4, r2]
 8001a62:	2101      	movs	r1, #1
 8001a64:	001a      	movs	r2, r3
 8001a66:	400a      	ands	r2, r1
 8001a68:	420b      	tst	r3, r1
 8001a6a:	d00b      	beq.n	8001a84 <__swsetup_r+0xac>
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60a2      	str	r2, [r4, #8]
 8001a70:	6962      	ldr	r2, [r4, #20]
 8001a72:	4252      	negs	r2, r2
 8001a74:	61a2      	str	r2, [r4, #24]
 8001a76:	2000      	movs	r0, #0
 8001a78:	6922      	ldr	r2, [r4, #16]
 8001a7a:	4282      	cmp	r2, r0
 8001a7c:	d101      	bne.n	8001a82 <__swsetup_r+0xaa>
 8001a7e:	061a      	lsls	r2, r3, #24
 8001a80:	d4be      	bmi.n	8001a00 <__swsetup_r+0x28>
 8001a82:	bd70      	pop	{r4, r5, r6, pc}
 8001a84:	0799      	lsls	r1, r3, #30
 8001a86:	d400      	bmi.n	8001a8a <__swsetup_r+0xb2>
 8001a88:	6962      	ldr	r2, [r4, #20]
 8001a8a:	60a2      	str	r2, [r4, #8]
 8001a8c:	e7f3      	b.n	8001a76 <__swsetup_r+0x9e>
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	20000018 	.word	0x20000018

08001a94 <memset>:
 8001a94:	0003      	movs	r3, r0
 8001a96:	1882      	adds	r2, r0, r2
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <memset+0xa>
 8001a9c:	4770      	bx	lr
 8001a9e:	7019      	strb	r1, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	e7f9      	b.n	8001a98 <memset+0x4>

08001aa4 <_close_r>:
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	b570      	push	{r4, r5, r6, lr}
 8001aa8:	4d06      	ldr	r5, [pc, #24]	@ (8001ac4 <_close_r+0x20>)
 8001aaa:	0004      	movs	r4, r0
 8001aac:	0008      	movs	r0, r1
 8001aae:	602b      	str	r3, [r5, #0]
 8001ab0:	f7fe fd5b 	bl	800056a <_close>
 8001ab4:	1c43      	adds	r3, r0, #1
 8001ab6:	d103      	bne.n	8001ac0 <_close_r+0x1c>
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d000      	beq.n	8001ac0 <_close_r+0x1c>
 8001abe:	6023      	str	r3, [r4, #0]
 8001ac0:	bd70      	pop	{r4, r5, r6, pc}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	20000274 	.word	0x20000274

08001ac8 <_lseek_r>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	0004      	movs	r4, r0
 8001acc:	0008      	movs	r0, r1
 8001ace:	0011      	movs	r1, r2
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	4d05      	ldr	r5, [pc, #20]	@ (8001aec <_lseek_r+0x24>)
 8001ad6:	602b      	str	r3, [r5, #0]
 8001ad8:	f7fe fd51 	bl	800057e <_lseek>
 8001adc:	1c43      	adds	r3, r0, #1
 8001ade:	d103      	bne.n	8001ae8 <_lseek_r+0x20>
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d000      	beq.n	8001ae8 <_lseek_r+0x20>
 8001ae6:	6023      	str	r3, [r4, #0]
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	20000274 	.word	0x20000274

08001af0 <_read_r>:
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	0004      	movs	r4, r0
 8001af4:	0008      	movs	r0, r1
 8001af6:	0011      	movs	r1, r2
 8001af8:	001a      	movs	r2, r3
 8001afa:	2300      	movs	r3, #0
 8001afc:	4d05      	ldr	r5, [pc, #20]	@ (8001b14 <_read_r+0x24>)
 8001afe:	602b      	str	r3, [r5, #0]
 8001b00:	f7fe fd26 	bl	8000550 <_read>
 8001b04:	1c43      	adds	r3, r0, #1
 8001b06:	d103      	bne.n	8001b10 <_read_r+0x20>
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d000      	beq.n	8001b10 <_read_r+0x20>
 8001b0e:	6023      	str	r3, [r4, #0]
 8001b10:	bd70      	pop	{r4, r5, r6, pc}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	20000274 	.word	0x20000274

08001b18 <_write_r>:
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	0004      	movs	r4, r0
 8001b1c:	0008      	movs	r0, r1
 8001b1e:	0011      	movs	r1, r2
 8001b20:	001a      	movs	r2, r3
 8001b22:	2300      	movs	r3, #0
 8001b24:	4d05      	ldr	r5, [pc, #20]	@ (8001b3c <_write_r+0x24>)
 8001b26:	602b      	str	r3, [r5, #0]
 8001b28:	f7fe fbec 	bl	8000304 <_write>
 8001b2c:	1c43      	adds	r3, r0, #1
 8001b2e:	d103      	bne.n	8001b38 <_write_r+0x20>
 8001b30:	682b      	ldr	r3, [r5, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d000      	beq.n	8001b38 <_write_r+0x20>
 8001b36:	6023      	str	r3, [r4, #0]
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	20000274 	.word	0x20000274

08001b40 <__errno>:
 8001b40:	4b01      	ldr	r3, [pc, #4]	@ (8001b48 <__errno+0x8>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	4770      	bx	lr
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	20000018 	.word	0x20000018

08001b4c <__libc_init_array>:
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	2600      	movs	r6, #0
 8001b50:	4c0c      	ldr	r4, [pc, #48]	@ (8001b84 <__libc_init_array+0x38>)
 8001b52:	4d0d      	ldr	r5, [pc, #52]	@ (8001b88 <__libc_init_array+0x3c>)
 8001b54:	1b64      	subs	r4, r4, r5
 8001b56:	10a4      	asrs	r4, r4, #2
 8001b58:	42a6      	cmp	r6, r4
 8001b5a:	d109      	bne.n	8001b70 <__libc_init_array+0x24>
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	f000 fd39 	bl	80025d4 <_init>
 8001b62:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <__libc_init_array+0x40>)
 8001b64:	4d0a      	ldr	r5, [pc, #40]	@ (8001b90 <__libc_init_array+0x44>)
 8001b66:	1b64      	subs	r4, r4, r5
 8001b68:	10a4      	asrs	r4, r4, #2
 8001b6a:	42a6      	cmp	r6, r4
 8001b6c:	d105      	bne.n	8001b7a <__libc_init_array+0x2e>
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
 8001b70:	00b3      	lsls	r3, r6, #2
 8001b72:	58eb      	ldr	r3, [r5, r3]
 8001b74:	4798      	blx	r3
 8001b76:	3601      	adds	r6, #1
 8001b78:	e7ee      	b.n	8001b58 <__libc_init_array+0xc>
 8001b7a:	00b3      	lsls	r3, r6, #2
 8001b7c:	58eb      	ldr	r3, [r5, r3]
 8001b7e:	4798      	blx	r3
 8001b80:	3601      	adds	r6, #1
 8001b82:	e7f2      	b.n	8001b6a <__libc_init_array+0x1e>
 8001b84:	080026c4 	.word	0x080026c4
 8001b88:	080026c4 	.word	0x080026c4
 8001b8c:	080026c8 	.word	0x080026c8
 8001b90:	080026c4 	.word	0x080026c4

08001b94 <__retarget_lock_init_recursive>:
 8001b94:	4770      	bx	lr

08001b96 <__retarget_lock_acquire_recursive>:
 8001b96:	4770      	bx	lr

08001b98 <__retarget_lock_release_recursive>:
 8001b98:	4770      	bx	lr
	...

08001b9c <_free_r>:
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	0005      	movs	r5, r0
 8001ba0:	1e0c      	subs	r4, r1, #0
 8001ba2:	d010      	beq.n	8001bc6 <_free_r+0x2a>
 8001ba4:	3c04      	subs	r4, #4
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da00      	bge.n	8001bae <_free_r+0x12>
 8001bac:	18e4      	adds	r4, r4, r3
 8001bae:	0028      	movs	r0, r5
 8001bb0:	f000 f8e0 	bl	8001d74 <__malloc_lock>
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <_free_r+0x90>)
 8001bb6:	6813      	ldr	r3, [r2, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <_free_r+0x2c>
 8001bbc:	6063      	str	r3, [r4, #4]
 8001bbe:	6014      	str	r4, [r2, #0]
 8001bc0:	0028      	movs	r0, r5
 8001bc2:	f000 f8df 	bl	8001d84 <__malloc_unlock>
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}
 8001bc8:	42a3      	cmp	r3, r4
 8001bca:	d908      	bls.n	8001bde <_free_r+0x42>
 8001bcc:	6820      	ldr	r0, [r4, #0]
 8001bce:	1821      	adds	r1, r4, r0
 8001bd0:	428b      	cmp	r3, r1
 8001bd2:	d1f3      	bne.n	8001bbc <_free_r+0x20>
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	1809      	adds	r1, r1, r0
 8001bda:	6021      	str	r1, [r4, #0]
 8001bdc:	e7ee      	b.n	8001bbc <_free_r+0x20>
 8001bde:	001a      	movs	r2, r3
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <_free_r+0x4e>
 8001be6:	42a3      	cmp	r3, r4
 8001be8:	d9f9      	bls.n	8001bde <_free_r+0x42>
 8001bea:	6811      	ldr	r1, [r2, #0]
 8001bec:	1850      	adds	r0, r2, r1
 8001bee:	42a0      	cmp	r0, r4
 8001bf0:	d10b      	bne.n	8001c0a <_free_r+0x6e>
 8001bf2:	6820      	ldr	r0, [r4, #0]
 8001bf4:	1809      	adds	r1, r1, r0
 8001bf6:	1850      	adds	r0, r2, r1
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	4283      	cmp	r3, r0
 8001bfc:	d1e0      	bne.n	8001bc0 <_free_r+0x24>
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	1841      	adds	r1, r0, r1
 8001c04:	6011      	str	r1, [r2, #0]
 8001c06:	6053      	str	r3, [r2, #4]
 8001c08:	e7da      	b.n	8001bc0 <_free_r+0x24>
 8001c0a:	42a0      	cmp	r0, r4
 8001c0c:	d902      	bls.n	8001c14 <_free_r+0x78>
 8001c0e:	230c      	movs	r3, #12
 8001c10:	602b      	str	r3, [r5, #0]
 8001c12:	e7d5      	b.n	8001bc0 <_free_r+0x24>
 8001c14:	6820      	ldr	r0, [r4, #0]
 8001c16:	1821      	adds	r1, r4, r0
 8001c18:	428b      	cmp	r3, r1
 8001c1a:	d103      	bne.n	8001c24 <_free_r+0x88>
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	1809      	adds	r1, r1, r0
 8001c22:	6021      	str	r1, [r4, #0]
 8001c24:	6063      	str	r3, [r4, #4]
 8001c26:	6054      	str	r4, [r2, #4]
 8001c28:	e7ca      	b.n	8001bc0 <_free_r+0x24>
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	20000280 	.word	0x20000280

08001c30 <sbrk_aligned>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	4e0f      	ldr	r6, [pc, #60]	@ (8001c70 <sbrk_aligned+0x40>)
 8001c34:	000d      	movs	r5, r1
 8001c36:	6831      	ldr	r1, [r6, #0]
 8001c38:	0004      	movs	r4, r0
 8001c3a:	2900      	cmp	r1, #0
 8001c3c:	d102      	bne.n	8001c44 <sbrk_aligned+0x14>
 8001c3e:	f000 fcab 	bl	8002598 <_sbrk_r>
 8001c42:	6030      	str	r0, [r6, #0]
 8001c44:	0029      	movs	r1, r5
 8001c46:	0020      	movs	r0, r4
 8001c48:	f000 fca6 	bl	8002598 <_sbrk_r>
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	d103      	bne.n	8001c58 <sbrk_aligned+0x28>
 8001c50:	2501      	movs	r5, #1
 8001c52:	426d      	negs	r5, r5
 8001c54:	0028      	movs	r0, r5
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	2303      	movs	r3, #3
 8001c5a:	1cc5      	adds	r5, r0, #3
 8001c5c:	439d      	bics	r5, r3
 8001c5e:	42a8      	cmp	r0, r5
 8001c60:	d0f8      	beq.n	8001c54 <sbrk_aligned+0x24>
 8001c62:	1a29      	subs	r1, r5, r0
 8001c64:	0020      	movs	r0, r4
 8001c66:	f000 fc97 	bl	8002598 <_sbrk_r>
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	d1f2      	bne.n	8001c54 <sbrk_aligned+0x24>
 8001c6e:	e7ef      	b.n	8001c50 <sbrk_aligned+0x20>
 8001c70:	2000027c 	.word	0x2000027c

08001c74 <_malloc_r>:
 8001c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c76:	2203      	movs	r2, #3
 8001c78:	1ccb      	adds	r3, r1, #3
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	3308      	adds	r3, #8
 8001c7e:	0005      	movs	r5, r0
 8001c80:	001f      	movs	r7, r3
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d234      	bcs.n	8001cf0 <_malloc_r+0x7c>
 8001c86:	270c      	movs	r7, #12
 8001c88:	42b9      	cmp	r1, r7
 8001c8a:	d833      	bhi.n	8001cf4 <_malloc_r+0x80>
 8001c8c:	0028      	movs	r0, r5
 8001c8e:	f000 f871 	bl	8001d74 <__malloc_lock>
 8001c92:	4e37      	ldr	r6, [pc, #220]	@ (8001d70 <_malloc_r+0xfc>)
 8001c94:	6833      	ldr	r3, [r6, #0]
 8001c96:	001c      	movs	r4, r3
 8001c98:	2c00      	cmp	r4, #0
 8001c9a:	d12f      	bne.n	8001cfc <_malloc_r+0x88>
 8001c9c:	0039      	movs	r1, r7
 8001c9e:	0028      	movs	r0, r5
 8001ca0:	f7ff ffc6 	bl	8001c30 <sbrk_aligned>
 8001ca4:	0004      	movs	r4, r0
 8001ca6:	1c43      	adds	r3, r0, #1
 8001ca8:	d15f      	bne.n	8001d6a <_malloc_r+0xf6>
 8001caa:	6834      	ldr	r4, [r6, #0]
 8001cac:	9400      	str	r4, [sp, #0]
 8001cae:	9b00      	ldr	r3, [sp, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d14a      	bne.n	8001d4a <_malloc_r+0xd6>
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	d052      	beq.n	8001d5e <_malloc_r+0xea>
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	0028      	movs	r0, r5
 8001cbc:	18e3      	adds	r3, r4, r3
 8001cbe:	9900      	ldr	r1, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	f000 fc69 	bl	8002598 <_sbrk_r>
 8001cc6:	9b01      	ldr	r3, [sp, #4]
 8001cc8:	4283      	cmp	r3, r0
 8001cca:	d148      	bne.n	8001d5e <_malloc_r+0xea>
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	0028      	movs	r0, r5
 8001cd0:	1aff      	subs	r7, r7, r3
 8001cd2:	0039      	movs	r1, r7
 8001cd4:	f7ff ffac 	bl	8001c30 <sbrk_aligned>
 8001cd8:	3001      	adds	r0, #1
 8001cda:	d040      	beq.n	8001d5e <_malloc_r+0xea>
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	19db      	adds	r3, r3, r7
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	6833      	ldr	r3, [r6, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d133      	bne.n	8001d52 <_malloc_r+0xde>
 8001cea:	9b00      	ldr	r3, [sp, #0]
 8001cec:	6033      	str	r3, [r6, #0]
 8001cee:	e019      	b.n	8001d24 <_malloc_r+0xb0>
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dac9      	bge.n	8001c88 <_malloc_r+0x14>
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	602b      	str	r3, [r5, #0]
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001cfc:	6821      	ldr	r1, [r4, #0]
 8001cfe:	1bc9      	subs	r1, r1, r7
 8001d00:	d420      	bmi.n	8001d44 <_malloc_r+0xd0>
 8001d02:	290b      	cmp	r1, #11
 8001d04:	d90a      	bls.n	8001d1c <_malloc_r+0xa8>
 8001d06:	19e2      	adds	r2, r4, r7
 8001d08:	6027      	str	r7, [r4, #0]
 8001d0a:	42a3      	cmp	r3, r4
 8001d0c:	d104      	bne.n	8001d18 <_malloc_r+0xa4>
 8001d0e:	6032      	str	r2, [r6, #0]
 8001d10:	6863      	ldr	r3, [r4, #4]
 8001d12:	6011      	str	r1, [r2, #0]
 8001d14:	6053      	str	r3, [r2, #4]
 8001d16:	e005      	b.n	8001d24 <_malloc_r+0xb0>
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e7f9      	b.n	8001d10 <_malloc_r+0x9c>
 8001d1c:	6862      	ldr	r2, [r4, #4]
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	d10e      	bne.n	8001d40 <_malloc_r+0xcc>
 8001d22:	6032      	str	r2, [r6, #0]
 8001d24:	0028      	movs	r0, r5
 8001d26:	f000 f82d 	bl	8001d84 <__malloc_unlock>
 8001d2a:	0020      	movs	r0, r4
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	300b      	adds	r0, #11
 8001d30:	1d23      	adds	r3, r4, #4
 8001d32:	4390      	bics	r0, r2
 8001d34:	1ac2      	subs	r2, r0, r3
 8001d36:	4298      	cmp	r0, r3
 8001d38:	d0df      	beq.n	8001cfa <_malloc_r+0x86>
 8001d3a:	1a1b      	subs	r3, r3, r0
 8001d3c:	50a3      	str	r3, [r4, r2]
 8001d3e:	e7dc      	b.n	8001cfa <_malloc_r+0x86>
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	e7ef      	b.n	8001d24 <_malloc_r+0xb0>
 8001d44:	0023      	movs	r3, r4
 8001d46:	6864      	ldr	r4, [r4, #4]
 8001d48:	e7a6      	b.n	8001c98 <_malloc_r+0x24>
 8001d4a:	9c00      	ldr	r4, [sp, #0]
 8001d4c:	6863      	ldr	r3, [r4, #4]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	e7ad      	b.n	8001cae <_malloc_r+0x3a>
 8001d52:	001a      	movs	r2, r3
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	42a3      	cmp	r3, r4
 8001d58:	d1fb      	bne.n	8001d52 <_malloc_r+0xde>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e7da      	b.n	8001d14 <_malloc_r+0xa0>
 8001d5e:	230c      	movs	r3, #12
 8001d60:	0028      	movs	r0, r5
 8001d62:	602b      	str	r3, [r5, #0]
 8001d64:	f000 f80e 	bl	8001d84 <__malloc_unlock>
 8001d68:	e7c6      	b.n	8001cf8 <_malloc_r+0x84>
 8001d6a:	6007      	str	r7, [r0, #0]
 8001d6c:	e7da      	b.n	8001d24 <_malloc_r+0xb0>
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	20000280 	.word	0x20000280

08001d74 <__malloc_lock>:
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <__malloc_lock+0xc>)
 8001d78:	f7ff ff0d 	bl	8001b96 <__retarget_lock_acquire_recursive>
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	20000278 	.word	0x20000278

08001d84 <__malloc_unlock>:
 8001d84:	b510      	push	{r4, lr}
 8001d86:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <__malloc_unlock+0xc>)
 8001d88:	f7ff ff06 	bl	8001b98 <__retarget_lock_release_recursive>
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	20000278 	.word	0x20000278

08001d94 <__sfputc_r>:
 8001d94:	6893      	ldr	r3, [r2, #8]
 8001d96:	b510      	push	{r4, lr}
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	6093      	str	r3, [r2, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da04      	bge.n	8001daa <__sfputc_r+0x16>
 8001da0:	6994      	ldr	r4, [r2, #24]
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	db07      	blt.n	8001db6 <__sfputc_r+0x22>
 8001da6:	290a      	cmp	r1, #10
 8001da8:	d005      	beq.n	8001db6 <__sfputc_r+0x22>
 8001daa:	6813      	ldr	r3, [r2, #0]
 8001dac:	1c58      	adds	r0, r3, #1
 8001dae:	6010      	str	r0, [r2, #0]
 8001db0:	7019      	strb	r1, [r3, #0]
 8001db2:	0008      	movs	r0, r1
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	f7ff fdcd 	bl	8001954 <__swbuf_r>
 8001dba:	0001      	movs	r1, r0
 8001dbc:	e7f9      	b.n	8001db2 <__sfputc_r+0x1e>

08001dbe <__sfputs_r>:
 8001dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc0:	0006      	movs	r6, r0
 8001dc2:	000f      	movs	r7, r1
 8001dc4:	0014      	movs	r4, r2
 8001dc6:	18d5      	adds	r5, r2, r3
 8001dc8:	42ac      	cmp	r4, r5
 8001dca:	d101      	bne.n	8001dd0 <__sfputs_r+0x12>
 8001dcc:	2000      	movs	r0, #0
 8001dce:	e007      	b.n	8001de0 <__sfputs_r+0x22>
 8001dd0:	7821      	ldrb	r1, [r4, #0]
 8001dd2:	003a      	movs	r2, r7
 8001dd4:	0030      	movs	r0, r6
 8001dd6:	f7ff ffdd 	bl	8001d94 <__sfputc_r>
 8001dda:	3401      	adds	r4, #1
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d1f3      	bne.n	8001dc8 <__sfputs_r+0xa>
 8001de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001de4 <_vfiprintf_r>:
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	b0a1      	sub	sp, #132	@ 0x84
 8001de8:	000f      	movs	r7, r1
 8001dea:	0015      	movs	r5, r2
 8001dec:	001e      	movs	r6, r3
 8001dee:	9003      	str	r0, [sp, #12]
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d004      	beq.n	8001dfe <_vfiprintf_r+0x1a>
 8001df4:	6a03      	ldr	r3, [r0, #32]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <_vfiprintf_r+0x1a>
 8001dfa:	f7ff fcbb 	bl	8001774 <__sinit>
 8001dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e00:	07db      	lsls	r3, r3, #31
 8001e02:	d405      	bmi.n	8001e10 <_vfiprintf_r+0x2c>
 8001e04:	89bb      	ldrh	r3, [r7, #12]
 8001e06:	059b      	lsls	r3, r3, #22
 8001e08:	d402      	bmi.n	8001e10 <_vfiprintf_r+0x2c>
 8001e0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001e0c:	f7ff fec3 	bl	8001b96 <__retarget_lock_acquire_recursive>
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	071b      	lsls	r3, r3, #28
 8001e14:	d502      	bpl.n	8001e1c <_vfiprintf_r+0x38>
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d113      	bne.n	8001e44 <_vfiprintf_r+0x60>
 8001e1c:	0039      	movs	r1, r7
 8001e1e:	9803      	ldr	r0, [sp, #12]
 8001e20:	f7ff fdda 	bl	80019d8 <__swsetup_r>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d00d      	beq.n	8001e44 <_vfiprintf_r+0x60>
 8001e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e2a:	07db      	lsls	r3, r3, #31
 8001e2c:	d503      	bpl.n	8001e36 <_vfiprintf_r+0x52>
 8001e2e:	2001      	movs	r0, #1
 8001e30:	4240      	negs	r0, r0
 8001e32:	b021      	add	sp, #132	@ 0x84
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e36:	89bb      	ldrh	r3, [r7, #12]
 8001e38:	059b      	lsls	r3, r3, #22
 8001e3a:	d4f8      	bmi.n	8001e2e <_vfiprintf_r+0x4a>
 8001e3c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001e3e:	f7ff feab 	bl	8001b98 <__retarget_lock_release_recursive>
 8001e42:	e7f4      	b.n	8001e2e <_vfiprintf_r+0x4a>
 8001e44:	2300      	movs	r3, #0
 8001e46:	ac08      	add	r4, sp, #32
 8001e48:	6163      	str	r3, [r4, #20]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	7663      	strb	r3, [r4, #25]
 8001e4e:	3310      	adds	r3, #16
 8001e50:	76a3      	strb	r3, [r4, #26]
 8001e52:	9607      	str	r6, [sp, #28]
 8001e54:	002e      	movs	r6, r5
 8001e56:	7833      	ldrb	r3, [r6, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <_vfiprintf_r+0x7c>
 8001e5c:	2b25      	cmp	r3, #37	@ 0x25
 8001e5e:	d148      	bne.n	8001ef2 <_vfiprintf_r+0x10e>
 8001e60:	1b73      	subs	r3, r6, r5
 8001e62:	9305      	str	r3, [sp, #20]
 8001e64:	42ae      	cmp	r6, r5
 8001e66:	d00b      	beq.n	8001e80 <_vfiprintf_r+0x9c>
 8001e68:	002a      	movs	r2, r5
 8001e6a:	0039      	movs	r1, r7
 8001e6c:	9803      	ldr	r0, [sp, #12]
 8001e6e:	f7ff ffa6 	bl	8001dbe <__sfputs_r>
 8001e72:	3001      	adds	r0, #1
 8001e74:	d100      	bne.n	8001e78 <_vfiprintf_r+0x94>
 8001e76:	e0ae      	b.n	8001fd6 <_vfiprintf_r+0x1f2>
 8001e78:	6963      	ldr	r3, [r4, #20]
 8001e7a:	9a05      	ldr	r2, [sp, #20]
 8001e7c:	189b      	adds	r3, r3, r2
 8001e7e:	6163      	str	r3, [r4, #20]
 8001e80:	7833      	ldrb	r3, [r6, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d100      	bne.n	8001e88 <_vfiprintf_r+0xa4>
 8001e86:	e0a6      	b.n	8001fd6 <_vfiprintf_r+0x1f2>
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	6062      	str	r2, [r4, #4]
 8001e90:	a904      	add	r1, sp, #16
 8001e92:	3254      	adds	r2, #84	@ 0x54
 8001e94:	1852      	adds	r2, r2, r1
 8001e96:	1c75      	adds	r5, r6, #1
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	60e3      	str	r3, [r4, #12]
 8001e9c:	60a3      	str	r3, [r4, #8]
 8001e9e:	7013      	strb	r3, [r2, #0]
 8001ea0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ea2:	4b59      	ldr	r3, [pc, #356]	@ (8002008 <_vfiprintf_r+0x224>)
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	7829      	ldrb	r1, [r5, #0]
 8001eaa:	9305      	str	r3, [sp, #20]
 8001eac:	f000 fb86 	bl	80025bc <memchr>
 8001eb0:	1c6e      	adds	r6, r5, #1
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d11f      	bne.n	8001ef6 <_vfiprintf_r+0x112>
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	06d3      	lsls	r3, r2, #27
 8001eba:	d504      	bpl.n	8001ec6 <_vfiprintf_r+0xe2>
 8001ebc:	2353      	movs	r3, #83	@ 0x53
 8001ebe:	a904      	add	r1, sp, #16
 8001ec0:	185b      	adds	r3, r3, r1
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	7019      	strb	r1, [r3, #0]
 8001ec6:	0713      	lsls	r3, r2, #28
 8001ec8:	d504      	bpl.n	8001ed4 <_vfiprintf_r+0xf0>
 8001eca:	2353      	movs	r3, #83	@ 0x53
 8001ecc:	a904      	add	r1, sp, #16
 8001ece:	185b      	adds	r3, r3, r1
 8001ed0:	212b      	movs	r1, #43	@ 0x2b
 8001ed2:	7019      	strb	r1, [r3, #0]
 8001ed4:	782b      	ldrb	r3, [r5, #0]
 8001ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ed8:	d016      	beq.n	8001f08 <_vfiprintf_r+0x124>
 8001eda:	002e      	movs	r6, r5
 8001edc:	2100      	movs	r1, #0
 8001ede:	200a      	movs	r0, #10
 8001ee0:	68e3      	ldr	r3, [r4, #12]
 8001ee2:	7832      	ldrb	r2, [r6, #0]
 8001ee4:	1c75      	adds	r5, r6, #1
 8001ee6:	3a30      	subs	r2, #48	@ 0x30
 8001ee8:	2a09      	cmp	r2, #9
 8001eea:	d950      	bls.n	8001f8e <_vfiprintf_r+0x1aa>
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d111      	bne.n	8001f14 <_vfiprintf_r+0x130>
 8001ef0:	e017      	b.n	8001f22 <_vfiprintf_r+0x13e>
 8001ef2:	3601      	adds	r6, #1
 8001ef4:	e7af      	b.n	8001e56 <_vfiprintf_r+0x72>
 8001ef6:	9b05      	ldr	r3, [sp, #20]
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	1ac0      	subs	r0, r0, r3
 8001efc:	2301      	movs	r3, #1
 8001efe:	4083      	lsls	r3, r0
 8001f00:	4313      	orrs	r3, r2
 8001f02:	0035      	movs	r5, r6
 8001f04:	6023      	str	r3, [r4, #0]
 8001f06:	e7cc      	b.n	8001ea2 <_vfiprintf_r+0xbe>
 8001f08:	9b07      	ldr	r3, [sp, #28]
 8001f0a:	1d19      	adds	r1, r3, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	9107      	str	r1, [sp, #28]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db01      	blt.n	8001f18 <_vfiprintf_r+0x134>
 8001f14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001f16:	e004      	b.n	8001f22 <_vfiprintf_r+0x13e>
 8001f18:	425b      	negs	r3, r3
 8001f1a:	60e3      	str	r3, [r4, #12]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	6023      	str	r3, [r4, #0]
 8001f22:	7833      	ldrb	r3, [r6, #0]
 8001f24:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f26:	d10c      	bne.n	8001f42 <_vfiprintf_r+0x15e>
 8001f28:	7873      	ldrb	r3, [r6, #1]
 8001f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f2c:	d134      	bne.n	8001f98 <_vfiprintf_r+0x1b4>
 8001f2e:	9b07      	ldr	r3, [sp, #28]
 8001f30:	3602      	adds	r6, #2
 8001f32:	1d1a      	adds	r2, r3, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	9207      	str	r2, [sp, #28]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	da01      	bge.n	8001f40 <_vfiprintf_r+0x15c>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	425b      	negs	r3, r3
 8001f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f42:	4d32      	ldr	r5, [pc, #200]	@ (800200c <_vfiprintf_r+0x228>)
 8001f44:	2203      	movs	r2, #3
 8001f46:	0028      	movs	r0, r5
 8001f48:	7831      	ldrb	r1, [r6, #0]
 8001f4a:	f000 fb37 	bl	80025bc <memchr>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d006      	beq.n	8001f60 <_vfiprintf_r+0x17c>
 8001f52:	2340      	movs	r3, #64	@ 0x40
 8001f54:	1b40      	subs	r0, r0, r5
 8001f56:	4083      	lsls	r3, r0
 8001f58:	6822      	ldr	r2, [r4, #0]
 8001f5a:	3601      	adds	r6, #1
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	6023      	str	r3, [r4, #0]
 8001f60:	7831      	ldrb	r1, [r6, #0]
 8001f62:	2206      	movs	r2, #6
 8001f64:	482a      	ldr	r0, [pc, #168]	@ (8002010 <_vfiprintf_r+0x22c>)
 8001f66:	1c75      	adds	r5, r6, #1
 8001f68:	7621      	strb	r1, [r4, #24]
 8001f6a:	f000 fb27 	bl	80025bc <memchr>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d040      	beq.n	8001ff4 <_vfiprintf_r+0x210>
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <_vfiprintf_r+0x230>)
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d122      	bne.n	8001fbe <_vfiprintf_r+0x1da>
 8001f78:	2207      	movs	r2, #7
 8001f7a:	9b07      	ldr	r3, [sp, #28]
 8001f7c:	3307      	adds	r3, #7
 8001f7e:	4393      	bics	r3, r2
 8001f80:	3308      	adds	r3, #8
 8001f82:	9307      	str	r3, [sp, #28]
 8001f84:	6963      	ldr	r3, [r4, #20]
 8001f86:	9a04      	ldr	r2, [sp, #16]
 8001f88:	189b      	adds	r3, r3, r2
 8001f8a:	6163      	str	r3, [r4, #20]
 8001f8c:	e762      	b.n	8001e54 <_vfiprintf_r+0x70>
 8001f8e:	4343      	muls	r3, r0
 8001f90:	002e      	movs	r6, r5
 8001f92:	2101      	movs	r1, #1
 8001f94:	189b      	adds	r3, r3, r2
 8001f96:	e7a4      	b.n	8001ee2 <_vfiprintf_r+0xfe>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	200a      	movs	r0, #10
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	3601      	adds	r6, #1
 8001fa0:	6063      	str	r3, [r4, #4]
 8001fa2:	7832      	ldrb	r2, [r6, #0]
 8001fa4:	1c75      	adds	r5, r6, #1
 8001fa6:	3a30      	subs	r2, #48	@ 0x30
 8001fa8:	2a09      	cmp	r2, #9
 8001faa:	d903      	bls.n	8001fb4 <_vfiprintf_r+0x1d0>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0c8      	beq.n	8001f42 <_vfiprintf_r+0x15e>
 8001fb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8001fb2:	e7c6      	b.n	8001f42 <_vfiprintf_r+0x15e>
 8001fb4:	4341      	muls	r1, r0
 8001fb6:	002e      	movs	r6, r5
 8001fb8:	2301      	movs	r3, #1
 8001fba:	1889      	adds	r1, r1, r2
 8001fbc:	e7f1      	b.n	8001fa2 <_vfiprintf_r+0x1be>
 8001fbe:	aa07      	add	r2, sp, #28
 8001fc0:	9200      	str	r2, [sp, #0]
 8001fc2:	0021      	movs	r1, r4
 8001fc4:	003a      	movs	r2, r7
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <_vfiprintf_r+0x234>)
 8001fc8:	9803      	ldr	r0, [sp, #12]
 8001fca:	e000      	b.n	8001fce <_vfiprintf_r+0x1ea>
 8001fcc:	bf00      	nop
 8001fce:	9004      	str	r0, [sp, #16]
 8001fd0:	9b04      	ldr	r3, [sp, #16]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	d1d6      	bne.n	8001f84 <_vfiprintf_r+0x1a0>
 8001fd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fd8:	07db      	lsls	r3, r3, #31
 8001fda:	d405      	bmi.n	8001fe8 <_vfiprintf_r+0x204>
 8001fdc:	89bb      	ldrh	r3, [r7, #12]
 8001fde:	059b      	lsls	r3, r3, #22
 8001fe0:	d402      	bmi.n	8001fe8 <_vfiprintf_r+0x204>
 8001fe2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fe4:	f7ff fdd8 	bl	8001b98 <__retarget_lock_release_recursive>
 8001fe8:	89bb      	ldrh	r3, [r7, #12]
 8001fea:	065b      	lsls	r3, r3, #25
 8001fec:	d500      	bpl.n	8001ff0 <_vfiprintf_r+0x20c>
 8001fee:	e71e      	b.n	8001e2e <_vfiprintf_r+0x4a>
 8001ff0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001ff2:	e71e      	b.n	8001e32 <_vfiprintf_r+0x4e>
 8001ff4:	aa07      	add	r2, sp, #28
 8001ff6:	9200      	str	r2, [sp, #0]
 8001ff8:	0021      	movs	r1, r4
 8001ffa:	003a      	movs	r2, r7
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <_vfiprintf_r+0x234>)
 8001ffe:	9803      	ldr	r0, [sp, #12]
 8002000:	f000 f87c 	bl	80020fc <_printf_i>
 8002004:	e7e3      	b.n	8001fce <_vfiprintf_r+0x1ea>
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	08002655 	.word	0x08002655
 800200c:	0800265b 	.word	0x0800265b
 8002010:	0800265f 	.word	0x0800265f
 8002014:	00000000 	.word	0x00000000
 8002018:	08001dbf 	.word	0x08001dbf

0800201c <_printf_common>:
 800201c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800201e:	0016      	movs	r6, r2
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	688a      	ldr	r2, [r1, #8]
 8002024:	690b      	ldr	r3, [r1, #16]
 8002026:	000c      	movs	r4, r1
 8002028:	9000      	str	r0, [sp, #0]
 800202a:	4293      	cmp	r3, r2
 800202c:	da00      	bge.n	8002030 <_printf_common+0x14>
 800202e:	0013      	movs	r3, r2
 8002030:	0022      	movs	r2, r4
 8002032:	6033      	str	r3, [r6, #0]
 8002034:	3243      	adds	r2, #67	@ 0x43
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	2a00      	cmp	r2, #0
 800203a:	d001      	beq.n	8002040 <_printf_common+0x24>
 800203c:	3301      	adds	r3, #1
 800203e:	6033      	str	r3, [r6, #0]
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	069b      	lsls	r3, r3, #26
 8002044:	d502      	bpl.n	800204c <_printf_common+0x30>
 8002046:	6833      	ldr	r3, [r6, #0]
 8002048:	3302      	adds	r3, #2
 800204a:	6033      	str	r3, [r6, #0]
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	2306      	movs	r3, #6
 8002050:	0015      	movs	r5, r2
 8002052:	401d      	ands	r5, r3
 8002054:	421a      	tst	r2, r3
 8002056:	d027      	beq.n	80020a8 <_printf_common+0x8c>
 8002058:	0023      	movs	r3, r4
 800205a:	3343      	adds	r3, #67	@ 0x43
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	1e5a      	subs	r2, r3, #1
 8002060:	4193      	sbcs	r3, r2
 8002062:	6822      	ldr	r2, [r4, #0]
 8002064:	0692      	lsls	r2, r2, #26
 8002066:	d430      	bmi.n	80020ca <_printf_common+0xae>
 8002068:	0022      	movs	r2, r4
 800206a:	9901      	ldr	r1, [sp, #4]
 800206c:	9800      	ldr	r0, [sp, #0]
 800206e:	9d08      	ldr	r5, [sp, #32]
 8002070:	3243      	adds	r2, #67	@ 0x43
 8002072:	47a8      	blx	r5
 8002074:	3001      	adds	r0, #1
 8002076:	d025      	beq.n	80020c4 <_printf_common+0xa8>
 8002078:	2206      	movs	r2, #6
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	2500      	movs	r5, #0
 800207e:	4013      	ands	r3, r2
 8002080:	2b04      	cmp	r3, #4
 8002082:	d105      	bne.n	8002090 <_printf_common+0x74>
 8002084:	6833      	ldr	r3, [r6, #0]
 8002086:	68e5      	ldr	r5, [r4, #12]
 8002088:	1aed      	subs	r5, r5, r3
 800208a:	43eb      	mvns	r3, r5
 800208c:	17db      	asrs	r3, r3, #31
 800208e:	401d      	ands	r5, r3
 8002090:	68a3      	ldr	r3, [r4, #8]
 8002092:	6922      	ldr	r2, [r4, #16]
 8002094:	4293      	cmp	r3, r2
 8002096:	dd01      	ble.n	800209c <_printf_common+0x80>
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	18ed      	adds	r5, r5, r3
 800209c:	2600      	movs	r6, #0
 800209e:	42b5      	cmp	r5, r6
 80020a0:	d120      	bne.n	80020e4 <_printf_common+0xc8>
 80020a2:	2000      	movs	r0, #0
 80020a4:	e010      	b.n	80020c8 <_printf_common+0xac>
 80020a6:	3501      	adds	r5, #1
 80020a8:	68e3      	ldr	r3, [r4, #12]
 80020aa:	6832      	ldr	r2, [r6, #0]
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	42ab      	cmp	r3, r5
 80020b0:	ddd2      	ble.n	8002058 <_printf_common+0x3c>
 80020b2:	0022      	movs	r2, r4
 80020b4:	2301      	movs	r3, #1
 80020b6:	9901      	ldr	r1, [sp, #4]
 80020b8:	9800      	ldr	r0, [sp, #0]
 80020ba:	9f08      	ldr	r7, [sp, #32]
 80020bc:	3219      	adds	r2, #25
 80020be:	47b8      	blx	r7
 80020c0:	3001      	adds	r0, #1
 80020c2:	d1f0      	bne.n	80020a6 <_printf_common+0x8a>
 80020c4:	2001      	movs	r0, #1
 80020c6:	4240      	negs	r0, r0
 80020c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020ca:	2030      	movs	r0, #48	@ 0x30
 80020cc:	18e1      	adds	r1, r4, r3
 80020ce:	3143      	adds	r1, #67	@ 0x43
 80020d0:	7008      	strb	r0, [r1, #0]
 80020d2:	0021      	movs	r1, r4
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	3145      	adds	r1, #69	@ 0x45
 80020d8:	7809      	ldrb	r1, [r1, #0]
 80020da:	18a2      	adds	r2, r4, r2
 80020dc:	3243      	adds	r2, #67	@ 0x43
 80020de:	3302      	adds	r3, #2
 80020e0:	7011      	strb	r1, [r2, #0]
 80020e2:	e7c1      	b.n	8002068 <_printf_common+0x4c>
 80020e4:	0022      	movs	r2, r4
 80020e6:	2301      	movs	r3, #1
 80020e8:	9901      	ldr	r1, [sp, #4]
 80020ea:	9800      	ldr	r0, [sp, #0]
 80020ec:	9f08      	ldr	r7, [sp, #32]
 80020ee:	321a      	adds	r2, #26
 80020f0:	47b8      	blx	r7
 80020f2:	3001      	adds	r0, #1
 80020f4:	d0e6      	beq.n	80020c4 <_printf_common+0xa8>
 80020f6:	3601      	adds	r6, #1
 80020f8:	e7d1      	b.n	800209e <_printf_common+0x82>
	...

080020fc <_printf_i>:
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b08b      	sub	sp, #44	@ 0x2c
 8002100:	9206      	str	r2, [sp, #24]
 8002102:	000a      	movs	r2, r1
 8002104:	3243      	adds	r2, #67	@ 0x43
 8002106:	9307      	str	r3, [sp, #28]
 8002108:	9005      	str	r0, [sp, #20]
 800210a:	9203      	str	r2, [sp, #12]
 800210c:	7e0a      	ldrb	r2, [r1, #24]
 800210e:	000c      	movs	r4, r1
 8002110:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002112:	2a78      	cmp	r2, #120	@ 0x78
 8002114:	d809      	bhi.n	800212a <_printf_i+0x2e>
 8002116:	2a62      	cmp	r2, #98	@ 0x62
 8002118:	d80b      	bhi.n	8002132 <_printf_i+0x36>
 800211a:	2a00      	cmp	r2, #0
 800211c:	d100      	bne.n	8002120 <_printf_i+0x24>
 800211e:	e0ba      	b.n	8002296 <_printf_i+0x19a>
 8002120:	497a      	ldr	r1, [pc, #488]	@ (800230c <_printf_i+0x210>)
 8002122:	9104      	str	r1, [sp, #16]
 8002124:	2a58      	cmp	r2, #88	@ 0x58
 8002126:	d100      	bne.n	800212a <_printf_i+0x2e>
 8002128:	e08e      	b.n	8002248 <_printf_i+0x14c>
 800212a:	0025      	movs	r5, r4
 800212c:	3542      	adds	r5, #66	@ 0x42
 800212e:	702a      	strb	r2, [r5, #0]
 8002130:	e022      	b.n	8002178 <_printf_i+0x7c>
 8002132:	0010      	movs	r0, r2
 8002134:	3863      	subs	r0, #99	@ 0x63
 8002136:	2815      	cmp	r0, #21
 8002138:	d8f7      	bhi.n	800212a <_printf_i+0x2e>
 800213a:	f7fd ffef 	bl	800011c <__gnu_thumb1_case_shi>
 800213e:	0016      	.short	0x0016
 8002140:	fff6001f 	.word	0xfff6001f
 8002144:	fff6fff6 	.word	0xfff6fff6
 8002148:	001ffff6 	.word	0x001ffff6
 800214c:	fff6fff6 	.word	0xfff6fff6
 8002150:	fff6fff6 	.word	0xfff6fff6
 8002154:	0036009f 	.word	0x0036009f
 8002158:	fff6007e 	.word	0xfff6007e
 800215c:	00b0fff6 	.word	0x00b0fff6
 8002160:	0036fff6 	.word	0x0036fff6
 8002164:	fff6fff6 	.word	0xfff6fff6
 8002168:	0082      	.short	0x0082
 800216a:	0025      	movs	r5, r4
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	3542      	adds	r5, #66	@ 0x42
 8002170:	1d11      	adds	r1, r2, #4
 8002172:	6019      	str	r1, [r3, #0]
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	702b      	strb	r3, [r5, #0]
 8002178:	2301      	movs	r3, #1
 800217a:	e09e      	b.n	80022ba <_printf_i+0x1be>
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	6809      	ldr	r1, [r1, #0]
 8002180:	1d02      	adds	r2, r0, #4
 8002182:	060d      	lsls	r5, r1, #24
 8002184:	d50b      	bpl.n	800219e <_printf_i+0xa2>
 8002186:	6806      	ldr	r6, [r0, #0]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	2e00      	cmp	r6, #0
 800218c:	da03      	bge.n	8002196 <_printf_i+0x9a>
 800218e:	232d      	movs	r3, #45	@ 0x2d
 8002190:	9a03      	ldr	r2, [sp, #12]
 8002192:	4276      	negs	r6, r6
 8002194:	7013      	strb	r3, [r2, #0]
 8002196:	4b5d      	ldr	r3, [pc, #372]	@ (800230c <_printf_i+0x210>)
 8002198:	270a      	movs	r7, #10
 800219a:	9304      	str	r3, [sp, #16]
 800219c:	e018      	b.n	80021d0 <_printf_i+0xd4>
 800219e:	6806      	ldr	r6, [r0, #0]
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	0649      	lsls	r1, r1, #25
 80021a4:	d5f1      	bpl.n	800218a <_printf_i+0x8e>
 80021a6:	b236      	sxth	r6, r6
 80021a8:	e7ef      	b.n	800218a <_printf_i+0x8e>
 80021aa:	6808      	ldr	r0, [r1, #0]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	c940      	ldmia	r1!, {r6}
 80021b0:	0605      	lsls	r5, r0, #24
 80021b2:	d402      	bmi.n	80021ba <_printf_i+0xbe>
 80021b4:	0640      	lsls	r0, r0, #25
 80021b6:	d500      	bpl.n	80021ba <_printf_i+0xbe>
 80021b8:	b2b6      	uxth	r6, r6
 80021ba:	6019      	str	r1, [r3, #0]
 80021bc:	4b53      	ldr	r3, [pc, #332]	@ (800230c <_printf_i+0x210>)
 80021be:	270a      	movs	r7, #10
 80021c0:	9304      	str	r3, [sp, #16]
 80021c2:	2a6f      	cmp	r2, #111	@ 0x6f
 80021c4:	d100      	bne.n	80021c8 <_printf_i+0xcc>
 80021c6:	3f02      	subs	r7, #2
 80021c8:	0023      	movs	r3, r4
 80021ca:	2200      	movs	r2, #0
 80021cc:	3343      	adds	r3, #67	@ 0x43
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	60a3      	str	r3, [r4, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db06      	blt.n	80021e6 <_printf_i+0xea>
 80021d8:	2104      	movs	r1, #4
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	9d03      	ldr	r5, [sp, #12]
 80021de:	438a      	bics	r2, r1
 80021e0:	6022      	str	r2, [r4, #0]
 80021e2:	4333      	orrs	r3, r6
 80021e4:	d00c      	beq.n	8002200 <_printf_i+0x104>
 80021e6:	9d03      	ldr	r5, [sp, #12]
 80021e8:	0030      	movs	r0, r6
 80021ea:	0039      	movs	r1, r7
 80021ec:	f7fe f826 	bl	800023c <__aeabi_uidivmod>
 80021f0:	9b04      	ldr	r3, [sp, #16]
 80021f2:	3d01      	subs	r5, #1
 80021f4:	5c5b      	ldrb	r3, [r3, r1]
 80021f6:	702b      	strb	r3, [r5, #0]
 80021f8:	0033      	movs	r3, r6
 80021fa:	0006      	movs	r6, r0
 80021fc:	429f      	cmp	r7, r3
 80021fe:	d9f3      	bls.n	80021e8 <_printf_i+0xec>
 8002200:	2f08      	cmp	r7, #8
 8002202:	d109      	bne.n	8002218 <_printf_i+0x11c>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	07db      	lsls	r3, r3, #31
 8002208:	d506      	bpl.n	8002218 <_printf_i+0x11c>
 800220a:	6862      	ldr	r2, [r4, #4]
 800220c:	6923      	ldr	r3, [r4, #16]
 800220e:	429a      	cmp	r2, r3
 8002210:	dc02      	bgt.n	8002218 <_printf_i+0x11c>
 8002212:	2330      	movs	r3, #48	@ 0x30
 8002214:	3d01      	subs	r5, #1
 8002216:	702b      	strb	r3, [r5, #0]
 8002218:	9b03      	ldr	r3, [sp, #12]
 800221a:	1b5b      	subs	r3, r3, r5
 800221c:	6123      	str	r3, [r4, #16]
 800221e:	9b07      	ldr	r3, [sp, #28]
 8002220:	0021      	movs	r1, r4
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	9805      	ldr	r0, [sp, #20]
 8002226:	9b06      	ldr	r3, [sp, #24]
 8002228:	aa09      	add	r2, sp, #36	@ 0x24
 800222a:	f7ff fef7 	bl	800201c <_printf_common>
 800222e:	3001      	adds	r0, #1
 8002230:	d148      	bne.n	80022c4 <_printf_i+0x1c8>
 8002232:	2001      	movs	r0, #1
 8002234:	4240      	negs	r0, r0
 8002236:	b00b      	add	sp, #44	@ 0x2c
 8002238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223a:	2220      	movs	r2, #32
 800223c:	6809      	ldr	r1, [r1, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	6022      	str	r2, [r4, #0]
 8002242:	2278      	movs	r2, #120	@ 0x78
 8002244:	4932      	ldr	r1, [pc, #200]	@ (8002310 <_printf_i+0x214>)
 8002246:	9104      	str	r1, [sp, #16]
 8002248:	0021      	movs	r1, r4
 800224a:	3145      	adds	r1, #69	@ 0x45
 800224c:	700a      	strb	r2, [r1, #0]
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	6822      	ldr	r2, [r4, #0]
 8002252:	c940      	ldmia	r1!, {r6}
 8002254:	0610      	lsls	r0, r2, #24
 8002256:	d402      	bmi.n	800225e <_printf_i+0x162>
 8002258:	0650      	lsls	r0, r2, #25
 800225a:	d500      	bpl.n	800225e <_printf_i+0x162>
 800225c:	b2b6      	uxth	r6, r6
 800225e:	6019      	str	r1, [r3, #0]
 8002260:	07d3      	lsls	r3, r2, #31
 8002262:	d502      	bpl.n	800226a <_printf_i+0x16e>
 8002264:	2320      	movs	r3, #32
 8002266:	4313      	orrs	r3, r2
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	2e00      	cmp	r6, #0
 800226c:	d001      	beq.n	8002272 <_printf_i+0x176>
 800226e:	2710      	movs	r7, #16
 8002270:	e7aa      	b.n	80021c8 <_printf_i+0xcc>
 8002272:	2220      	movs	r2, #32
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	4393      	bics	r3, r2
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	e7f8      	b.n	800226e <_printf_i+0x172>
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	680d      	ldr	r5, [r1, #0]
 8002280:	1d10      	adds	r0, r2, #4
 8002282:	6949      	ldr	r1, [r1, #20]
 8002284:	6018      	str	r0, [r3, #0]
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	062e      	lsls	r6, r5, #24
 800228a:	d501      	bpl.n	8002290 <_printf_i+0x194>
 800228c:	6019      	str	r1, [r3, #0]
 800228e:	e002      	b.n	8002296 <_printf_i+0x19a>
 8002290:	066d      	lsls	r5, r5, #25
 8002292:	d5fb      	bpl.n	800228c <_printf_i+0x190>
 8002294:	8019      	strh	r1, [r3, #0]
 8002296:	2300      	movs	r3, #0
 8002298:	9d03      	ldr	r5, [sp, #12]
 800229a:	6123      	str	r3, [r4, #16]
 800229c:	e7bf      	b.n	800221e <_printf_i+0x122>
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	1d11      	adds	r1, r2, #4
 80022a2:	6019      	str	r1, [r3, #0]
 80022a4:	6815      	ldr	r5, [r2, #0]
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	f000 f986 	bl	80025bc <memchr>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d001      	beq.n	80022b8 <_printf_i+0x1bc>
 80022b4:	1b40      	subs	r0, r0, r5
 80022b6:	6060      	str	r0, [r4, #4]
 80022b8:	6863      	ldr	r3, [r4, #4]
 80022ba:	6123      	str	r3, [r4, #16]
 80022bc:	2300      	movs	r3, #0
 80022be:	9a03      	ldr	r2, [sp, #12]
 80022c0:	7013      	strb	r3, [r2, #0]
 80022c2:	e7ac      	b.n	800221e <_printf_i+0x122>
 80022c4:	002a      	movs	r2, r5
 80022c6:	6923      	ldr	r3, [r4, #16]
 80022c8:	9906      	ldr	r1, [sp, #24]
 80022ca:	9805      	ldr	r0, [sp, #20]
 80022cc:	9d07      	ldr	r5, [sp, #28]
 80022ce:	47a8      	blx	r5
 80022d0:	3001      	adds	r0, #1
 80022d2:	d0ae      	beq.n	8002232 <_printf_i+0x136>
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	079b      	lsls	r3, r3, #30
 80022d8:	d415      	bmi.n	8002306 <_printf_i+0x20a>
 80022da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022dc:	68e0      	ldr	r0, [r4, #12]
 80022de:	4298      	cmp	r0, r3
 80022e0:	daa9      	bge.n	8002236 <_printf_i+0x13a>
 80022e2:	0018      	movs	r0, r3
 80022e4:	e7a7      	b.n	8002236 <_printf_i+0x13a>
 80022e6:	0022      	movs	r2, r4
 80022e8:	2301      	movs	r3, #1
 80022ea:	9906      	ldr	r1, [sp, #24]
 80022ec:	9805      	ldr	r0, [sp, #20]
 80022ee:	9e07      	ldr	r6, [sp, #28]
 80022f0:	3219      	adds	r2, #25
 80022f2:	47b0      	blx	r6
 80022f4:	3001      	adds	r0, #1
 80022f6:	d09c      	beq.n	8002232 <_printf_i+0x136>
 80022f8:	3501      	adds	r5, #1
 80022fa:	68e3      	ldr	r3, [r4, #12]
 80022fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	42ab      	cmp	r3, r5
 8002302:	dcf0      	bgt.n	80022e6 <_printf_i+0x1ea>
 8002304:	e7e9      	b.n	80022da <_printf_i+0x1de>
 8002306:	2500      	movs	r5, #0
 8002308:	e7f7      	b.n	80022fa <_printf_i+0x1fe>
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	08002666 	.word	0x08002666
 8002310:	08002677 	.word	0x08002677

08002314 <__sflush_r>:
 8002314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002316:	220c      	movs	r2, #12
 8002318:	5e8b      	ldrsh	r3, [r1, r2]
 800231a:	0005      	movs	r5, r0
 800231c:	000c      	movs	r4, r1
 800231e:	071a      	lsls	r2, r3, #28
 8002320:	d456      	bmi.n	80023d0 <__sflush_r+0xbc>
 8002322:	684a      	ldr	r2, [r1, #4]
 8002324:	2a00      	cmp	r2, #0
 8002326:	dc02      	bgt.n	800232e <__sflush_r+0x1a>
 8002328:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800232a:	2a00      	cmp	r2, #0
 800232c:	dd4e      	ble.n	80023cc <__sflush_r+0xb8>
 800232e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002330:	2f00      	cmp	r7, #0
 8002332:	d04b      	beq.n	80023cc <__sflush_r+0xb8>
 8002334:	2200      	movs	r2, #0
 8002336:	2080      	movs	r0, #128	@ 0x80
 8002338:	682e      	ldr	r6, [r5, #0]
 800233a:	602a      	str	r2, [r5, #0]
 800233c:	001a      	movs	r2, r3
 800233e:	0140      	lsls	r0, r0, #5
 8002340:	6a21      	ldr	r1, [r4, #32]
 8002342:	4002      	ands	r2, r0
 8002344:	4203      	tst	r3, r0
 8002346:	d033      	beq.n	80023b0 <__sflush_r+0x9c>
 8002348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	075b      	lsls	r3, r3, #29
 800234e:	d506      	bpl.n	800235e <__sflush_r+0x4a>
 8002350:	6863      	ldr	r3, [r4, #4]
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <__sflush_r+0x4a>
 800235a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800235c:	1ad2      	subs	r2, r2, r3
 800235e:	2300      	movs	r3, #0
 8002360:	0028      	movs	r0, r5
 8002362:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002364:	6a21      	ldr	r1, [r4, #32]
 8002366:	47b8      	blx	r7
 8002368:	89a2      	ldrh	r2, [r4, #12]
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	d106      	bne.n	800237c <__sflush_r+0x68>
 800236e:	6829      	ldr	r1, [r5, #0]
 8002370:	291d      	cmp	r1, #29
 8002372:	d846      	bhi.n	8002402 <__sflush_r+0xee>
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <__sflush_r+0x108>)
 8002376:	40cb      	lsrs	r3, r1
 8002378:	07db      	lsls	r3, r3, #31
 800237a:	d542      	bpl.n	8002402 <__sflush_r+0xee>
 800237c:	2300      	movs	r3, #0
 800237e:	6063      	str	r3, [r4, #4]
 8002380:	6923      	ldr	r3, [r4, #16]
 8002382:	6023      	str	r3, [r4, #0]
 8002384:	04d2      	lsls	r2, r2, #19
 8002386:	d505      	bpl.n	8002394 <__sflush_r+0x80>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <__sflush_r+0x7e>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d100      	bne.n	8002394 <__sflush_r+0x80>
 8002392:	6560      	str	r0, [r4, #84]	@ 0x54
 8002394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002396:	602e      	str	r6, [r5, #0]
 8002398:	2900      	cmp	r1, #0
 800239a:	d017      	beq.n	80023cc <__sflush_r+0xb8>
 800239c:	0023      	movs	r3, r4
 800239e:	3344      	adds	r3, #68	@ 0x44
 80023a0:	4299      	cmp	r1, r3
 80023a2:	d002      	beq.n	80023aa <__sflush_r+0x96>
 80023a4:	0028      	movs	r0, r5
 80023a6:	f7ff fbf9 	bl	8001b9c <_free_r>
 80023aa:	2300      	movs	r3, #0
 80023ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80023ae:	e00d      	b.n	80023cc <__sflush_r+0xb8>
 80023b0:	2301      	movs	r3, #1
 80023b2:	0028      	movs	r0, r5
 80023b4:	47b8      	blx	r7
 80023b6:	0002      	movs	r2, r0
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	d1c6      	bne.n	800234a <__sflush_r+0x36>
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0c3      	beq.n	800234a <__sflush_r+0x36>
 80023c2:	2b1d      	cmp	r3, #29
 80023c4:	d001      	beq.n	80023ca <__sflush_r+0xb6>
 80023c6:	2b16      	cmp	r3, #22
 80023c8:	d11a      	bne.n	8002400 <__sflush_r+0xec>
 80023ca:	602e      	str	r6, [r5, #0]
 80023cc:	2000      	movs	r0, #0
 80023ce:	e01e      	b.n	800240e <__sflush_r+0xfa>
 80023d0:	690e      	ldr	r6, [r1, #16]
 80023d2:	2e00      	cmp	r6, #0
 80023d4:	d0fa      	beq.n	80023cc <__sflush_r+0xb8>
 80023d6:	680f      	ldr	r7, [r1, #0]
 80023d8:	600e      	str	r6, [r1, #0]
 80023da:	1bba      	subs	r2, r7, r6
 80023dc:	9201      	str	r2, [sp, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	079b      	lsls	r3, r3, #30
 80023e2:	d100      	bne.n	80023e6 <__sflush_r+0xd2>
 80023e4:	694a      	ldr	r2, [r1, #20]
 80023e6:	60a2      	str	r2, [r4, #8]
 80023e8:	9b01      	ldr	r3, [sp, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	ddee      	ble.n	80023cc <__sflush_r+0xb8>
 80023ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023f0:	0032      	movs	r2, r6
 80023f2:	001f      	movs	r7, r3
 80023f4:	0028      	movs	r0, r5
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	6a21      	ldr	r1, [r4, #32]
 80023fa:	47b8      	blx	r7
 80023fc:	2800      	cmp	r0, #0
 80023fe:	dc07      	bgt.n	8002410 <__sflush_r+0xfc>
 8002400:	89a2      	ldrh	r2, [r4, #12]
 8002402:	2340      	movs	r3, #64	@ 0x40
 8002404:	2001      	movs	r0, #1
 8002406:	4313      	orrs	r3, r2
 8002408:	b21b      	sxth	r3, r3
 800240a:	81a3      	strh	r3, [r4, #12]
 800240c:	4240      	negs	r0, r0
 800240e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002410:	9b01      	ldr	r3, [sp, #4]
 8002412:	1836      	adds	r6, r6, r0
 8002414:	1a1b      	subs	r3, r3, r0
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	e7e6      	b.n	80023e8 <__sflush_r+0xd4>
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	20400001 	.word	0x20400001

08002420 <_fflush_r>:
 8002420:	690b      	ldr	r3, [r1, #16]
 8002422:	b570      	push	{r4, r5, r6, lr}
 8002424:	0005      	movs	r5, r0
 8002426:	000c      	movs	r4, r1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <_fflush_r+0x12>
 800242c:	2500      	movs	r5, #0
 800242e:	0028      	movs	r0, r5
 8002430:	bd70      	pop	{r4, r5, r6, pc}
 8002432:	2800      	cmp	r0, #0
 8002434:	d004      	beq.n	8002440 <_fflush_r+0x20>
 8002436:	6a03      	ldr	r3, [r0, #32]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <_fflush_r+0x20>
 800243c:	f7ff f99a 	bl	8001774 <__sinit>
 8002440:	220c      	movs	r2, #12
 8002442:	5ea3      	ldrsh	r3, [r4, r2]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f1      	beq.n	800242c <_fflush_r+0xc>
 8002448:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800244a:	07d2      	lsls	r2, r2, #31
 800244c:	d404      	bmi.n	8002458 <_fflush_r+0x38>
 800244e:	059b      	lsls	r3, r3, #22
 8002450:	d402      	bmi.n	8002458 <_fflush_r+0x38>
 8002452:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002454:	f7ff fb9f 	bl	8001b96 <__retarget_lock_acquire_recursive>
 8002458:	0028      	movs	r0, r5
 800245a:	0021      	movs	r1, r4
 800245c:	f7ff ff5a 	bl	8002314 <__sflush_r>
 8002460:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002462:	0005      	movs	r5, r0
 8002464:	07db      	lsls	r3, r3, #31
 8002466:	d4e2      	bmi.n	800242e <_fflush_r+0xe>
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	059b      	lsls	r3, r3, #22
 800246c:	d4df      	bmi.n	800242e <_fflush_r+0xe>
 800246e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002470:	f7ff fb92 	bl	8001b98 <__retarget_lock_release_recursive>
 8002474:	e7db      	b.n	800242e <_fflush_r+0xe>
	...

08002478 <__swhatbuf_r>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	000e      	movs	r6, r1
 800247c:	001d      	movs	r5, r3
 800247e:	230e      	movs	r3, #14
 8002480:	5ec9      	ldrsh	r1, [r1, r3]
 8002482:	0014      	movs	r4, r2
 8002484:	b096      	sub	sp, #88	@ 0x58
 8002486:	2900      	cmp	r1, #0
 8002488:	da0c      	bge.n	80024a4 <__swhatbuf_r+0x2c>
 800248a:	89b2      	ldrh	r2, [r6, #12]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	0011      	movs	r1, r2
 8002490:	4019      	ands	r1, r3
 8002492:	421a      	tst	r2, r3
 8002494:	d114      	bne.n	80024c0 <__swhatbuf_r+0x48>
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	2000      	movs	r0, #0
 800249c:	6029      	str	r1, [r5, #0]
 800249e:	6023      	str	r3, [r4, #0]
 80024a0:	b016      	add	sp, #88	@ 0x58
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	466a      	mov	r2, sp
 80024a6:	f000 f853 	bl	8002550 <_fstat_r>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	dbed      	blt.n	800248a <__swhatbuf_r+0x12>
 80024ae:	23f0      	movs	r3, #240	@ 0xf0
 80024b0:	9901      	ldr	r1, [sp, #4]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4019      	ands	r1, r3
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <__swhatbuf_r+0x50>)
 80024b8:	18c9      	adds	r1, r1, r3
 80024ba:	424b      	negs	r3, r1
 80024bc:	4159      	adcs	r1, r3
 80024be:	e7ea      	b.n	8002496 <__swhatbuf_r+0x1e>
 80024c0:	2100      	movs	r1, #0
 80024c2:	2340      	movs	r3, #64	@ 0x40
 80024c4:	e7e9      	b.n	800249a <__swhatbuf_r+0x22>
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	ffffe000 	.word	0xffffe000

080024cc <__smakebuf_r>:
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	2602      	movs	r6, #2
 80024d0:	898b      	ldrh	r3, [r1, #12]
 80024d2:	0005      	movs	r5, r0
 80024d4:	000c      	movs	r4, r1
 80024d6:	b085      	sub	sp, #20
 80024d8:	4233      	tst	r3, r6
 80024da:	d007      	beq.n	80024ec <__smakebuf_r+0x20>
 80024dc:	0023      	movs	r3, r4
 80024de:	3347      	adds	r3, #71	@ 0x47
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	6123      	str	r3, [r4, #16]
 80024e4:	2301      	movs	r3, #1
 80024e6:	6163      	str	r3, [r4, #20]
 80024e8:	b005      	add	sp, #20
 80024ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ec:	ab03      	add	r3, sp, #12
 80024ee:	aa02      	add	r2, sp, #8
 80024f0:	f7ff ffc2 	bl	8002478 <__swhatbuf_r>
 80024f4:	9f02      	ldr	r7, [sp, #8]
 80024f6:	9001      	str	r0, [sp, #4]
 80024f8:	0039      	movs	r1, r7
 80024fa:	0028      	movs	r0, r5
 80024fc:	f7ff fbba 	bl	8001c74 <_malloc_r>
 8002500:	2800      	cmp	r0, #0
 8002502:	d108      	bne.n	8002516 <__smakebuf_r+0x4a>
 8002504:	220c      	movs	r2, #12
 8002506:	5ea3      	ldrsh	r3, [r4, r2]
 8002508:	059a      	lsls	r2, r3, #22
 800250a:	d4ed      	bmi.n	80024e8 <__smakebuf_r+0x1c>
 800250c:	2203      	movs	r2, #3
 800250e:	4393      	bics	r3, r2
 8002510:	431e      	orrs	r6, r3
 8002512:	81a6      	strh	r6, [r4, #12]
 8002514:	e7e2      	b.n	80024dc <__smakebuf_r+0x10>
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	89a2      	ldrh	r2, [r4, #12]
 800251a:	6020      	str	r0, [r4, #0]
 800251c:	4313      	orrs	r3, r2
 800251e:	81a3      	strh	r3, [r4, #12]
 8002520:	9b03      	ldr	r3, [sp, #12]
 8002522:	6120      	str	r0, [r4, #16]
 8002524:	6167      	str	r7, [r4, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <__smakebuf_r+0x78>
 800252a:	0028      	movs	r0, r5
 800252c:	230e      	movs	r3, #14
 800252e:	5ee1      	ldrsh	r1, [r4, r3]
 8002530:	f000 f820 	bl	8002574 <_isatty_r>
 8002534:	2800      	cmp	r0, #0
 8002536:	d005      	beq.n	8002544 <__smakebuf_r+0x78>
 8002538:	2303      	movs	r3, #3
 800253a:	89a2      	ldrh	r2, [r4, #12]
 800253c:	439a      	bics	r2, r3
 800253e:	3b02      	subs	r3, #2
 8002540:	4313      	orrs	r3, r2
 8002542:	81a3      	strh	r3, [r4, #12]
 8002544:	89a3      	ldrh	r3, [r4, #12]
 8002546:	9a01      	ldr	r2, [sp, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	81a3      	strh	r3, [r4, #12]
 800254c:	e7cc      	b.n	80024e8 <__smakebuf_r+0x1c>
	...

08002550 <_fstat_r>:
 8002550:	2300      	movs	r3, #0
 8002552:	b570      	push	{r4, r5, r6, lr}
 8002554:	4d06      	ldr	r5, [pc, #24]	@ (8002570 <_fstat_r+0x20>)
 8002556:	0004      	movs	r4, r0
 8002558:	0008      	movs	r0, r1
 800255a:	0011      	movs	r1, r2
 800255c:	602b      	str	r3, [r5, #0]
 800255e:	f7fe f807 	bl	8000570 <_fstat>
 8002562:	1c43      	adds	r3, r0, #1
 8002564:	d103      	bne.n	800256e <_fstat_r+0x1e>
 8002566:	682b      	ldr	r3, [r5, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d000      	beq.n	800256e <_fstat_r+0x1e>
 800256c:	6023      	str	r3, [r4, #0]
 800256e:	bd70      	pop	{r4, r5, r6, pc}
 8002570:	20000274 	.word	0x20000274

08002574 <_isatty_r>:
 8002574:	2300      	movs	r3, #0
 8002576:	b570      	push	{r4, r5, r6, lr}
 8002578:	4d06      	ldr	r5, [pc, #24]	@ (8002594 <_isatty_r+0x20>)
 800257a:	0004      	movs	r4, r0
 800257c:	0008      	movs	r0, r1
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	f7fd fffb 	bl	800057a <_isatty>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d103      	bne.n	8002590 <_isatty_r+0x1c>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d000      	beq.n	8002590 <_isatty_r+0x1c>
 800258e:	6023      	str	r3, [r4, #0]
 8002590:	bd70      	pop	{r4, r5, r6, pc}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	20000274 	.word	0x20000274

08002598 <_sbrk_r>:
 8002598:	2300      	movs	r3, #0
 800259a:	b570      	push	{r4, r5, r6, lr}
 800259c:	4d06      	ldr	r5, [pc, #24]	@ (80025b8 <_sbrk_r+0x20>)
 800259e:	0004      	movs	r4, r0
 80025a0:	0008      	movs	r0, r1
 80025a2:	602b      	str	r3, [r5, #0]
 80025a4:	f7fd ffee 	bl	8000584 <_sbrk>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d103      	bne.n	80025b4 <_sbrk_r+0x1c>
 80025ac:	682b      	ldr	r3, [r5, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d000      	beq.n	80025b4 <_sbrk_r+0x1c>
 80025b2:	6023      	str	r3, [r4, #0]
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	20000274 	.word	0x20000274

080025bc <memchr>:
 80025bc:	b2c9      	uxtb	r1, r1
 80025be:	1882      	adds	r2, r0, r2
 80025c0:	4290      	cmp	r0, r2
 80025c2:	d101      	bne.n	80025c8 <memchr+0xc>
 80025c4:	2000      	movs	r0, #0
 80025c6:	4770      	bx	lr
 80025c8:	7803      	ldrb	r3, [r0, #0]
 80025ca:	428b      	cmp	r3, r1
 80025cc:	d0fb      	beq.n	80025c6 <memchr+0xa>
 80025ce:	3001      	adds	r0, #1
 80025d0:	e7f6      	b.n	80025c0 <memchr+0x4>
	...

080025d4 <_init>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr

080025e0 <_fini>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr
