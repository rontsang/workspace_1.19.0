
usb_hid_switch2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b40  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004c00  08004c00  00005c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d30  08004d30  000061d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004d30  08004d30  000061d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004d30  08004d30  000061d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d30  08004d30  00005d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d34  08004d34  00005d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08004d38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  200001d8  08004f10  000061d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  08004f10  00006bec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015195  00000000  00000000  00006200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe2  00000000  00000000  0001b395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000797f  00000000  00000000  0001f377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00026cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa4  00000000  00000000  00027a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd82  00000000  00000000  000289c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184a7  00000000  00000000  00044746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000905d9  00000000  00000000  0005cbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ed1c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002798  00000000  00000000  000ed20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000ef9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004be8 	.word	0x08004be8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08004be8 	.word	0x08004be8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_llsr>:
 8000440:	40d0      	lsrs	r0, r2
 8000442:	000b      	movs	r3, r1
 8000444:	40d1      	lsrs	r1, r2
 8000446:	469c      	mov	ip, r3
 8000448:	3a20      	subs	r2, #32
 800044a:	40d3      	lsrs	r3, r2
 800044c:	4318      	orrs	r0, r3
 800044e:	4252      	negs	r2, r2
 8000450:	4663      	mov	r3, ip
 8000452:	4093      	lsls	r3, r2
 8000454:	4318      	orrs	r0, r3
 8000456:	4770      	bx	lr

08000458 <Flash_Append>:

static uint32_t find_last_written_address(void);
static void erase_storage_page(void);

uint8_t Flash_Append(uint16_t data)
{
 8000458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return (result == HAL_OK) ? 0 : 1;
}

static uint32_t find_last_written_address(void)
{
    uint32_t address = FLASH_STORAGE_ADDRESS;
 800045a:	4c14      	ldr	r4, [pc, #80]	@ (80004ac <Flash_Append+0x54>)
{
 800045c:	0005      	movs	r5, r0
 800045e:	0026      	movs	r6, r4
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
    {
        uint16_t value = *(volatile uint16_t*)address;
        if (value == 0xFFFF)
 8000460:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <Flash_Append+0x58>)
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <Flash_Append+0x5c>)
        uint16_t value = *(volatile uint16_t*)address;
 8000464:	8821      	ldrh	r1, [r4, #0]
        if (value == 0xFFFF)
 8000466:	4291      	cmp	r1, r2
 8000468:	d010      	beq.n	800048c <Flash_Append+0x34>
            break;
        address += 2;
 800046a:	3402      	adds	r4, #2
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 800046c:	429c      	cmp	r4, r3
 800046e:	d1f9      	bne.n	8000464 <Flash_Append+0xc>
    return 0;
}

static void erase_storage_page(void)
{
    HAL_FLASH_Unlock();
 8000470:	f000 fae8 	bl	8000a44 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error;

    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000474:	2300      	movs	r3, #0
    erase.PageAddress = FLASH_STORAGE_ADDRESS;
    erase.NbPages = 1;

    HAL_FLASHEx_Erase(&erase, &page_error);
 8000476:	4669      	mov	r1, sp
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000478:	9301      	str	r3, [sp, #4]
    HAL_FLASHEx_Erase(&erase, &page_error);
 800047a:	a801      	add	r0, sp, #4
    erase.NbPages = 1;
 800047c:	3301      	adds	r3, #1
 800047e:	9303      	str	r3, [sp, #12]
    erase.PageAddress = FLASH_STORAGE_ADDRESS;
 8000480:	9602      	str	r6, [sp, #8]
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000482:	f000 fb91 	bl	8000ba8 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8000486:	f000 faf1 	bl	8000a6c <HAL_FLASH_Lock>
        address = FLASH_STORAGE_ADDRESS;
 800048a:	4c08      	ldr	r4, [pc, #32]	@ (80004ac <Flash_Append+0x54>)
    HAL_FLASH_Unlock();
 800048c:	f000 fada 	bl	8000a44 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000490:	2300      	movs	r3, #0
 8000492:	0021      	movs	r1, r4
 8000494:	002a      	movs	r2, r5
 8000496:	2001      	movs	r0, #1
 8000498:	f000 fb1c 	bl	8000ad4 <HAL_FLASH_Program>
 800049c:	0004      	movs	r4, r0
    return (result == HAL_OK) ? 0 : 1;
 800049e:	1e63      	subs	r3, r4, #1
 80004a0:	419c      	sbcs	r4, r3
    HAL_FLASH_Lock();
 80004a2:	f000 fae3 	bl	8000a6c <HAL_FLASH_Lock>
    return (result == HAL_OK) ? 0 : 1;
 80004a6:	b2e0      	uxtb	r0, r4
}
 80004a8:	b004      	add	sp, #16
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	08007c00 	.word	0x08007c00
 80004b0:	0000ffff 	.word	0x0000ffff
 80004b4:	08008000 	.word	0x08008000

080004b8 <Flash_ReadLastValue>:
    uint32_t address = FLASH_STORAGE_ADDRESS;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <Flash_ReadLastValue+0x34>)
{
 80004ba:	b570      	push	{r4, r5, r6, lr}
 80004bc:	0019      	movs	r1, r3
        if (value == 0xFFFF)
 80004be:	4d0c      	ldr	r5, [pc, #48]	@ (80004f0 <Flash_ReadLastValue+0x38>)
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 80004c0:	4c0c      	ldr	r4, [pc, #48]	@ (80004f4 <Flash_ReadLastValue+0x3c>)
        uint16_t value = *(volatile uint16_t*)address;
 80004c2:	881a      	ldrh	r2, [r3, #0]
 80004c4:	b290      	uxth	r0, r2
        if (value == 0xFFFF)
 80004c6:	42aa      	cmp	r2, r5
 80004c8:	d00c      	beq.n	80004e4 <Flash_ReadLastValue+0x2c>
        address += 2;
 80004ca:	3302      	adds	r3, #2
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 80004cc:	42a3      	cmp	r3, r4
 80004ce:	d1f8      	bne.n	80004c2 <Flash_ReadLastValue+0xa>
    uint16_t last_value = *(volatile uint16_t*)(address - 2);
 80004d0:	3b02      	subs	r3, #2
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	b298      	uxth	r0, r3
    if (last_value == 0 || last_value == 1 || last_value == 2)
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d906      	bls.n	80004e8 <Flash_ReadLastValue+0x30>
        Flash_Append(0); // corrupt
 80004da:	2000      	movs	r0, #0
 80004dc:	f7ff ffbc 	bl	8000458 <Flash_Append>
    return 0;
 80004e0:	2000      	movs	r0, #0
 80004e2:	e001      	b.n	80004e8 <Flash_ReadLastValue+0x30>
    if (address == FLASH_STORAGE_ADDRESS)
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d1f3      	bne.n	80004d0 <Flash_ReadLastValue+0x18>
}
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	08007c00 	.word	0x08007c00
 80004f0:	0000ffff 	.word	0x0000ffff
 80004f4:	08008000 	.word	0x08008000

080004f8 <cycle_state_and_reset>:
}

void cycle_state_and_reset(void)
{
 80004f8:	b570      	push	{r4, r5, r6, lr}
	uint16_t currentState = Flash_ReadLastValue();
 80004fa:	f7ff ffdd 	bl	80004b8 <Flash_ReadLastValue>
	uint16_t nextState = (currentState == 0xFFFF) ? 0 : ((currentState + 1) % 3);
 80004fe:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <cycle_state_and_reset+0x48>)
	uint16_t currentState = Flash_ReadLastValue();
 8000500:	0005      	movs	r5, r0
	uint16_t nextState = (currentState == 0xFFFF) ? 0 : ((currentState + 1) % 3);
 8000502:	2400      	movs	r4, #0
 8000504:	4298      	cmp	r0, r3
 8000506:	d004      	beq.n	8000512 <cycle_state_and_reset+0x1a>
 8000508:	2103      	movs	r1, #3
 800050a:	3001      	adds	r0, #1
 800050c:	f7ff ff92 	bl	8000434 <__aeabi_idivmod>
 8000510:	b28c      	uxth	r4, r1

    printf("Switching from mode %u to %u...\r\n", currentState, nextState);
 8000512:	0022      	movs	r2, r4
 8000514:	0029      	movs	r1, r5
 8000516:	480b      	ldr	r0, [pc, #44]	@ (8000544 <cycle_state_and_reset+0x4c>)
 8000518:	f003 fc6a 	bl	8003df0 <iprintf>

    if (Flash_Append(nextState) == 0) // Check for success
 800051c:	0020      	movs	r0, r4
 800051e:	f7ff ff9b 	bl	8000458 <Flash_Append>
 8000522:	2800      	cmp	r0, #0
 8000524:	d108      	bne.n	8000538 <cycle_state_and_reset+0x40>
    {
        printf("New state saved. Resetting device now.\r\n");
 8000526:	4808      	ldr	r0, [pc, #32]	@ (8000548 <cycle_state_and_reset+0x50>)
 8000528:	f003 fcc8 	bl	8003ebc <puts>
        HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	@ 0x64
 800052e:	f000 f9fb 	bl	8000928 <HAL_Delay>
        HAL_NVIC_SystemReset();
    }
    else
    {
        printf("FATAL ERROR: Failed to write new state! System halted.\r\n");
        HAL_NVIC_SystemReset();
 8000532:	f000 fa41 	bl	80009b8 <HAL_NVIC_SystemReset>
    }
}
 8000536:	bd70      	pop	{r4, r5, r6, pc}
        printf("FATAL ERROR: Failed to write new state! System halted.\r\n");
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <cycle_state_and_reset+0x54>)
 800053a:	f003 fcbf 	bl	8003ebc <puts>
 800053e:	e7f8      	b.n	8000532 <cycle_state_and_reset+0x3a>
 8000540:	0000ffff 	.word	0x0000ffff
 8000544:	08004c00 	.word	0x08004c00
 8000548:	08004c22 	.word	0x08004c22
 800054c:	08004c4a 	.word	0x08004c4a

08000550 <_write>:


// For UART debugging. Critical for mystery reason(s).
int _write(int file, char *ptr, int len)
{
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000550:	2301      	movs	r3, #1
{
 8000552:	b510      	push	{r4, lr}
 8000554:	0014      	movs	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000556:	b292      	uxth	r2, r2
 8000558:	425b      	negs	r3, r3
 800055a:	4802      	ldr	r0, [pc, #8]	@ (8000564 <_write+0x14>)
 800055c:	f001 ffb2 	bl	80024c4 <HAL_UART_Transmit>
  return len;
}
 8000560:	0020      	movs	r0, r4
 8000562:	bd10      	pop	{r4, pc}
 8000564:	20000234 	.word	0x20000234

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	2230      	movs	r2, #48	@ 0x30
 800056e:	2100      	movs	r1, #0
 8000570:	a80c      	add	r0, sp, #48	@ 0x30
 8000572:	f003 fd99 	bl	80040a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	2210      	movs	r2, #16
 8000578:	2100      	movs	r1, #0
 800057a:	a801      	add	r0, sp, #4
 800057c:	f003 fd94 	bl	80040a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000580:	2218      	movs	r2, #24
 8000582:	2100      	movs	r1, #0
 8000584:	a805      	add	r0, sp, #20
 8000586:	f003 fd8f 	bl	80040a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800058a:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800058c:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000590:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000592:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f001 fa68 	bl	8001a68 <HAL_RCC_OscConfig>
 8000598:	2800      	cmp	r0, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059e:	e7fe      	b.n	800059e <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80005a8:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005aa:	0021      	movs	r1, r4
 80005ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80005ae:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	f001 fce0 	bl	8001f74 <HAL_RCC_ClockConfig>
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x54>
 80005b8:	b672      	cpsid	i
  while (1)
 80005ba:	e7fe      	b.n	80005ba <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005bc:	2380      	movs	r3, #128	@ 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005be:	900a      	str	r0, [sp, #40]	@ 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005c0:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005c4:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	f001 fd6f 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x6a>
 80005ce:	b672      	cpsid	i
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <SystemClock_Config+0x68>
}
 80005d2:	b018      	add	sp, #96	@ 0x60
 80005d4:	bd10      	pop	{r4, pc}
	...

080005d8 <main>:
{
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
	HAL_Init();
 80005dc:	f000 f982 	bl	80008e4 <HAL_Init>
	SystemClock_Config();
 80005e0:	f7ff ffc2 	bl	8000568 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	4b33      	ldr	r3, [pc, #204]	@ (80006b4 <main+0xdc>)
 80005e8:	03c9      	lsls	r1, r1, #15
 80005ea:	695a      	ldr	r2, [r3, #20]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	a806      	add	r0, sp, #24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	430a      	orrs	r2, r1
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005f4:	2401      	movs	r4, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f6:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	0289      	lsls	r1, r1, #10
 8000602:	430a      	orrs	r2, r1
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	2208      	movs	r2, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	400b      	ands	r3, r1
 800060c:	9302      	str	r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f003 fd49 	bl	80040a8 <memset>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 8000616:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 800061a:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	a903      	add	r1, sp, #12
 800061e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 8000620:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000622:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;           // Enable internal pull-up (button active low)
 8000624:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f000 fb09 	bl	8000c3c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	2005      	movs	r0, #5
 8000630:	f000 f98c 	bl	800094c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000634:	2005      	movs	r0, #5
 8000636:	f000 f9b3 	bl	80009a0 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800063a:	481f      	ldr	r0, [pc, #124]	@ (80006b8 <main+0xe0>)
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <main+0xe4>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063e:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000640:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8000642:	2396      	movs	r3, #150	@ 0x96
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000648:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000650:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000658:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	f001 fff9 	bl	8002650 <HAL_UART_Init>
 800065e:	1e05      	subs	r5, r0, #0
 8000660:	d001      	beq.n	8000666 <main+0x8e>
 8000662:	b672      	cpsid	i
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x8c>
	MX_USB_DEVICE_Init();
 8000666:	f003 f94b 	bl	8003900 <MX_USB_DEVICE_Init>
	g_current_mode = (DeviceMode_t)Flash_ReadLastValue();
 800066a:	f7ff ff25 	bl	80004b8 <Flash_ReadLastValue>
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <main+0xe8>)
 8000670:	7018      	strb	r0, [r3, #0]
  uint16_t last = Flash_ReadLastValue();
 8000672:	f7ff ff21 	bl	80004b8 <Flash_ReadLastValue>
  report.axes[0] = 128;
 8000676:	2280      	movs	r2, #128	@ 0x80
  report.reportId = 0x01;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <main+0xec>)
  memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional
 800067a:	0029      	movs	r1, r5
  report.axes[0] = 128;
 800067c:	705a      	strb	r2, [r3, #1]
  report.axes[1] = 128;
 800067e:	709a      	strb	r2, [r3, #2]
  report.axes[2] = 128;
 8000680:	70da      	strb	r2, [r3, #3]
  report.axes[3] = 128;
 8000682:	711a      	strb	r2, [r3, #4]
  report.axes[4] = 128;
 8000684:	715a      	strb	r2, [r3, #5]
  report.axes[5] = 128;
 8000686:	719a      	strb	r2, [r3, #6]
  report.hatSwitch = 0x0F;  // Neutral
 8000688:	3a71      	subs	r2, #113	@ 0x71
  report.reportId = 0x01;
 800068a:	701c      	strb	r4, [r3, #0]
  report.hatSwitch = 0x0F;  // Neutral
 800068c:	721a      	strb	r2, [r3, #8]
	 HAL_Delay(1000);
 800068e:	24fa      	movs	r4, #250	@ 0xfa
  memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional
 8000690:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <main+0xf0>)
 8000692:	3226      	adds	r2, #38	@ 0x26
  report.vendorByte1 = 0x00;
 8000694:	71dd      	strb	r5, [r3, #7]
  memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional
 8000696:	f003 fd07 	bl	80040a8 <memset>
	 HAL_Delay(1000);
 800069a:	00a4      	lsls	r4, r4, #2
      uint16_t last = Flash_ReadLastValue();
 800069c:	f7ff ff0c 	bl	80004b8 <Flash_ReadLastValue>
	 printf("Last value \r\n");
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <main+0xf4>)
 80006a2:	f003 fc0b 	bl	8003ebc <puts>
	 cycle_state_and_reset();
 80006a6:	f7ff ff27 	bl	80004f8 <cycle_state_and_reset>
	 HAL_Delay(1000);
 80006aa:	0020      	movs	r0, r4
 80006ac:	f000 f93c 	bl	8000928 <HAL_Delay>
  while (1)
 80006b0:	e7f4      	b.n	800069c <main+0xc4>
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	40021000 	.word	0x40021000
 80006b8:	20000234 	.word	0x20000234
 80006bc:	40004400 	.word	0x40004400
 80006c0:	200002bc 	.word	0x200002bc
 80006c4:	200001f4 	.word	0x200001f4
 80006c8:	200001ff 	.word	0x200001ff
 80006cc:	08004c82 	.word	0x08004c82

080006d0 <EXTI0_1_IRQHandler>:
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80006d0:	2201      	movs	r2, #1
 80006d2:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <EXTI0_1_IRQHandler+0x14>)
{
 80006d4:	b510      	push	{r4, lr}
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80006d6:	6959      	ldr	r1, [r3, #20]
 80006d8:	4211      	tst	r1, r2
 80006da:	d002      	beq.n	80006e2 <EXTI0_1_IRQHandler+0x12>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);  // Clear interrupt flag
 80006dc:	615a      	str	r2, [r3, #20]
        cycle_state_and_reset();
 80006de:	f7ff ff0b 	bl	80004f8 <cycle_state_and_reset>
}
 80006e2:	bd10      	pop	{r4, pc}
 80006e4:	40010400 	.word	0x40010400

080006e8 <Error_Handler>:
 80006e8:	b672      	cpsid	i
  while (1)
 80006ea:	e7fe      	b.n	80006ea <Error_Handler+0x2>

080006ec <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ec:	2101      	movs	r1, #1
 80006ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <HAL_MspInit+0x2c>)
{
 80006f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	619a      	str	r2, [r3, #24]
 80006f8:	699a      	ldr	r2, [r3, #24]
 80006fa:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	69da      	ldr	r2, [r3, #28]
 8000704:	0549      	lsls	r1, r1, #21
 8000706:	430a      	orrs	r2, r1
 8000708:	61da      	str	r2, [r3, #28]
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	400b      	ands	r3, r1
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	b002      	add	sp, #8
 8000714:	4770      	bx	lr
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800071c:	b510      	push	{r4, lr}
 800071e:	0004      	movs	r4, r0
 8000720:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	2214      	movs	r2, #20
 8000724:	2100      	movs	r1, #0
 8000726:	a803      	add	r0, sp, #12
 8000728:	f003 fcbe 	bl	80040a8 <memset>
  if(huart->Instance==USART2)
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <HAL_UART_MspInit+0x58>)
 800072e:	6822      	ldr	r2, [r4, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d11d      	bne.n	8000770 <HAL_UART_MspInit+0x54>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <HAL_UART_MspInit+0x5c>)
 8000738:	0292      	lsls	r2, r2, #10
 800073a:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800073e:	4311      	orrs	r1, r2
 8000740:	61d9      	str	r1, [r3, #28]
 8000742:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000746:	4011      	ands	r1, r2
 8000748:	9101      	str	r1, [sp, #4]
 800074a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	6959      	ldr	r1, [r3, #20]
 800074e:	4311      	orrs	r1, r2
 8000750:	6159      	str	r1, [r3, #20]
 8000752:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4013      	ands	r3, r2
 8000758:	9302      	str	r3, [sp, #8]
 800075a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <HAL_UART_MspInit+0x60>)
 800075e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	3301      	adds	r3, #1
 8000766:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000768:	3b02      	subs	r3, #2
 800076a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f000 fa66 	bl	8000c3c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000770:	b008      	add	sp, #32
 8000772:	bd10      	pop	{r4, pc}
 8000774:	40004400 	.word	0x40004400
 8000778:	40021000 	.word	0x40021000
 800077c:	00008004 	.word	0x00008004

08000780 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler>

08000782 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler>

08000784 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000784:	4770      	bx	lr

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 f8bb 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078e:	bd10      	pop	{r4, pc}

08000790 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000790:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000792:	4802      	ldr	r0, [pc, #8]	@ (800079c <USB_IRQHandler+0xc>)
 8000794:	f000 fb74 	bl	8000e80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000798:	bd10      	pop	{r4, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	200007c4 	.word	0x200007c4

080007a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	000e      	movs	r6, r1
 80007a4:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	2500      	movs	r5, #0
 80007a8:	42a5      	cmp	r5, r4
 80007aa:	db01      	blt.n	80007b0 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80007ac:	0020      	movs	r0, r4
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80007b0:	e000      	b.n	80007b4 <_read+0x14>
 80007b2:	bf00      	nop
 80007b4:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	3501      	adds	r5, #1
 80007b8:	e7f6      	b.n	80007a8 <_read+0x8>

080007ba <_close>:
}

int _close(int file)
{
  (void)file;
  return -1;
 80007ba:	2001      	movs	r0, #1
}
 80007bc:	4240      	negs	r0, r0
 80007be:	4770      	bx	lr

080007c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	019b      	lsls	r3, r3, #6
  return 0;
}
 80007c4:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80007c6:	604b      	str	r3, [r1, #4]
}
 80007c8:	4770      	bx	lr

080007ca <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80007ca:	2001      	movs	r0, #1
 80007cc:	4770      	bx	lr

080007ce <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80007ce:	2000      	movs	r0, #0
 80007d0:	4770      	bx	lr
	...

080007d4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	490b      	ldr	r1, [pc, #44]	@ (8000804 <_sbrk+0x30>)
 80007d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <_sbrk+0x34>)
{
 80007d8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007da:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	490b      	ldr	r1, [pc, #44]	@ (800080c <_sbrk+0x38>)
{
 80007de:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80007e0:	6808      	ldr	r0, [r1, #0]
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d101      	bne.n	80007ea <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80007e6:	480a      	ldr	r0, [pc, #40]	@ (8000810 <_sbrk+0x3c>)
 80007e8:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	6808      	ldr	r0, [r1, #0]
 80007ec:	18c3      	adds	r3, r0, r3
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d906      	bls.n	8000800 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80007f2:	f003 fcaf 	bl	8004154 <__errno>
 80007f6:	230c      	movs	r3, #12
 80007f8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007fa:	2001      	movs	r0, #1
 80007fc:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80007fe:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000800:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8000802:	e7fc      	b.n	80007fe <_sbrk+0x2a>
 8000804:	00000400 	.word	0x00000400
 8000808:	20001800 	.word	0x20001800
 800080c:	200002c0 	.word	0x200002c0
 8000810:	20000bf0 	.word	0x20000bf0

08000814 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000814:	4770      	bx	lr
	...

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	4813      	ldr	r0, [pc, #76]	@ (8000868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800081c:	f7ff fffa 	bl	8000814 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000820:	4812      	ldr	r0, [pc, #72]	@ (800086c <LoopForever+0x6>)
    LDR R1, [R0]
 8000822:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000824:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <LoopForever+0xa>)
    CMP R1, R2
 8000828:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800082a:	d105      	bne.n	8000838 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800082c:	4811      	ldr	r0, [pc, #68]	@ (8000874 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800082e:	4912      	ldr	r1, [pc, #72]	@ (8000878 <LoopForever+0x12>)
    STR R1, [R0]
 8000830:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000832:	4812      	ldr	r0, [pc, #72]	@ (800087c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000834:	4912      	ldr	r1, [pc, #72]	@ (8000880 <LoopForever+0x1a>)
    STR R1, [R0]
 8000836:	6001      	str	r1, [r0, #0]

08000838 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	4812      	ldr	r0, [pc, #72]	@ (8000884 <LoopForever+0x1e>)
  ldr r1, =_edata
 800083a:	4913      	ldr	r1, [pc, #76]	@ (8000888 <LoopForever+0x22>)
  ldr r2, =_sidata
 800083c:	4a13      	ldr	r2, [pc, #76]	@ (800088c <LoopForever+0x26>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000850:	4c10      	ldr	r4, [pc, #64]	@ (8000894 <LoopForever+0x2e>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800085e:	f003 fc7f 	bl	8004160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000862:	f7ff feb9 	bl	80005d8 <main>

08000866 <LoopForever>:

LoopForever:
    b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   r0, =_estack
 8000868:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800086c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000870:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000874:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000878:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800087c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000880:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800088c:	08004d38 	.word	0x08004d38
  ldr r2, =_sbss
 8000890:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000894:	20000bec 	.word	0x20000bec

08000898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_IRQHandler>
	...

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	20fa      	movs	r0, #250	@ 0xfa
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <HAL_InitTick+0x3c>)
 80008a4:	0080      	lsls	r0, r0, #2
 80008a6:	7819      	ldrb	r1, [r3, #0]
 80008a8:	f7ff fc54 	bl	8000154 <__udivsi3>
 80008ac:	4c0b      	ldr	r4, [pc, #44]	@ (80008dc <HAL_InitTick+0x40>)
 80008ae:	0001      	movs	r1, r0
 80008b0:	6820      	ldr	r0, [r4, #0]
 80008b2:	f7ff fc4f 	bl	8000154 <__udivsi3>
 80008b6:	f000 f88d 	bl	80009d4 <HAL_SYSTICK_Config>
 80008ba:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80008bc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008be:	2c00      	cmp	r4, #0
 80008c0:	d109      	bne.n	80008d6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	2d03      	cmp	r5, #3
 80008c4:	d807      	bhi.n	80008d6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c6:	3802      	subs	r0, #2
 80008c8:	0022      	movs	r2, r4
 80008ca:	0029      	movs	r1, r5
 80008cc:	f000 f83e 	bl	800094c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	0020      	movs	r0, r4
 80008d2:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <HAL_InitTick+0x44>)
 80008d4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	20000004 	.word	0x20000004
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008

080008e4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	2310      	movs	r3, #16
 80008e6:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_Init+0x1c>)
{
 80008e8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ea:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ec:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	f7ff ffd3 	bl	800089c <HAL_InitTick>
  HAL_MspInit();
 80008f6:	f7ff fef9 	bl	80006ec <HAL_MspInit>
}
 80008fa:	2000      	movs	r0, #0
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000904:	4a03      	ldr	r2, [pc, #12]	@ (8000914 <HAL_IncTick+0x10>)
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <HAL_IncTick+0x14>)
 8000908:	6811      	ldr	r1, [r2, #0]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	185b      	adds	r3, r3, r1
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	4770      	bx	lr
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	200002c4 	.word	0x200002c4
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800091c:	4b01      	ldr	r3, [pc, #4]	@ (8000924 <HAL_GetTick+0x8>)
 800091e:	6818      	ldr	r0, [r3, #0]
}
 8000920:	4770      	bx	lr
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	200002c4 	.word	0x200002c4

08000928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fff6 	bl	800091c <HAL_GetTick>
 8000930:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000932:	1c63      	adds	r3, r4, #1
 8000934:	d002      	beq.n	800093c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <HAL_Delay+0x20>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800093c:	f7ff ffee 	bl	800091c <HAL_GetTick>
 8000940:	1b40      	subs	r0, r0, r5
 8000942:	42a0      	cmp	r0, r4
 8000944:	d3fa      	bcc.n	800093c <HAL_Delay+0x14>
  {
  }
}
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094e:	24ff      	movs	r4, #255	@ 0xff
 8000950:	2203      	movs	r2, #3
 8000952:	000b      	movs	r3, r1
 8000954:	0021      	movs	r1, r4
 8000956:	4002      	ands	r2, r0
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095c:	019b      	lsls	r3, r3, #6
 800095e:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000962:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000964:	2800      	cmp	r0, #0
 8000966:	db0a      	blt.n	800097e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000968:	24c0      	movs	r4, #192	@ 0xc0
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <HAL_NVIC_SetPriority+0x4c>)
 800096c:	0880      	lsrs	r0, r0, #2
 800096e:	0080      	lsls	r0, r0, #2
 8000970:	1880      	adds	r0, r0, r2
 8000972:	00a4      	lsls	r4, r4, #2
 8000974:	5902      	ldr	r2, [r0, r4]
 8000976:	400a      	ands	r2, r1
 8000978:	4313      	orrs	r3, r2
 800097a:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800097c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097e:	220f      	movs	r2, #15
 8000980:	4010      	ands	r0, r2
 8000982:	3808      	subs	r0, #8
 8000984:	4a05      	ldr	r2, [pc, #20]	@ (800099c <HAL_NVIC_SetPriority+0x50>)
 8000986:	0880      	lsrs	r0, r0, #2
 8000988:	0080      	lsls	r0, r0, #2
 800098a:	1880      	adds	r0, r0, r2
 800098c:	69c2      	ldr	r2, [r0, #28]
 800098e:	4011      	ands	r1, r2
 8000990:	4319      	orrs	r1, r3
 8000992:	61c1      	str	r1, [r0, #28]
 8000994:	e7f2      	b.n	800097c <HAL_NVIC_SetPriority+0x30>
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009a0:	2800      	cmp	r0, #0
 80009a2:	db05      	blt.n	80009b0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a4:	231f      	movs	r3, #31
 80009a6:	4018      	ands	r0, r3
 80009a8:	3b1e      	subs	r3, #30
 80009aa:	4083      	lsls	r3, r0
 80009ac:	4a01      	ldr	r2, [pc, #4]	@ (80009b4 <HAL_NVIC_EnableIRQ+0x14>)
 80009ae:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009b0:	4770      	bx	lr
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009b8:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <HAL_NVIC_SystemReset+0x14>)
 80009be:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <HAL_NVIC_SystemReset+0x18>)
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009c6:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80009c8:	e7fd      	b.n	80009c6 <HAL_NVIC_SystemReset+0xe>
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	05fa0004 	.word	0x05fa0004

080009d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	1e43      	subs	r3, r0, #1
 80009d8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80009da:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d20d      	bcs.n	80009fc <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a07      	ldr	r2, [pc, #28]	@ (8000a00 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	6a03      	ldr	r3, [r0, #32]
 80009ea:	0609      	lsls	r1, r1, #24
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009fc:	4770      	bx	lr
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	e000e010 	.word	0xe000e010
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a08:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <FLASH_SetErrorCode+0x34>)
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	68d0      	ldr	r0, [r2, #12]
{
 8000a0e:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a10:	0003      	movs	r3, r0
 8000a12:	400b      	ands	r3, r1
 8000a14:	4208      	tst	r0, r1
 8000a16:	d005      	beq.n	8000a24 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <FLASH_SetErrorCode+0x38>)
 8000a1c:	69c4      	ldr	r4, [r0, #28]
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000a22:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a24:	2004      	movs	r0, #4
 8000a26:	68d1      	ldr	r1, [r2, #12]
 8000a28:	4201      	tst	r1, r0
 8000a2a:	d005      	beq.n	8000a38 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4c04      	ldr	r4, [pc, #16]	@ (8000a40 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8000a30:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a32:	69e5      	ldr	r5, [r4, #28]
 8000a34:	4329      	orrs	r1, r5
 8000a36:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a38:	60d3      	str	r3, [r2, #12]
}  
 8000a3a:	bd30      	pop	{r4, r5, pc}
 8000a3c:	40022000 	.word	0x40022000
 8000a40:	200002c8 	.word	0x200002c8

08000a44 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8000a46:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	0612      	lsls	r2, r2, #24
 8000a4c:	d506      	bpl.n	8000a5c <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <HAL_FLASH_Unlock+0x20>)
 8000a50:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <HAL_FLASH_Unlock+0x24>)
 8000a54:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a56:	6918      	ldr	r0, [r3, #16]
 8000a58:	0600      	lsls	r0, r0, #24
 8000a5a:	0fc0      	lsrs	r0, r0, #31
}
 8000a5c:	4770      	bx	lr
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	40022000 	.word	0x40022000
 8000a64:	45670123 	.word	0x45670123
 8000a68:	cdef89ab 	.word	0xcdef89ab

08000a6c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a6c:	2380      	movs	r3, #128	@ 0x80
 8000a6e:	4a03      	ldr	r2, [pc, #12]	@ (8000a7c <HAL_FLASH_Lock+0x10>)
}
 8000a70:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a72:	6911      	ldr	r1, [r2, #16]
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6113      	str	r3, [r2, #16]
}
 8000a78:	4770      	bx	lr
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	40022000 	.word	0x40022000

08000a80 <FLASH_WaitForLastOperation>:
{
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ff4a 	bl	800091c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a88:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8000a8a:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <FLASH_WaitForLastOperation+0x50>)
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	4232      	tst	r2, r6
 8000a92:	d111      	bne.n	8000ab8 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a94:	2220      	movs	r2, #32
 8000a96:	68d9      	ldr	r1, [r3, #12]
 8000a98:	4211      	tst	r1, r2
 8000a9a:	d000      	beq.n	8000a9e <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a9c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a9e:	68d9      	ldr	r1, [r3, #12]
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	0008      	movs	r0, r1
 8000aa4:	4010      	ands	r0, r2
 8000aa6:	4211      	tst	r1, r2
 8000aa8:	d102      	bne.n	8000ab0 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000aaa:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000aac:	075b      	lsls	r3, r3, #29
 8000aae:	d508      	bpl.n	8000ac2 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8000ab0:	f7ff ffaa 	bl	8000a08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	e004      	b.n	8000ac2 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8000ab8:	1c62      	adds	r2, r4, #1
 8000aba:	d0e8      	beq.n	8000a8e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000abc:	2c00      	cmp	r4, #0
 8000abe:	d101      	bne.n	8000ac4 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000ac0:	2003      	movs	r0, #3
}
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ac4:	f7ff ff2a 	bl	800091c <HAL_GetTick>
 8000ac8:	1b40      	subs	r0, r0, r5
 8000aca:	42a0      	cmp	r0, r4
 8000acc:	d9de      	bls.n	8000a8c <FLASH_WaitForLastOperation+0xc>
 8000ace:	e7f7      	b.n	8000ac0 <FLASH_WaitForLastOperation+0x40>
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_FLASH_Program>:
{
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <HAL_FLASH_Program+0x80>)
{
 8000adc:	9100      	str	r1, [sp, #0]
 8000ade:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 8000ae0:	7e1a      	ldrb	r2, [r3, #24]
{
 8000ae2:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	2a01      	cmp	r2, #1
 8000ae8:	d031      	beq.n	8000b4e <HAL_FLASH_Program+0x7a>
 8000aea:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000aec:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <HAL_FLASH_Program+0x84>)
  __HAL_LOCK(&pFlash);
 8000aee:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000af0:	f7ff ffc6 	bl	8000a80 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d127      	bne.n	8000b48 <HAL_FLASH_Program+0x74>
      nbiterations = 1U;
 8000af8:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000afa:	2c01      	cmp	r4, #1
 8000afc:	d003      	beq.n	8000b06 <HAL_FLASH_Program+0x32>
      nbiterations = 4U;
 8000afe:	2604      	movs	r6, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b00:	2c02      	cmp	r4, #2
 8000b02:	d100      	bne.n	8000b06 <HAL_FLASH_Program+0x32>
      nbiterations = 2U;
 8000b04:	0026      	movs	r6, r4
      nbiterations = 4U;
 8000b06:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_FLASH_Program+0x80>)
 8000b0a:	9301      	str	r3, [sp, #4]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b0c:	9802      	ldr	r0, [sp, #8]
 8000b0e:	9903      	ldr	r1, [sp, #12]
 8000b10:	0122      	lsls	r2, r4, #4
 8000b12:	f7ff fc95 	bl	8000440 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b16:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b18:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b1a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b1c:	4d0f      	ldr	r5, [pc, #60]	@ (8000b5c <HAL_FLASH_Program+0x88>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b1e:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b20:	692b      	ldr	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8000b22:	9a00      	ldr	r2, [sp, #0]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b24:	433b      	orrs	r3, r7
 8000b26:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8000b28:	0063      	lsls	r3, r4, #1
 8000b2a:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b2c:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 8000b2e:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <HAL_FLASH_Program+0x84>)
 8000b32:	f7ff ffa5 	bl	8000a80 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b36:	692b      	ldr	r3, [r5, #16]
 8000b38:	43bb      	bics	r3, r7
 8000b3a:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d103      	bne.n	8000b48 <HAL_FLASH_Program+0x74>
    for (index = 0U; index < nbiterations; index++)
 8000b40:	19e4      	adds	r4, r4, r7
 8000b42:	b2e3      	uxtb	r3, r4
 8000b44:	429e      	cmp	r6, r3
 8000b46:	d8e1      	bhi.n	8000b0c <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4b02      	ldr	r3, [pc, #8]	@ (8000b54 <HAL_FLASH_Program+0x80>)
 8000b4c:	761a      	strb	r2, [r3, #24]
}
 8000b4e:	b005      	add	sp, #20
 8000b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	200002c8 	.word	0x200002c8
 8000b58:	0000c350 	.word	0x0000c350
 8000b5c:	40022000 	.word	0x40022000

08000b60 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b60:	2200      	movs	r2, #0
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <FLASH_MassErase+0x1c>)
 8000b64:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <FLASH_MassErase+0x20>)
 8000b68:	3204      	adds	r2, #4
 8000b6a:	6919      	ldr	r1, [r3, #16]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b70:	2240      	movs	r2, #64	@ 0x40
 8000b72:	6919      	ldr	r1, [r3, #16]
 8000b74:	430a      	orrs	r2, r1
 8000b76:	611a      	str	r2, [r3, #16]
}
 8000b78:	4770      	bx	lr
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	200002c8 	.word	0x200002c8
 8000b80:	40022000 	.word	0x40022000

08000b84 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b84:	2200      	movs	r2, #0
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <FLASH_PageErase+0x1c>)
 8000b88:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <FLASH_PageErase+0x20>)
 8000b8c:	3202      	adds	r2, #2
 8000b8e:	6919      	ldr	r1, [r3, #16]
 8000b90:	430a      	orrs	r2, r1
 8000b92:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b94:	2240      	movs	r2, #64	@ 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8000b96:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000b98:	6919      	ldr	r1, [r3, #16]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	611a      	str	r2, [r3, #16]
}
 8000b9e:	4770      	bx	lr
 8000ba0:	200002c8 	.word	0x200002c8
 8000ba4:	40022000 	.word	0x40022000

08000ba8 <HAL_FLASHEx_Erase>:
{
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000baa:	4f21      	ldr	r7, [pc, #132]	@ (8000c30 <HAL_FLASHEx_Erase+0x88>)
{
 8000bac:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8000bae:	7e3b      	ldrb	r3, [r7, #24]
{
 8000bb0:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d00c      	beq.n	8000bd2 <HAL_FLASHEx_Erase+0x2a>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bbc:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bbe:	481d      	ldr	r0, [pc, #116]	@ (8000c34 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d112      	bne.n	8000bea <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bc4:	f7ff ff5c 	bl	8000a80 <FLASH_WaitForLastOperation>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bcc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	763b      	strb	r3, [r7, #24]
}
 8000bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8000bd4:	f7ff ffc4 	bl	8000b60 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bd8:	4816      	ldr	r0, [pc, #88]	@ (8000c34 <HAL_FLASHEx_Erase+0x8c>)
 8000bda:	f7ff ff51 	bl	8000a80 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000bde:	2104      	movs	r1, #4
 8000be0:	4a15      	ldr	r2, [pc, #84]	@ (8000c38 <HAL_FLASHEx_Erase+0x90>)
 8000be2:	6913      	ldr	r3, [r2, #16]
 8000be4:	438b      	bics	r3, r1
 8000be6:	6113      	str	r3, [r2, #16]
 8000be8:	e7f1      	b.n	8000bce <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000bea:	f7ff ff49 	bl	8000a80 <FLASH_WaitForLastOperation>
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d1ec      	bne.n	8000bcc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000bf8:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bfa:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000bfc:	68a3      	ldr	r3, [r4, #8]
 8000bfe:	6862      	ldr	r2, [r4, #4]
 8000c00:	029b      	lsls	r3, r3, #10
 8000c02:	189b      	adds	r3, r3, r2
 8000c04:	42ab      	cmp	r3, r5
 8000c06:	d9e2      	bls.n	8000bce <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000c08:	0028      	movs	r0, r5
 8000c0a:	f7ff ffbb 	bl	8000b84 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c0e:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <HAL_FLASHEx_Erase+0x8c>)
 8000c10:	f7ff ff36 	bl	8000a80 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c14:	2102      	movs	r1, #2
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_FLASHEx_Erase+0x90>)
 8000c18:	6913      	ldr	r3, [r2, #16]
 8000c1a:	438b      	bics	r3, r1
 8000c1c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8000c22:	6035      	str	r5, [r6, #0]
            break;
 8000c24:	e7d3      	b.n	8000bce <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	18ed      	adds	r5, r5, r3
 8000c2c:	e7e6      	b.n	8000bfc <HAL_FLASHEx_Erase+0x54>
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	200002c8 	.word	0x200002c8
 8000c34:	0000c350 	.word	0x0000c350
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000c3c:	2300      	movs	r3, #0
{
 8000c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c40:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c42:	680a      	ldr	r2, [r1, #0]
 8000c44:	0014      	movs	r4, r2
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	d101      	bne.n	8000c4e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000c4a:	b007      	add	sp, #28
 8000c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c4e:	2501      	movs	r5, #1
 8000c50:	0014      	movs	r4, r2
 8000c52:	409d      	lsls	r5, r3
 8000c54:	402c      	ands	r4, r5
 8000c56:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000c58:	422a      	tst	r2, r5
 8000c5a:	d100      	bne.n	8000c5e <HAL_GPIO_Init+0x22>
 8000c5c:	e094      	b.n	8000d88 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c5e:	684a      	ldr	r2, [r1, #4]
 8000c60:	005f      	lsls	r7, r3, #1
 8000c62:	4694      	mov	ip, r2
 8000c64:	2203      	movs	r2, #3
 8000c66:	4664      	mov	r4, ip
 8000c68:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c6a:	2403      	movs	r4, #3
 8000c6c:	40bc      	lsls	r4, r7
 8000c6e:	43e4      	mvns	r4, r4
 8000c70:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c72:	1e54      	subs	r4, r2, #1
 8000c74:	2c01      	cmp	r4, #1
 8000c76:	d82e      	bhi.n	8000cd6 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000c78:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c7a:	9c01      	ldr	r4, [sp, #4]
 8000c7c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c7e:	68cc      	ldr	r4, [r1, #12]
 8000c80:	40bc      	lsls	r4, r7
 8000c82:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c84:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c86:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c88:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8a:	43ac      	bics	r4, r5
 8000c8c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8e:	4664      	mov	r4, ip
 8000c90:	0924      	lsrs	r4, r4, #4
 8000c92:	4034      	ands	r4, r6
 8000c94:	409c      	lsls	r4, r3
 8000c96:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000c98:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c9a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c9c:	9c01      	ldr	r4, [sp, #4]
 8000c9e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca0:	688c      	ldr	r4, [r1, #8]
 8000ca2:	40bc      	lsls	r4, r7
 8000ca4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000ca6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca8:	2a02      	cmp	r2, #2
 8000caa:	d116      	bne.n	8000cda <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cac:	2507      	movs	r5, #7
 8000cae:	260f      	movs	r6, #15
 8000cb0:	401d      	ands	r5, r3
 8000cb2:	00ad      	lsls	r5, r5, #2
 8000cb4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000cb6:	08dc      	lsrs	r4, r3, #3
 8000cb8:	00a4      	lsls	r4, r4, #2
 8000cba:	1904      	adds	r4, r0, r4
 8000cbc:	9402      	str	r4, [sp, #8]
 8000cbe:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc0:	9603      	str	r6, [sp, #12]
 8000cc2:	0026      	movs	r6, r4
 8000cc4:	9c03      	ldr	r4, [sp, #12]
 8000cc6:	43a6      	bics	r6, r4
 8000cc8:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cca:	690e      	ldr	r6, [r1, #16]
 8000ccc:	40ae      	lsls	r6, r5
 8000cce:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000cd0:	9c02      	ldr	r4, [sp, #8]
 8000cd2:	6226      	str	r6, [r4, #32]
 8000cd4:	e001      	b.n	8000cda <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd6:	2a03      	cmp	r2, #3
 8000cd8:	d1df      	bne.n	8000c9a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cda:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000cdc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cde:	9d01      	ldr	r5, [sp, #4]
 8000ce0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce2:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce4:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000ce6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce8:	4662      	mov	r2, ip
 8000cea:	02a4      	lsls	r4, r4, #10
 8000cec:	4222      	tst	r2, r4
 8000cee:	d04b      	beq.n	8000d88 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	2501      	movs	r5, #1
 8000cf2:	4a26      	ldr	r2, [pc, #152]	@ (8000d8c <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf4:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	432c      	orrs	r4, r5
 8000cfc:	6194      	str	r4, [r2, #24]
 8000cfe:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d00:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	402a      	ands	r2, r5
 8000d04:	9205      	str	r2, [sp, #20]
 8000d06:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d08:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <HAL_GPIO_Init+0x154>)
 8000d0a:	00a4      	lsls	r4, r4, #2
 8000d0c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0e:	220f      	movs	r2, #15
 8000d10:	3502      	adds	r5, #2
 8000d12:	401d      	ands	r5, r3
 8000d14:	00ad      	lsls	r5, r5, #2
 8000d16:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d18:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d1a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	42b8      	cmp	r0, r7
 8000d20:	d008      	beq.n	8000d34 <HAL_GPIO_Init+0xf8>
 8000d22:	4f1c      	ldr	r7, [pc, #112]	@ (8000d94 <HAL_GPIO_Init+0x158>)
 8000d24:	3201      	adds	r2, #1
 8000d26:	42b8      	cmp	r0, r7
 8000d28:	d004      	beq.n	8000d34 <HAL_GPIO_Init+0xf8>
 8000d2a:	4f1b      	ldr	r7, [pc, #108]	@ (8000d98 <HAL_GPIO_Init+0x15c>)
 8000d2c:	3204      	adds	r2, #4
 8000d2e:	42b8      	cmp	r0, r7
 8000d30:	d100      	bne.n	8000d34 <HAL_GPIO_Init+0xf8>
 8000d32:	3a03      	subs	r2, #3
 8000d34:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d36:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d38:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000d3c:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8000d3e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000d40:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000d42:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000d44:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000d46:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d48:	02ff      	lsls	r7, r7, #11
 8000d4a:	d401      	bmi.n	8000d50 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8000d4c:	0035      	movs	r5, r6
 8000d4e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d50:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000d52:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d54:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000d56:	9d00      	ldr	r5, [sp, #0]
 8000d58:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d5a:	02bf      	lsls	r7, r7, #10
 8000d5c:	d401      	bmi.n	8000d62 <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8000d5e:	0035      	movs	r5, r6
 8000d60:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d62:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000d64:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000d66:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000d68:	9d00      	ldr	r5, [sp, #0]
 8000d6a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d6c:	03bf      	lsls	r7, r7, #14
 8000d6e:	d401      	bmi.n	8000d74 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000d70:	0035      	movs	r5, r6
 8000d72:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d74:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000d76:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000d78:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000d7a:	9e00      	ldr	r6, [sp, #0]
 8000d7c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d7e:	03ff      	lsls	r7, r7, #15
 8000d80:	d401      	bmi.n	8000d86 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8000d82:	4025      	ands	r5, r4
 8000d84:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000d86:	6016      	str	r6, [r2, #0]
    position++;
 8000d88:	3301      	adds	r3, #1
 8000d8a:	e75a      	b.n	8000c42 <HAL_GPIO_Init+0x6>
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000
 8000d94:	48000400 	.word	0x48000400
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	d02b      	beq.n	8000e02 <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000daa:	4d22      	ldr	r5, [pc, #136]	@ (8000e34 <HAL_PCD_Init+0x94>)
 8000dac:	5d63      	ldrb	r3, [r4, r5]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d105      	bne.n	8000dc0 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000db4:	23a4      	movs	r3, #164	@ 0xa4
 8000db6:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000db8:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8000dba:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 8000dbc:	f002 fe44 	bl	8003a48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	f001 fc7f 	bl	80026c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	0022      	movs	r2, r4
 8000dce:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dd0:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd2:	7920      	ldrb	r0, [r4, #4]
 8000dd4:	3210      	adds	r2, #16
 8000dd6:	4298      	cmp	r0, r3
 8000dd8:	d114      	bne.n	8000e04 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dde:	0008      	movs	r0, r1
 8000de0:	3251      	adds	r2, #81	@ 0x51
 8000de2:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d117      	bne.n	8000e18 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000de8:	6861      	ldr	r1, [r4, #4]
 8000dea:	68a2      	ldr	r2, [r4, #8]
 8000dec:	6820      	ldr	r0, [r4, #0]
 8000dee:	f001 fc75 	bl	80026dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000df6:	3301      	adds	r3, #1
 8000df8:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dfa:	7aa3      	ldrb	r3, [r4, #10]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d015      	beq.n	8000e2c <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000e00:	2000      	movs	r0, #0
}
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 8000e04:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e06:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 8000e08:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e0a:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e0c:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e0e:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e10:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	3228      	adds	r2, #40	@ 0x28
 8000e16:	e7de      	b.n	8000dd6 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 8000e18:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1a:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8000e1c:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e1e:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e20:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e22:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e24:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e26:	b2c9      	uxtb	r1, r1
 8000e28:	3228      	adds	r2, #40	@ 0x28
 8000e2a:	e7db      	b.n	8000de4 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e2c:	0020      	movs	r0, r4
 8000e2e:	f000 fe06 	bl	8001a3e <HAL_PCDEx_ActivateLPM>
 8000e32:	e7e5      	b.n	8000e00 <HAL_PCD_Init+0x60>
 8000e34:	00000291 	.word	0x00000291

08000e38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000e3a:	25a4      	movs	r5, #164	@ 0xa4
 8000e3c:	00ad      	lsls	r5, r5, #2
 8000e3e:	5d43      	ldrb	r3, [r0, r5]
{
 8000e40:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000e42:	2002      	movs	r0, #2
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d009      	beq.n	8000e5c <HAL_PCD_Start+0x24>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8000e4c:	6820      	ldr	r0, [r4, #0]
 8000e4e:	f001 fc31 	bl	80026b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e52:	6820      	ldr	r0, [r4, #0]
 8000e54:	f001 fe3d 	bl	8002ad2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}

08000e5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000e5e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000e60:	25a4      	movs	r5, #164	@ 0xa4
 8000e62:	00ad      	lsls	r5, r5, #2
 8000e64:	5d43      	ldrb	r3, [r0, r5]
{
 8000e66:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d007      	beq.n	8000e7e <HAL_PCD_SetAddress+0x20>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e72:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8000e74:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e76:	f001 fe25 	bl	8002ac4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}

08000e80 <HAL_PCD_IRQHandler>:
{
 8000e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e82:	0004      	movs	r4, r0
 8000e84:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000e86:	6800      	ldr	r0, [r0, #0]
 8000e88:	f001 fe2b 	bl	8002ae2 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	0005      	movs	r5, r0
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	401d      	ands	r5, r3
 8000e94:	4218      	tst	r0, r3
 8000e96:	d101      	bne.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
 8000e98:	f000 fc27 	bl	80016ea <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	1d82      	adds	r2, r0, #6
 8000ea0:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db01      	blt.n	8000eac <HAL_PCD_IRQHandler+0x2c>
}
 8000ea8:	b005      	add	sp, #20
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000eac:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000eae:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000eb0:	4019      	ands	r1, r3
 8000eb2:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 8000eb4:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000eb6:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8000eb8:	420b      	tst	r3, r1
 8000eba:	d000      	beq.n	8000ebe <HAL_PCD_IRQHandler+0x3e>
 8000ebc:	e0c0      	b.n	8001040 <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	421a      	tst	r2, r3
 8000ec6:	d127      	bne.n	8000f18 <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ec8:	8803      	ldrh	r3, [r0, #0]
 8000eca:	4aca      	ldr	r2, [pc, #808]	@ (80011f4 <HAL_PCD_IRQHandler+0x374>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	0212      	lsls	r2, r2, #8
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	3350      	adds	r3, #80	@ 0x50
 8000eda:	881a      	ldrh	r2, [r3, #0]
 8000edc:	7c23      	ldrb	r3, [r4, #16]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	18c3      	adds	r3, r0, r3
 8000ee2:	189b      	adds	r3, r3, r2
 8000ee4:	4ac4      	ldr	r2, [pc, #784]	@ (80011f8 <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000ee6:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ee8:	189b      	adds	r3, r3, r2
 8000eea:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8000eec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eee:	059b      	lsls	r3, r3, #22
 8000ef0:	0d9b      	lsrs	r3, r3, #22
 8000ef2:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000ef8:	f002 fdd7 	bl	8003aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000efc:	7b23      	ldrb	r3, [r4, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0cc      	beq.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
 8000f02:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f04:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d1c8      	bne.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f0a:	2080      	movs	r0, #128	@ 0x80
 8000f0c:	7b22      	ldrb	r2, [r4, #12]
 8000f0e:	334c      	adds	r3, #76	@ 0x4c
 8000f10:	4302      	orrs	r2, r0
 8000f12:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 8000f14:	7321      	strb	r1, [r4, #12]
 8000f16:	e7c1      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f18:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f1a:	2180      	movs	r1, #128	@ 0x80
 8000f1c:	0016      	movs	r6, r2
 8000f1e:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f20:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f22:	400e      	ands	r6, r1
 8000f24:	420a      	tst	r2, r1
 8000f26:	d022      	beq.n	8000f6e <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f28:	0003      	movs	r3, r0
 8000f2a:	3350      	adds	r3, #80	@ 0x50
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	23a8      	movs	r3, #168	@ 0xa8
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f34:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	18c3      	adds	r3, r0, r3
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	4aaf      	ldr	r2, [pc, #700]	@ (80011fc <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f3e:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	0022      	movs	r2, r4
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	3251      	adds	r2, #81	@ 0x51
 8000f48:	059b      	lsls	r3, r3, #22
 8000f4a:	0d9b      	lsrs	r3, r3, #22
 8000f4c:	32ff      	adds	r2, #255	@ 0xff
 8000f4e:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f50:	1861      	adds	r1, r4, r1
 8000f52:	88d2      	ldrh	r2, [r2, #6]
 8000f54:	f002 f810 	bl	8002f78 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f58:	6821      	ldr	r1, [r4, #0]
 8000f5a:	4ba9      	ldr	r3, [pc, #676]	@ (8001200 <HAL_PCD_IRQHandler+0x380>)
 8000f5c:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000f5e:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f60:	401a      	ands	r2, r3
 8000f62:	2380      	movs	r3, #128	@ 0x80
 8000f64:	4313      	orrs	r3, r2
 8000f66:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000f68:	f002 fd8a 	bl	8003a80 <HAL_PCD_SetupStageCallback>
 8000f6c:	e796      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db00      	blt.n	8000f76 <HAL_PCD_IRQHandler+0xf6>
 8000f74:	e792      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f76:	8802      	ldrh	r2, [r0, #0]
 8000f78:	4ba1      	ldr	r3, [pc, #644]	@ (8001200 <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f7a:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	4313      	orrs	r3, r2
 8000f82:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f84:	0003      	movs	r3, r0
 8000f86:	3350      	adds	r3, #80	@ 0x50
 8000f88:	881a      	ldrh	r2, [r3, #0]
 8000f8a:	23a8      	movs	r3, #168	@ 0xa8
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	5ce3      	ldrb	r3, [r4, r3]
 8000f90:	3551      	adds	r5, #81	@ 0x51
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	18c3      	adds	r3, r0, r3
 8000f96:	189b      	adds	r3, r3, r2
 8000f98:	4a98      	ldr	r2, [pc, #608]	@ (80011fc <HAL_PCD_IRQHandler+0x37c>)
 8000f9a:	35ff      	adds	r5, #255	@ 0xff
 8000f9c:	189b      	adds	r3, r3, r2
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	059b      	lsls	r3, r3, #22
 8000fa2:	0d9b      	lsrs	r3, r3, #22
 8000fa4:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000fa6:	d00d      	beq.n	8000fc4 <HAL_PCD_IRQHandler+0x144>
 8000fa8:	6969      	ldr	r1, [r5, #20]
 8000faa:	2900      	cmp	r1, #0
 8000fac:	d00a      	beq.n	8000fc4 <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000fae:	88ea      	ldrh	r2, [r5, #6]
 8000fb0:	f001 ffe2 	bl	8002f78 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000fb4:	696b      	ldr	r3, [r5, #20]
 8000fb6:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000fb8:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8000fba:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000fbc:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000fbe:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000fc0:	f002 fd67 	bl	8003a92 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000fc4:	6821      	ldr	r1, [r4, #0]
 8000fc6:	880a      	ldrh	r2, [r1, #0]
 8000fc8:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000fca:	0512      	lsls	r2, r2, #20
 8000fcc:	d500      	bpl.n	8000fd0 <HAL_PCD_IRQHandler+0x150>
 8000fce:	e765      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
 8000fd0:	22c0      	movs	r2, #192	@ 0xc0
 8000fd2:	0192      	lsls	r2, r2, #6
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d100      	bne.n	8000fdc <HAL_PCD_IRQHandler+0x15c>
 8000fda:	e75f      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000fdc:	000b      	movs	r3, r1
 8000fde:	4a87      	ldr	r2, [pc, #540]	@ (80011fc <HAL_PCD_IRQHandler+0x37c>)
 8000fe0:	3350      	adds	r3, #80	@ 0x50
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	188a      	adds	r2, r1, r2
 8000fe6:	18d2      	adds	r2, r2, r3
 8000fe8:	8813      	ldrh	r3, [r2, #0]
 8000fea:	059b      	lsls	r3, r3, #22
 8000fec:	0d9b      	lsrs	r3, r3, #22
 8000fee:	8013      	strh	r3, [r2, #0]
 8000ff0:	692b      	ldr	r3, [r5, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10e      	bne.n	8001014 <HAL_PCD_IRQHandler+0x194>
 8000ff6:	2080      	movs	r0, #128	@ 0x80
 8000ff8:	8813      	ldrh	r3, [r2, #0]
 8000ffa:	0200      	lsls	r0, r0, #8
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001000:	880a      	ldrh	r2, [r1, #0]
 8001002:	4b80      	ldr	r3, [pc, #512]	@ (8001204 <HAL_PCD_IRQHandler+0x384>)
 8001004:	401a      	ands	r2, r3
 8001006:	23c0      	movs	r3, #192	@ 0xc0
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	4053      	eors	r3, r2
 800100c:	4a7e      	ldr	r2, [pc, #504]	@ (8001208 <HAL_PCD_IRQHandler+0x388>)
 800100e:	4313      	orrs	r3, r2
 8001010:	800b      	strh	r3, [r1, #0]
 8001012:	e743      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001014:	2b3e      	cmp	r3, #62	@ 0x3e
 8001016:	d808      	bhi.n	800102a <HAL_PCD_IRQHandler+0x1aa>
 8001018:	2501      	movs	r5, #1
 800101a:	0858      	lsrs	r0, r3, #1
 800101c:	402b      	ands	r3, r5
 800101e:	18c0      	adds	r0, r0, r3
 8001020:	8813      	ldrh	r3, [r2, #0]
 8001022:	0280      	lsls	r0, r0, #10
 8001024:	4303      	orrs	r3, r0
 8001026:	b29b      	uxth	r3, r3
 8001028:	e7e9      	b.n	8000ffe <HAL_PCD_IRQHandler+0x17e>
 800102a:	251f      	movs	r5, #31
 800102c:	0958      	lsrs	r0, r3, #5
 800102e:	402b      	ands	r3, r5
 8001030:	425d      	negs	r5, r3
 8001032:	416b      	adcs	r3, r5
 8001034:	1ac0      	subs	r0, r0, r3
 8001036:	8813      	ldrh	r3, [r2, #0]
 8001038:	0280      	lsls	r0, r0, #10
 800103a:	4318      	orrs	r0, r3
 800103c:	4b73      	ldr	r3, [pc, #460]	@ (800120c <HAL_PCD_IRQHandler+0x38c>)
 800103e:	e7f1      	b.n	8001024 <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001040:	9b00      	ldr	r3, [sp, #0]
 8001042:	009f      	lsls	r7, r3, #2
 8001044:	19c2      	adds	r2, r0, r7
 8001046:	8813      	ldrh	r3, [r2, #0]
 8001048:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800104a:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800104c:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800104e:	2b00      	cmp	r3, #0
 8001050:	db00      	blt.n	8001054 <HAL_PCD_IRQHandler+0x1d4>
 8001052:	e092      	b.n	800117a <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001054:	8813      	ldrh	r3, [r2, #0]
 8001056:	496a      	ldr	r1, [pc, #424]	@ (8001200 <HAL_PCD_IRQHandler+0x380>)
 8001058:	400b      	ands	r3, r1
 800105a:	2180      	movs	r1, #128	@ 0x80
 800105c:	430b      	orrs	r3, r1
 800105e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001060:	2328      	movs	r3, #40	@ 0x28
 8001062:	9a00      	ldr	r2, [sp, #0]
 8001064:	4353      	muls	r3, r2
 8001066:	18e3      	adds	r3, r4, r3
 8001068:	001a      	movs	r2, r3
 800106a:	001d      	movs	r5, r3
 800106c:	325d      	adds	r2, #93	@ 0x5d
 800106e:	32ff      	adds	r2, #255	@ 0xff
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	3551      	adds	r5, #81	@ 0x51
 8001074:	35ff      	adds	r5, #255	@ 0xff
 8001076:	2a00      	cmp	r2, #0
 8001078:	d114      	bne.n	80010a4 <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800107a:	0002      	movs	r2, r0
 800107c:	3250      	adds	r2, #80	@ 0x50
 800107e:	8811      	ldrh	r1, [r2, #0]
 8001080:	782a      	ldrb	r2, [r5, #0]
 8001082:	00d2      	lsls	r2, r2, #3
 8001084:	1852      	adds	r2, r2, r1
 8001086:	495d      	ldr	r1, [pc, #372]	@ (80011fc <HAL_PCD_IRQHandler+0x37c>)
 8001088:	1812      	adds	r2, r2, r0
 800108a:	1852      	adds	r2, r2, r1
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	0592      	lsls	r2, r2, #22
 8001090:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 8001092:	2a00      	cmp	r2, #0
 8001094:	d056      	beq.n	8001144 <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001096:	001a      	movs	r2, r3
 8001098:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800109a:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800109c:	33fc      	adds	r3, #252	@ 0xfc
 800109e:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010a0:	8812      	ldrh	r2, [r2, #0]
 80010a2:	e04b      	b.n	800113c <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 80010a4:	0019      	movs	r1, r3
 80010a6:	3154      	adds	r1, #84	@ 0x54
 80010a8:	31ff      	adds	r1, #255	@ 0xff
 80010aa:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010ac:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 80010ae:	2902      	cmp	r1, #2
 80010b0:	d000      	beq.n	80010b4 <HAL_PCD_IRQHandler+0x234>
 80010b2:	e0e3      	b.n	800127c <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80010b4:	2680      	movs	r6, #128	@ 0x80
 80010b6:	01f6      	lsls	r6, r6, #7
 80010b8:	46b4      	mov	ip, r6
 80010ba:	4665      	mov	r5, ip
 80010bc:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 80010be:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80010c0:	402e      	ands	r6, r5
 80010c2:	9603      	str	r6, [sp, #12]
 80010c4:	0006      	movs	r6, r0
 80010c6:	3650      	adds	r6, #80	@ 0x50
 80010c8:	9602      	str	r6, [sp, #8]
 80010ca:	4666      	mov	r6, ip
 80010cc:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 80010ce:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80010d0:	4235      	tst	r5, r6
 80010d2:	d100      	bne.n	80010d6 <HAL_PCD_IRQHandler+0x256>
 80010d4:	e0a0      	b.n	8001218 <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010d6:	9d02      	ldr	r5, [sp, #8]
 80010d8:	882e      	ldrh	r6, [r5, #0]
 80010da:	00d5      	lsls	r5, r2, #3
 80010dc:	1976      	adds	r6, r6, r5
 80010de:	4d46      	ldr	r5, [pc, #280]	@ (80011f8 <HAL_PCD_IRQHandler+0x378>)
 80010e0:	1836      	adds	r6, r6, r0
 80010e2:	1976      	adds	r6, r6, r5
 80010e4:	8835      	ldrh	r5, [r6, #0]
 80010e6:	05ad      	lsls	r5, r5, #22
 80010e8:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 80010ea:	428d      	cmp	r5, r1
 80010ec:	d90d      	bls.n	800110a <HAL_PCD_IRQHandler+0x28a>
 80010ee:	2100      	movs	r1, #0
 80010f0:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80010f2:	0091      	lsls	r1, r2, #2
 80010f4:	1841      	adds	r1, r0, r1
 80010f6:	880e      	ldrh	r6, [r1, #0]
 80010f8:	4b42      	ldr	r3, [pc, #264]	@ (8001204 <HAL_PCD_IRQHandler+0x384>)
 80010fa:	401e      	ands	r6, r3
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	019b      	lsls	r3, r3, #6
 8001100:	4073      	eors	r3, r6
 8001102:	4e41      	ldr	r6, [pc, #260]	@ (8001208 <HAL_PCD_IRQHandler+0x388>)
 8001104:	4333      	orrs	r3, r6
 8001106:	800b      	strh	r3, [r1, #0]
 8001108:	e002      	b.n	8001110 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 800110a:	1b49      	subs	r1, r1, r5
 800110c:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 800110e:	d0f0      	beq.n	80010f2 <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001110:	9b01      	ldr	r3, [sp, #4]
 8001112:	065b      	lsls	r3, r3, #25
 8001114:	d507      	bpl.n	8001126 <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	1882      	adds	r2, r0, r2
 800111a:	8813      	ldrh	r3, [r2, #0]
 800111c:	493c      	ldr	r1, [pc, #240]	@ (8001210 <HAL_PCD_IRQHandler+0x390>)
 800111e:	400b      	ands	r3, r1
 8001120:	493c      	ldr	r1, [pc, #240]	@ (8001214 <HAL_PCD_IRQHandler+0x394>)
 8001122:	430b      	orrs	r3, r1
 8001124:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001126:	2d00      	cmp	r5, #0
 8001128:	d00c      	beq.n	8001144 <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800112a:	2328      	movs	r3, #40	@ 0x28
 800112c:	9a00      	ldr	r2, [sp, #0]
 800112e:	4353      	muls	r3, r2
 8001130:	18e1      	adds	r1, r4, r3
 8001132:	000a      	movs	r2, r1
 8001134:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001136:	32ff      	adds	r2, #255	@ 0xff
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800113c:	002b      	movs	r3, r5
 800113e:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001140:	f001 ff1a 	bl	8002f78 <USB_ReadPMA>
        ep->xfer_count += count;
 8001144:	2328      	movs	r3, #40	@ 0x28
 8001146:	9900      	ldr	r1, [sp, #0]
 8001148:	4359      	muls	r1, r3
 800114a:	1862      	adds	r2, r4, r1
 800114c:	32fc      	adds	r2, #252	@ 0xfc
 800114e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8001150:	1940      	adds	r0, r0, r5
 8001152:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 8001154:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001156:	1940      	adds	r0, r0, r5
 8001158:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800115a:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800115c:	2800      	cmp	r0, #0
 800115e:	d003      	beq.n	8001168 <HAL_PCD_IRQHandler+0x2e8>
 8001160:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001162:	4295      	cmp	r5, r2
 8001164:	d300      	bcc.n	8001168 <HAL_PCD_IRQHandler+0x2e8>
 8001166:	e0b3      	b.n	80012d0 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001168:	9a00      	ldr	r2, [sp, #0]
 800116a:	0020      	movs	r0, r4
 800116c:	4353      	muls	r3, r2
 800116e:	18e3      	adds	r3, r4, r3
 8001170:	3351      	adds	r3, #81	@ 0x51
 8001172:	33ff      	adds	r3, #255	@ 0xff
 8001174:	7819      	ldrb	r1, [r3, #0]
 8001176:	f002 fc8c 	bl	8003a92 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800117a:	2280      	movs	r2, #128	@ 0x80
 800117c:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800117e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001180:	4213      	tst	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_PCD_IRQHandler+0x306>
 8001184:	e68a      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001186:	19c2      	adds	r2, r0, r7
 8001188:	8813      	ldrh	r3, [r2, #0]
 800118a:	491a      	ldr	r1, [pc, #104]	@ (80011f4 <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 800118c:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800118e:	400b      	ands	r3, r1
 8001190:	491e      	ldr	r1, [pc, #120]	@ (800120c <HAL_PCD_IRQHandler+0x38c>)
 8001192:	430b      	orrs	r3, r1
 8001194:	b29b      	uxth	r3, r3
 8001196:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8001198:	2228      	movs	r2, #40	@ 0x28
 800119a:	4356      	muls	r6, r2
 800119c:	19a3      	adds	r3, r4, r6
 800119e:	7cd9      	ldrb	r1, [r3, #19]
 80011a0:	2901      	cmp	r1, #1
 80011a2:	d000      	beq.n	80011a6 <HAL_PCD_IRQHandler+0x326>
 80011a4:	e0c7      	b.n	8001336 <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 80011a6:	9900      	ldr	r1, [sp, #0]
 80011a8:	3101      	adds	r1, #1
 80011aa:	434a      	muls	r2, r1
 80011ac:	2100      	movs	r1, #0
 80011ae:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 80011b0:	7f1a      	ldrb	r2, [r3, #28]
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d100      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x338>
 80011b6:	e09e      	b.n	80012f6 <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011b8:	2240      	movs	r2, #64	@ 0x40
 80011ba:	9d01      	ldr	r5, [sp, #4]
 80011bc:	9e01      	ldr	r6, [sp, #4]
 80011be:	4015      	ands	r5, r2
 80011c0:	4216      	tst	r6, r2
 80011c2:	d100      	bne.n	80011c6 <HAL_PCD_IRQHandler+0x346>
 80011c4:	e0a0      	b.n	8001308 <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011c6:	7c5a      	ldrb	r2, [r3, #17]
 80011c8:	428a      	cmp	r2, r1
 80011ca:	d000      	beq.n	80011ce <HAL_PCD_IRQHandler+0x34e>
 80011cc:	e087      	b.n	80012de <HAL_PCD_IRQHandler+0x45e>
 80011ce:	0002      	movs	r2, r0
 80011d0:	3250      	adds	r2, #80	@ 0x50
 80011d2:	8811      	ldrh	r1, [r2, #0]
 80011d4:	7c1a      	ldrb	r2, [r3, #16]
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_PCD_IRQHandler+0x378>)
 80011d8:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011da:	18c0      	adds	r0, r0, r3
 80011dc:	1841      	adds	r1, r0, r1
 80011de:	1852      	adds	r2, r2, r1
 80011e0:	8813      	ldrh	r3, [r2, #0]
 80011e2:	490a      	ldr	r1, [pc, #40]	@ (800120c <HAL_PCD_IRQHandler+0x38c>)
 80011e4:	059b      	lsls	r3, r3, #22
 80011e6:	0d9b      	lsrs	r3, r3, #22
 80011e8:	8013      	strh	r3, [r2, #0]
 80011ea:	8813      	ldrh	r3, [r2, #0]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	8013      	strh	r3, [r2, #0]
 80011f2:	e080      	b.n	80012f6 <HAL_PCD_IRQHandler+0x476>
 80011f4:	ffff8f0f 	.word	0xffff8f0f
 80011f8:	00000402 	.word	0x00000402
 80011fc:	00000406 	.word	0x00000406
 8001200:	00000f8f 	.word	0x00000f8f
 8001204:	ffffbf8f 	.word	0xffffbf8f
 8001208:	00008080 	.word	0x00008080
 800120c:	ffff8000 	.word	0xffff8000
 8001210:	ffff8f8f 	.word	0xffff8f8f
 8001214:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001218:	9d02      	ldr	r5, [sp, #8]
 800121a:	882e      	ldrh	r6, [r5, #0]
 800121c:	00d5      	lsls	r5, r2, #3
 800121e:	1976      	adds	r6, r6, r5
 8001220:	4dc7      	ldr	r5, [pc, #796]	@ (8001540 <HAL_PCD_IRQHandler+0x6c0>)
 8001222:	1836      	adds	r6, r6, r0
 8001224:	1976      	adds	r6, r6, r5
 8001226:	8835      	ldrh	r5, [r6, #0]
 8001228:	05ad      	lsls	r5, r5, #22
 800122a:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 800122c:	428d      	cmp	r5, r1
 800122e:	d90d      	bls.n	800124c <HAL_PCD_IRQHandler+0x3cc>
 8001230:	9903      	ldr	r1, [sp, #12]
 8001232:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001234:	0091      	lsls	r1, r2, #2
 8001236:	1841      	adds	r1, r0, r1
 8001238:	880e      	ldrh	r6, [r1, #0]
 800123a:	4bc2      	ldr	r3, [pc, #776]	@ (8001544 <HAL_PCD_IRQHandler+0x6c4>)
 800123c:	401e      	ands	r6, r3
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	4073      	eors	r3, r6
 8001244:	4ec0      	ldr	r6, [pc, #768]	@ (8001548 <HAL_PCD_IRQHandler+0x6c8>)
 8001246:	4333      	orrs	r3, r6
 8001248:	800b      	strh	r3, [r1, #0]
 800124a:	e002      	b.n	8001252 <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 800124c:	1b49      	subs	r1, r1, r5
 800124e:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 8001250:	d0f0      	beq.n	8001234 <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	065b      	lsls	r3, r3, #25
 8001256:	d407      	bmi.n	8001268 <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	1882      	adds	r2, r0, r2
 800125c:	8813      	ldrh	r3, [r2, #0]
 800125e:	49bb      	ldr	r1, [pc, #748]	@ (800154c <HAL_PCD_IRQHandler+0x6cc>)
 8001260:	400b      	ands	r3, r1
 8001262:	49bb      	ldr	r1, [pc, #748]	@ (8001550 <HAL_PCD_IRQHandler+0x6d0>)
 8001264:	430b      	orrs	r3, r1
 8001266:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8001268:	2d00      	cmp	r5, #0
 800126a:	d100      	bne.n	800126e <HAL_PCD_IRQHandler+0x3ee>
 800126c:	e76a      	b.n	8001144 <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800126e:	2328      	movs	r3, #40	@ 0x28
 8001270:	9a00      	ldr	r2, [sp, #0]
 8001272:	4353      	muls	r3, r2
 8001274:	18e1      	adds	r1, r4, r3
 8001276:	000a      	movs	r2, r1
 8001278:	325b      	adds	r2, #91	@ 0x5b
 800127a:	e75c      	b.n	8001136 <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	1882      	adds	r2, r0, r2
 8001280:	8816      	ldrh	r6, [r2, #0]
 8001282:	49b2      	ldr	r1, [pc, #712]	@ (800154c <HAL_PCD_IRQHandler+0x6cc>)
 8001284:	4031      	ands	r1, r6
 8001286:	4eb2      	ldr	r6, [pc, #712]	@ (8001550 <HAL_PCD_IRQHandler+0x6d0>)
 8001288:	4331      	orrs	r1, r6
 800128a:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800128c:	782a      	ldrb	r2, [r5, #0]
 800128e:	0091      	lsls	r1, r2, #2
 8001290:	1841      	adds	r1, r0, r1
 8001292:	880d      	ldrh	r5, [r1, #0]
 8001294:	0001      	movs	r1, r0
 8001296:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001298:	8809      	ldrh	r1, [r1, #0]
 800129a:	00d2      	lsls	r2, r2, #3
 800129c:	1852      	adds	r2, r2, r1
 800129e:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012a0:	046d      	lsls	r5, r5, #17
 80012a2:	d50a      	bpl.n	80012ba <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012a4:	49ab      	ldr	r1, [pc, #684]	@ (8001554 <HAL_PCD_IRQHandler+0x6d4>)
 80012a6:	1852      	adds	r2, r2, r1
 80012a8:	8812      	ldrh	r2, [r2, #0]
 80012aa:	0592      	lsls	r2, r2, #22
 80012ac:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d100      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x434>
 80012b2:	e747      	b.n	8001144 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80012b4:	001a      	movs	r2, r3
 80012b6:	3259      	adds	r2, #89	@ 0x59
 80012b8:	e6ef      	b.n	800109a <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80012ba:	49a1      	ldr	r1, [pc, #644]	@ (8001540 <HAL_PCD_IRQHandler+0x6c0>)
 80012bc:	1852      	adds	r2, r2, r1
 80012be:	8812      	ldrh	r2, [r2, #0]
 80012c0:	0592      	lsls	r2, r2, #22
 80012c2:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	d100      	bne.n	80012ca <HAL_PCD_IRQHandler+0x44a>
 80012c8:	e73c      	b.n	8001144 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80012ca:	001a      	movs	r2, r3
 80012cc:	325b      	adds	r2, #91	@ 0x5b
 80012ce:	e6e4      	b.n	800109a <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 80012d0:	3151      	adds	r1, #81	@ 0x51
 80012d2:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012d4:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012d6:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012d8:	f001 fc1c 	bl	8002b14 <USB_EPStartXfer>
 80012dc:	e74d      	b.n	800117a <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012de:	2a01      	cmp	r2, #1
 80012e0:	d109      	bne.n	80012f6 <HAL_PCD_IRQHandler+0x476>
 80012e2:	0002      	movs	r2, r0
 80012e4:	4d9b      	ldr	r5, [pc, #620]	@ (8001554 <HAL_PCD_IRQHandler+0x6d4>)
 80012e6:	3250      	adds	r2, #80	@ 0x50
 80012e8:	8812      	ldrh	r2, [r2, #0]
 80012ea:	7c1b      	ldrb	r3, [r3, #16]
 80012ec:	1940      	adds	r0, r0, r5
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1880      	adds	r0, r0, r2
 80012f2:	181b      	adds	r3, r3, r0
 80012f4:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012f6:	2328      	movs	r3, #40	@ 0x28
 80012f8:	9a00      	ldr	r2, [sp, #0]
 80012fa:	4353      	muls	r3, r2
 80012fc:	18e3      	adds	r3, r4, r3
 80012fe:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001300:	0020      	movs	r0, r4
 8001302:	f002 fbd2 	bl	8003aaa <HAL_PCD_DataInStageCallback>
 8001306:	e5c9      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001308:	7c5a      	ldrb	r2, [r3, #17]
 800130a:	2a00      	cmp	r2, #0
 800130c:	d106      	bne.n	800131c <HAL_PCD_IRQHandler+0x49c>
 800130e:	0002      	movs	r2, r0
 8001310:	3250      	adds	r2, #80	@ 0x50
 8001312:	8811      	ldrh	r1, [r2, #0]
 8001314:	7c1a      	ldrb	r2, [r3, #16]
 8001316:	4b8a      	ldr	r3, [pc, #552]	@ (8001540 <HAL_PCD_IRQHandler+0x6c0>)
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	e75e      	b.n	80011da <HAL_PCD_IRQHandler+0x35a>
 800131c:	2a01      	cmp	r2, #1
 800131e:	d1ea      	bne.n	80012f6 <HAL_PCD_IRQHandler+0x476>
 8001320:	0002      	movs	r2, r0
 8001322:	4987      	ldr	r1, [pc, #540]	@ (8001540 <HAL_PCD_IRQHandler+0x6c0>)
 8001324:	3250      	adds	r2, #80	@ 0x50
 8001326:	8812      	ldrh	r2, [r2, #0]
 8001328:	7c1b      	ldrb	r3, [r3, #16]
 800132a:	1840      	adds	r0, r0, r1
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1880      	adds	r0, r0, r2
 8001330:	181b      	adds	r3, r3, r0
 8001332:	801d      	strh	r5, [r3, #0]
 8001334:	e7df      	b.n	80012f6 <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001336:	2780      	movs	r7, #128	@ 0x80
 8001338:	9901      	ldr	r1, [sp, #4]
 800133a:	007f      	lsls	r7, r7, #1
 800133c:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800133e:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001340:	468c      	mov	ip, r1
 8001342:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001344:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 8001346:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001348:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 800134a:	4239      	tst	r1, r7
 800134c:	d11c      	bne.n	8001388 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800134e:	0007      	movs	r7, r0
 8001350:	3750      	adds	r7, #80	@ 0x50
 8001352:	883f      	ldrh	r7, [r7, #0]
 8001354:	18bf      	adds	r7, r7, r2
 8001356:	4a7f      	ldr	r2, [pc, #508]	@ (8001554 <HAL_PCD_IRQHandler+0x6d4>)
 8001358:	183f      	adds	r7, r7, r0
 800135a:	18bf      	adds	r7, r7, r2
 800135c:	883a      	ldrh	r2, [r7, #0]
 800135e:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8001360:	0d92      	lsrs	r2, r2, #22
 8001362:	42aa      	cmp	r2, r5
 8001364:	d303      	bcc.n	800136e <HAL_PCD_IRQHandler+0x4ee>
 8001366:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001368:	9902      	ldr	r1, [sp, #8]
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
 800136c:	e7c8      	b.n	8001300 <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 800136e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 8001370:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 8001372:	1889      	adds	r1, r1, r2
 8001374:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8001376:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8001378:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 800137a:	188a      	adds	r2, r1, r2
 800137c:	629d      	str	r5, [r3, #40]	@ 0x28
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8001380:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001382:	f001 fbc7 	bl	8002b14 <USB_EPStartXfer>
 8001386:	e589      	b.n	8000e9c <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001388:	2140      	movs	r1, #64	@ 0x40
 800138a:	468c      	mov	ip, r1
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	0006      	movs	r6, r0
 8001390:	400f      	ands	r7, r1
 8001392:	9703      	str	r7, [sp, #12]
 8001394:	4667      	mov	r7, ip
 8001396:	9901      	ldr	r1, [sp, #4]
 8001398:	3650      	adds	r6, #80	@ 0x50
 800139a:	4239      	tst	r1, r7
 800139c:	d100      	bne.n	80013a0 <HAL_PCD_IRQHandler+0x520>
 800139e:	e0df      	b.n	8001560 <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013a0:	496c      	ldr	r1, [pc, #432]	@ (8001554 <HAL_PCD_IRQHandler+0x6d4>)
 80013a2:	8837      	ldrh	r7, [r6, #0]
 80013a4:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80013a6:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013a8:	19f7      	adds	r7, r6, r7
 80013aa:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 80013ac:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013ae:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 80013b0:	0dbf      	lsrs	r7, r7, #22
 80013b2:	42af      	cmp	r7, r5
 80013b4:	d201      	bcs.n	80013ba <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 80013b6:	1be9      	subs	r1, r5, r7
 80013b8:	468c      	mov	ip, r1
 80013ba:	4661      	mov	r1, ip
 80013bc:	2580      	movs	r5, #128	@ 0x80
 80013be:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80013c0:	9901      	ldr	r1, [sp, #4]
 80013c2:	01ed      	lsls	r5, r5, #7
 80013c4:	4029      	ands	r1, r5
 80013c6:	000d      	movs	r5, r1
 80013c8:	4661      	mov	r1, ip
 80013ca:	2900      	cmp	r1, #0
 80013cc:	d147      	bne.n	800145e <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013ce:	2328      	movs	r3, #40	@ 0x28
 80013d0:	9900      	ldr	r1, [sp, #0]
 80013d2:	434b      	muls	r3, r1
 80013d4:	18e3      	adds	r3, r4, r3
 80013d6:	7c5b      	ldrb	r3, [r3, #17]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d130      	bne.n	800143e <HAL_PCD_IRQHandler+0x5be>
 80013dc:	0007      	movs	r7, r0
 80013de:	3750      	adds	r7, #80	@ 0x50
 80013e0:	883b      	ldrh	r3, [r7, #0]
 80013e2:	495d      	ldr	r1, [pc, #372]	@ (8001558 <HAL_PCD_IRQHandler+0x6d8>)
 80013e4:	18f3      	adds	r3, r6, r3
 80013e6:	189b      	adds	r3, r3, r2
 80013e8:	881e      	ldrh	r6, [r3, #0]
 80013ea:	05b6      	lsls	r6, r6, #22
 80013ec:	0db6      	lsrs	r6, r6, #22
 80013ee:	801e      	strh	r6, [r3, #0]
 80013f0:	881e      	ldrh	r6, [r3, #0]
 80013f2:	430e      	orrs	r6, r1
 80013f4:	b2b6      	uxth	r6, r6
 80013f6:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013f8:	4e51      	ldr	r6, [pc, #324]	@ (8001540 <HAL_PCD_IRQHandler+0x6c0>)
 80013fa:	883b      	ldrh	r3, [r7, #0]
 80013fc:	1980      	adds	r0, r0, r6
 80013fe:	18c0      	adds	r0, r0, r3
 8001400:	1880      	adds	r0, r0, r2
 8001402:	8803      	ldrh	r3, [r0, #0]
 8001404:	059b      	lsls	r3, r3, #22
 8001406:	0d9b      	lsrs	r3, r3, #22
 8001408:	8003      	strh	r3, [r0, #0]
 800140a:	8803      	ldrh	r3, [r0, #0]
 800140c:	430b      	orrs	r3, r1
 800140e:	b29b      	uxth	r3, r3
 8001410:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001412:	0020      	movs	r0, r4
 8001414:	9902      	ldr	r1, [sp, #8]
 8001416:	f002 fb48 	bl	8003aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800141a:	2d00      	cmp	r5, #0
 800141c:	d100      	bne.n	8001420 <HAL_PCD_IRQHandler+0x5a0>
 800141e:	e0dc      	b.n	80015da <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001420:	2328      	movs	r3, #40	@ 0x28
 8001422:	9a00      	ldr	r2, [sp, #0]
 8001424:	4949      	ldr	r1, [pc, #292]	@ (800154c <HAL_PCD_IRQHandler+0x6cc>)
 8001426:	4353      	muls	r3, r2
 8001428:	18e3      	adds	r3, r4, r3
 800142a:	7c1b      	ldrb	r3, [r3, #16]
 800142c:	6822      	ldr	r2, [r4, #0]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	18d2      	adds	r2, r2, r3
 8001432:	8813      	ldrh	r3, [r2, #0]
 8001434:	400b      	ands	r3, r1
 8001436:	4949      	ldr	r1, [pc, #292]	@ (800155c <HAL_PCD_IRQHandler+0x6dc>)
 8001438:	430b      	orrs	r3, r1
 800143a:	8013      	strh	r3, [r2, #0]
 800143c:	e0cd      	b.n	80015da <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800143e:	2b01      	cmp	r3, #1
 8001440:	d1e7      	bne.n	8001412 <HAL_PCD_IRQHandler+0x592>
 8001442:	0007      	movs	r7, r0
 8001444:	4661      	mov	r1, ip
 8001446:	3750      	adds	r7, #80	@ 0x50
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	18f3      	adds	r3, r6, r3
 800144c:	189b      	adds	r3, r3, r2
 800144e:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001450:	493b      	ldr	r1, [pc, #236]	@ (8001540 <HAL_PCD_IRQHandler+0x6c0>)
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	1840      	adds	r0, r0, r1
 8001456:	18c0      	adds	r0, r0, r3
 8001458:	1880      	adds	r0, r0, r2
 800145a:	4663      	mov	r3, ip
 800145c:	e7d8      	b.n	8001410 <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800145e:	2d00      	cmp	r5, #0
 8001460:	d00c      	beq.n	800147c <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001462:	9902      	ldr	r1, [sp, #8]
 8001464:	0089      	lsls	r1, r1, #2
 8001466:	1841      	adds	r1, r0, r1
 8001468:	880d      	ldrh	r5, [r1, #0]
 800146a:	9101      	str	r1, [sp, #4]
 800146c:	46ac      	mov	ip, r5
 800146e:	4661      	mov	r1, ip
 8001470:	4d36      	ldr	r5, [pc, #216]	@ (800154c <HAL_PCD_IRQHandler+0x6cc>)
 8001472:	400d      	ands	r5, r1
 8001474:	4939      	ldr	r1, [pc, #228]	@ (800155c <HAL_PCD_IRQHandler+0x6dc>)
 8001476:	430d      	orrs	r5, r1
 8001478:	9901      	ldr	r1, [sp, #4]
 800147a:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800147c:	2528      	movs	r5, #40	@ 0x28
 800147e:	9900      	ldr	r1, [sp, #0]
 8001480:	434d      	muls	r5, r1
 8001482:	2134      	movs	r1, #52	@ 0x34
 8001484:	468c      	mov	ip, r1
 8001486:	1965      	adds	r5, r4, r5
 8001488:	44ac      	add	ip, r5
 800148a:	4661      	mov	r1, ip
 800148c:	7809      	ldrb	r1, [r1, #0]
 800148e:	2901      	cmp	r1, #1
 8001490:	d000      	beq.n	8001494 <HAL_PCD_IRQHandler+0x614>
 8001492:	e0a2      	b.n	80015da <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8001494:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001496:	19c9      	adds	r1, r1, r7
 8001498:	6269      	str	r1, [r5, #36]	@ 0x24
 800149a:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 800149c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800149e:	19c9      	adds	r1, r1, r7
 80014a0:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80014a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80014a4:	6a29      	ldr	r1, [r5, #32]
 80014a6:	428b      	cmp	r3, r1
 80014a8:	d317      	bcc.n	80014da <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 80014aa:	1a5b      	subs	r3, r3, r1
 80014ac:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014ae:	2328      	movs	r3, #40	@ 0x28
 80014b0:	9d00      	ldr	r5, [sp, #0]
 80014b2:	436b      	muls	r3, r5
 80014b4:	18e3      	adds	r3, r4, r3
 80014b6:	7c5d      	ldrb	r5, [r3, #17]
 80014b8:	b28b      	uxth	r3, r1
 80014ba:	2d00      	cmp	r5, #0
 80014bc:	d137      	bne.n	800152e <HAL_PCD_IRQHandler+0x6ae>
 80014be:	0005      	movs	r5, r0
 80014c0:	3550      	adds	r5, #80	@ 0x50
 80014c2:	882d      	ldrh	r5, [r5, #0]
 80014c4:	1975      	adds	r5, r6, r5
 80014c6:	18aa      	adds	r2, r5, r2
 80014c8:	8815      	ldrh	r5, [r2, #0]
 80014ca:	05ad      	lsls	r5, r5, #22
 80014cc:	0dad      	lsrs	r5, r5, #22
 80014ce:	8015      	strh	r5, [r2, #0]
 80014d0:	2900      	cmp	r1, #0
 80014d2:	d10e      	bne.n	80014f2 <HAL_PCD_IRQHandler+0x672>
 80014d4:	8811      	ldrh	r1, [r2, #0]
 80014d6:	4d20      	ldr	r5, [pc, #128]	@ (8001558 <HAL_PCD_IRQHandler+0x6d8>)
 80014d8:	e013      	b.n	8001502 <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 80014de:	4661      	mov	r1, ip
 80014e0:	700b      	strb	r3, [r1, #0]
          len = TxPctSize;
 80014e2:	0039      	movs	r1, r7
 80014e4:	e7e3      	b.n	80014ae <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 80014e6:	2100      	movs	r1, #0
 80014e8:	4667      	mov	r7, ip
 80014ea:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 80014ec:	6329      	str	r1, [r5, #48]	@ 0x30
          len = ep->xfer_len_db;
 80014ee:	0019      	movs	r1, r3
 80014f0:	e7dd      	b.n	80014ae <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014f2:	293e      	cmp	r1, #62	@ 0x3e
 80014f4:	d811      	bhi.n	800151a <HAL_PCD_IRQHandler+0x69a>
 80014f6:	2601      	movs	r6, #1
 80014f8:	084d      	lsrs	r5, r1, #1
 80014fa:	400e      	ands	r6, r1
 80014fc:	19ad      	adds	r5, r5, r6
 80014fe:	8811      	ldrh	r1, [r2, #0]
 8001500:	02ad      	lsls	r5, r5, #10
 8001502:	4329      	orrs	r1, r5
 8001504:	b289      	uxth	r1, r1
 8001506:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001508:	2228      	movs	r2, #40	@ 0x28
 800150a:	9900      	ldr	r1, [sp, #0]
 800150c:	434a      	muls	r2, r1
 800150e:	18a2      	adds	r2, r4, r2
 8001510:	8b12      	ldrh	r2, [r2, #24]
 8001512:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001514:	f001 fae9 	bl	8002aea <USB_WritePMA>
 8001518:	e05f      	b.n	80015da <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800151a:	261f      	movs	r6, #31
 800151c:	094d      	lsrs	r5, r1, #5
 800151e:	4031      	ands	r1, r6
 8001520:	424e      	negs	r6, r1
 8001522:	4171      	adcs	r1, r6
 8001524:	1a6d      	subs	r5, r5, r1
 8001526:	8811      	ldrh	r1, [r2, #0]
 8001528:	02ad      	lsls	r5, r5, #10
 800152a:	4329      	orrs	r1, r5
 800152c:	e7d3      	b.n	80014d6 <HAL_PCD_IRQHandler+0x656>
 800152e:	2d01      	cmp	r5, #1
 8001530:	d1ea      	bne.n	8001508 <HAL_PCD_IRQHandler+0x688>
 8001532:	0001      	movs	r1, r0
 8001534:	3150      	adds	r1, #80	@ 0x50
 8001536:	8809      	ldrh	r1, [r1, #0]
 8001538:	1876      	adds	r6, r6, r1
 800153a:	18b6      	adds	r6, r6, r2
 800153c:	8033      	strh	r3, [r6, #0]
 800153e:	e7e3      	b.n	8001508 <HAL_PCD_IRQHandler+0x688>
 8001540:	00000406 	.word	0x00000406
 8001544:	ffffbf8f 	.word	0xffffbf8f
 8001548:	00008080 	.word	0x00008080
 800154c:	ffff8f8f 	.word	0xffff8f8f
 8001550:	000080c0 	.word	0x000080c0
 8001554:	00000402 	.word	0x00000402
 8001558:	ffff8000 	.word	0xffff8000
 800155c:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001560:	49ac      	ldr	r1, [pc, #688]	@ (8001814 <HAL_PCD_IRQHandler+0x994>)
 8001562:	8836      	ldrh	r6, [r6, #0]
 8001564:	468c      	mov	ip, r1
 8001566:	4484      	add	ip, r0
 8001568:	4466      	add	r6, ip
 800156a:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 800156c:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800156e:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 8001570:	0db6      	lsrs	r6, r6, #22
 8001572:	42ae      	cmp	r6, r5
 8001574:	d800      	bhi.n	8001578 <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 8001576:	1baf      	subs	r7, r5, r6
 8001578:	2580      	movs	r5, #128	@ 0x80
 800157a:	9901      	ldr	r1, [sp, #4]
 800157c:	01ed      	lsls	r5, r5, #7
 800157e:	4029      	ands	r1, r5
 8001580:	000d      	movs	r5, r1
 8001582:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8001584:	2f00      	cmp	r7, #0
 8001586:	d149      	bne.n	800161c <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001588:	2328      	movs	r3, #40	@ 0x28
 800158a:	9900      	ldr	r1, [sp, #0]
 800158c:	434b      	muls	r3, r1
 800158e:	18e3      	adds	r3, r4, r3
 8001590:	7c5b      	ldrb	r3, [r3, #17]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d133      	bne.n	80015fe <HAL_PCD_IRQHandler+0x77e>
 8001596:	0003      	movs	r3, r0
 8001598:	499f      	ldr	r1, [pc, #636]	@ (8001818 <HAL_PCD_IRQHandler+0x998>)
 800159a:	3350      	adds	r3, #80	@ 0x50
 800159c:	881e      	ldrh	r6, [r3, #0]
 800159e:	1840      	adds	r0, r0, r1
 80015a0:	1980      	adds	r0, r0, r6
 80015a2:	1880      	adds	r0, r0, r2
 80015a4:	8806      	ldrh	r6, [r0, #0]
 80015a6:	499d      	ldr	r1, [pc, #628]	@ (800181c <HAL_PCD_IRQHandler+0x99c>)
 80015a8:	05b6      	lsls	r6, r6, #22
 80015aa:	0db6      	lsrs	r6, r6, #22
 80015ac:	8006      	strh	r6, [r0, #0]
 80015ae:	8806      	ldrh	r6, [r0, #0]
 80015b0:	430e      	orrs	r6, r1
 80015b2:	b2b6      	uxth	r6, r6
 80015b4:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	4463      	add	r3, ip
 80015ba:	189b      	adds	r3, r3, r2
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	0592      	lsls	r2, r2, #22
 80015c0:	0d92      	lsrs	r2, r2, #22
 80015c2:	801a      	strh	r2, [r3, #0]
 80015c4:	881a      	ldrh	r2, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	b292      	uxth	r2, r2
 80015ca:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015cc:	0020      	movs	r0, r4
 80015ce:	9902      	ldr	r1, [sp, #8]
 80015d0:	f002 fa6b 	bl	8003aaa <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80015d4:	2d00      	cmp	r5, #0
 80015d6:	d100      	bne.n	80015da <HAL_PCD_IRQHandler+0x75a>
 80015d8:	e722      	b.n	8001420 <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80015da:	2328      	movs	r3, #40	@ 0x28
 80015dc:	9a00      	ldr	r2, [sp, #0]
 80015de:	4353      	muls	r3, r2
 80015e0:	18e3      	adds	r3, r4, r3
 80015e2:	7c1b      	ldrb	r3, [r3, #16]
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	18d2      	adds	r2, r2, r3
 80015ea:	8811      	ldrh	r1, [r2, #0]
 80015ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001820 <HAL_PCD_IRQHandler+0x9a0>)
 80015ee:	4019      	ands	r1, r3
 80015f0:	2330      	movs	r3, #48	@ 0x30
 80015f2:	404b      	eors	r3, r1
 80015f4:	498b      	ldr	r1, [pc, #556]	@ (8001824 <HAL_PCD_IRQHandler+0x9a4>)
 80015f6:	430b      	orrs	r3, r1
 80015f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80015fa:	f7ff fc4f 	bl	8000e9c <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d1e4      	bne.n	80015cc <HAL_PCD_IRQHandler+0x74c>
 8001602:	0003      	movs	r3, r0
 8001604:	4984      	ldr	r1, [pc, #528]	@ (8001818 <HAL_PCD_IRQHandler+0x998>)
 8001606:	3350      	adds	r3, #80	@ 0x50
 8001608:	881e      	ldrh	r6, [r3, #0]
 800160a:	1840      	adds	r0, r0, r1
 800160c:	1980      	adds	r0, r0, r6
 800160e:	1880      	adds	r0, r0, r2
 8001610:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4463      	add	r3, ip
 8001616:	189b      	adds	r3, r3, r2
 8001618:	801f      	strh	r7, [r3, #0]
 800161a:	e7d7      	b.n	80015cc <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800161c:	2900      	cmp	r1, #0
 800161e:	d108      	bne.n	8001632 <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001620:	9902      	ldr	r1, [sp, #8]
 8001622:	4d81      	ldr	r5, [pc, #516]	@ (8001828 <HAL_PCD_IRQHandler+0x9a8>)
 8001624:	0089      	lsls	r1, r1, #2
 8001626:	1841      	adds	r1, r0, r1
 8001628:	880f      	ldrh	r7, [r1, #0]
 800162a:	403d      	ands	r5, r7
 800162c:	4f7f      	ldr	r7, [pc, #508]	@ (800182c <HAL_PCD_IRQHandler+0x9ac>)
 800162e:	433d      	orrs	r5, r7
 8001630:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8001632:	2728      	movs	r7, #40	@ 0x28
 8001634:	9900      	ldr	r1, [sp, #0]
 8001636:	434f      	muls	r7, r1
 8001638:	19e7      	adds	r7, r4, r7
 800163a:	0039      	movs	r1, r7
 800163c:	3134      	adds	r1, #52	@ 0x34
 800163e:	9101      	str	r1, [sp, #4]
 8001640:	7809      	ldrb	r1, [r1, #0]
 8001642:	2901      	cmp	r1, #1
 8001644:	d1c9      	bne.n	80015da <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8001646:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001648:	1989      	adds	r1, r1, r6
 800164a:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 800164c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800164e:	19ad      	adds	r5, r5, r6
 8001650:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001654:	6a3d      	ldr	r5, [r7, #32]
 8001656:	42ab      	cmp	r3, r5
 8001658:	d317      	bcc.n	800168a <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 800165a:	1b5b      	subs	r3, r3, r5
 800165c:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800165e:	2328      	movs	r3, #40	@ 0x28
 8001660:	9e00      	ldr	r6, [sp, #0]
 8001662:	4373      	muls	r3, r6
 8001664:	18e3      	adds	r3, r4, r3
 8001666:	7c5e      	ldrb	r6, [r3, #17]
 8001668:	b2ab      	uxth	r3, r5
 800166a:	2e00      	cmp	r6, #0
 800166c:	d134      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x858>
 800166e:	0006      	movs	r6, r0
 8001670:	3650      	adds	r6, #80	@ 0x50
 8001672:	8836      	ldrh	r6, [r6, #0]
 8001674:	4466      	add	r6, ip
 8001676:	18b2      	adds	r2, r6, r2
 8001678:	8816      	ldrh	r6, [r2, #0]
 800167a:	05b6      	lsls	r6, r6, #22
 800167c:	0db6      	lsrs	r6, r6, #22
 800167e:	8016      	strh	r6, [r2, #0]
 8001680:	2d00      	cmp	r5, #0
 8001682:	d10e      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x822>
 8001684:	8815      	ldrh	r5, [r2, #0]
 8001686:	4e65      	ldr	r6, [pc, #404]	@ (800181c <HAL_PCD_IRQHandler+0x99c>)
 8001688:	e013      	b.n	80016b2 <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 800168e:	9d01      	ldr	r5, [sp, #4]
 8001690:	702b      	strb	r3, [r5, #0]
          len = TxPctSize;
 8001692:	0035      	movs	r5, r6
 8001694:	e7e3      	b.n	800165e <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 8001696:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 8001698:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 800169a:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800169c:	7035      	strb	r5, [r6, #0]
          len = ep->xfer_len_db;
 800169e:	001d      	movs	r5, r3
 80016a0:	e7dd      	b.n	800165e <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016a2:	2d3e      	cmp	r5, #62	@ 0x3e
 80016a4:	d80e      	bhi.n	80016c4 <HAL_PCD_IRQHandler+0x844>
 80016a6:	2701      	movs	r7, #1
 80016a8:	086e      	lsrs	r6, r5, #1
 80016aa:	402f      	ands	r7, r5
 80016ac:	19f6      	adds	r6, r6, r7
 80016ae:	8815      	ldrh	r5, [r2, #0]
 80016b0:	02b6      	lsls	r6, r6, #10
 80016b2:	4335      	orrs	r5, r6
 80016b4:	b2ad      	uxth	r5, r5
 80016b6:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80016b8:	2228      	movs	r2, #40	@ 0x28
 80016ba:	9d00      	ldr	r5, [sp, #0]
 80016bc:	436a      	muls	r2, r5
 80016be:	18a2      	adds	r2, r4, r2
 80016c0:	8b52      	ldrh	r2, [r2, #26]
 80016c2:	e727      	b.n	8001514 <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016c4:	271f      	movs	r7, #31
 80016c6:	096e      	lsrs	r6, r5, #5
 80016c8:	403d      	ands	r5, r7
 80016ca:	426f      	negs	r7, r5
 80016cc:	417d      	adcs	r5, r7
 80016ce:	1b76      	subs	r6, r6, r5
 80016d0:	8815      	ldrh	r5, [r2, #0]
 80016d2:	02b6      	lsls	r6, r6, #10
 80016d4:	4335      	orrs	r5, r6
 80016d6:	e7d6      	b.n	8001686 <HAL_PCD_IRQHandler+0x806>
 80016d8:	2e01      	cmp	r6, #1
 80016da:	d1ed      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x838>
 80016dc:	0005      	movs	r5, r0
 80016de:	3550      	adds	r5, #80	@ 0x50
 80016e0:	882d      	ldrh	r5, [r5, #0]
 80016e2:	4465      	add	r5, ip
 80016e4:	18aa      	adds	r2, r5, r2
 80016e6:	8013      	strh	r3, [r2, #0]
 80016e8:	e7e6      	b.n	80016b8 <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80016ea:	0543      	lsls	r3, r0, #21
 80016ec:	d50e      	bpl.n	800170c <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	494f      	ldr	r1, [pc, #316]	@ (8001830 <HAL_PCD_IRQHandler+0x9b0>)
 80016f2:	3306      	adds	r3, #6
 80016f4:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80016f6:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016f8:	400a      	ands	r2, r1
 80016fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80016fc:	f002 f9e7 	bl	8003ace <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001700:	0029      	movs	r1, r5
 8001702:	0020      	movs	r0, r4
 8001704:	f7ff fbab 	bl	8000e5e <HAL_PCD_SetAddress>
    return;
 8001708:	f7ff fbce 	bl	8000ea8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800170c:	0443      	lsls	r3, r0, #17
 800170e:	d507      	bpl.n	8001720 <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	4948      	ldr	r1, [pc, #288]	@ (8001834 <HAL_PCD_IRQHandler+0x9b4>)
 8001714:	3306      	adds	r3, #6
 8001716:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001718:	400a      	ands	r2, r1
 800171a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 800171c:	f7ff fbc4 	bl	8000ea8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	0001      	movs	r1, r0
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	4019      	ands	r1, r3
 8001728:	4218      	tst	r0, r3
 800172a:	d004      	beq.n	8001736 <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	4942      	ldr	r1, [pc, #264]	@ (8001838 <HAL_PCD_IRQHandler+0x9b8>)
 8001730:	3306      	adds	r3, #6
 8001732:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001734:	e7f0      	b.n	8001718 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001736:	04c3      	lsls	r3, r0, #19
 8001738:	d51a      	bpl.n	8001770 <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800173a:	2004      	movs	r0, #4
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	3302      	adds	r3, #2
 8001740:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001742:	4382      	bics	r2, r0
 8001744:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001746:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001748:	1800      	adds	r0, r0, r0
 800174a:	4382      	bics	r2, r0
 800174c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 800174e:	23b2      	movs	r3, #178	@ 0xb2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	5ce2      	ldrb	r2, [r4, r3]
 8001754:	2a01      	cmp	r2, #1
 8001756:	d103      	bne.n	8001760 <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001758:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 800175a:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800175c:	f000 f983 	bl	8001a66 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001760:	0020      	movs	r0, r4
 8001762:	f002 f9d7 	bl	8003b14 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	4934      	ldr	r1, [pc, #208]	@ (800183c <HAL_PCD_IRQHandler+0x9bc>)
 800176a:	3306      	adds	r3, #6
 800176c:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800176e:	e7d3      	b.n	8001718 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001770:	0503      	lsls	r3, r0, #20
 8001772:	d513      	bpl.n	800179c <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001774:	2108      	movs	r1, #8
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	1c9a      	adds	r2, r3, #2
 800177a:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800177c:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800177e:	4301      	orrs	r1, r0
 8001780:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001782:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8001784:	482e      	ldr	r0, [pc, #184]	@ (8001840 <HAL_PCD_IRQHandler+0x9c0>)
 8001786:	4001      	ands	r1, r0
 8001788:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800178a:	2304      	movs	r3, #4
 800178c:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 800178e:	430b      	orrs	r3, r1
 8001790:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 8001792:	0020      	movs	r0, r4
 8001794:	f002 f9ac 	bl	8003af0 <HAL_PCD_SuspendCallback>
 8001798:	f7ff fb86 	bl	8000ea8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800179c:	2580      	movs	r5, #128	@ 0x80
 800179e:	4228      	tst	r0, r5
 80017a0:	d021      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 80017a2:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80017a4:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 80017a6:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80017a8:	1d99      	adds	r1, r3, #6
 80017aa:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 80017ac:	43aa      	bics	r2, r5
 80017ae:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 80017b0:	5c22      	ldrb	r2, [r4, r0]
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d1ed      	bne.n	8001792 <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017b6:	2104      	movs	r1, #4
 80017b8:	1c9a      	adds	r2, r3, #2
 80017ba:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80017bc:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017be:	4329      	orrs	r1, r5
 80017c0:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017c2:	2108      	movs	r1, #8
 80017c4:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 80017c6:	4329      	orrs	r1, r5
 80017c8:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 80017ca:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80017cc:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 80017ce:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80017d0:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017d2:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	22b3      	movs	r2, #179	@ 0xb3
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017de:	f000 f942 	bl	8001a66 <HAL_PCDEx_LPM_Callback>
 80017e2:	f7ff fb61 	bl	8000ea8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80017e6:	0583      	lsls	r3, r0, #22
 80017e8:	d50a      	bpl.n	8001800 <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	4915      	ldr	r1, [pc, #84]	@ (8001844 <HAL_PCD_IRQHandler+0x9c4>)
 80017ee:	3306      	adds	r3, #6
 80017f0:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80017f2:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017f4:	400a      	ands	r2, r1
 80017f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80017f8:	f002 f962 	bl	8003ac0 <HAL_PCD_SOFCallback>
    return;
 80017fc:	f7ff fb54 	bl	8000ea8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001800:	05c0      	lsls	r0, r0, #23
 8001802:	d401      	bmi.n	8001808 <HAL_PCD_IRQHandler+0x988>
 8001804:	f7ff fb50 	bl	8000ea8 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	490f      	ldr	r1, [pc, #60]	@ (8001848 <HAL_PCD_IRQHandler+0x9c8>)
 800180c:	3306      	adds	r3, #6
 800180e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001810:	e782      	b.n	8001718 <HAL_PCD_IRQHandler+0x898>
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	00000406 	.word	0x00000406
 8001818:	00000402 	.word	0x00000402
 800181c:	ffff8000 	.word	0xffff8000
 8001820:	ffff8fbf 	.word	0xffff8fbf
 8001824:	00008080 	.word	0x00008080
 8001828:	ffff8f8f 	.word	0xffff8f8f
 800182c:	0000c080 	.word	0x0000c080
 8001830:	fffffbff 	.word	0xfffffbff
 8001834:	ffffbfff 	.word	0xffffbfff
 8001838:	ffffdfff 	.word	0xffffdfff
 800183c:	ffffefff 	.word	0xffffefff
 8001840:	fffff7ff 	.word	0xfffff7ff
 8001844:	fffffdff 	.word	0xfffffdff
 8001848:	fffffeff 	.word	0xfffffeff

0800184c <HAL_PCD_EP_Open>:
{
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	0004      	movs	r4, r0
 8001850:	2007      	movs	r0, #7
 8001852:	000d      	movs	r5, r1
 8001854:	4008      	ands	r0, r1
 8001856:	2128      	movs	r1, #40	@ 0x28
 8001858:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800185a:	b26d      	sxtb	r5, r5
 800185c:	1866      	adds	r6, r4, r1
 800185e:	2d00      	cmp	r5, #0
 8001860:	da18      	bge.n	8001894 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8001862:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001864:	3110      	adds	r1, #16
 8001866:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001868:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 800186a:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 800186c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800186e:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8001870:	2b02      	cmp	r3, #2
 8001872:	d101      	bne.n	8001878 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001878:	25a4      	movs	r5, #164	@ 0xa4
 800187a:	00ad      	lsls	r5, r5, #2
 800187c:	5d63      	ldrb	r3, [r4, r5]
 800187e:	2002      	movs	r0, #2
 8001880:	2b01      	cmp	r3, #1
 8001882:	d006      	beq.n	8001892 <HAL_PCD_EP_Open+0x46>
 8001884:	2301      	movs	r3, #1
 8001886:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	f000 ff35 	bl	80026f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800188e:	2000      	movs	r0, #0
 8001890:	5560      	strb	r0, [r4, r5]
}
 8001892:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001894:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001896:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001898:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189a:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 800189c:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189e:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80018a0:	7035      	strb	r5, [r6, #0]
 80018a2:	e7e2      	b.n	800186a <HAL_PCD_EP_Open+0x1e>

080018a4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80018a4:	2207      	movs	r2, #7
{
 80018a6:	000b      	movs	r3, r1
 80018a8:	400a      	ands	r2, r1
 80018aa:	2128      	movs	r1, #40	@ 0x28
 80018ac:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 80018ae:	b25b      	sxtb	r3, r3
{
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	0004      	movs	r4, r0
 80018b4:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da12      	bge.n	80018e0 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 80018ba:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018bc:	3110      	adds	r1, #16
 80018be:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80018c0:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 80018c2:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80018c6:	00ad      	lsls	r5, r5, #2
 80018c8:	5d63      	ldrb	r3, [r4, r5]
 80018ca:	2002      	movs	r0, #2
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d006      	beq.n	80018de <HAL_PCD_EP_Close+0x3a>
 80018d0:	2301      	movs	r3, #1
 80018d2:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018d4:	6820      	ldr	r0, [r4, #0]
 80018d6:	f001 f81f 	bl	8002918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018da:	2000      	movs	r0, #0
 80018dc:	5560      	strb	r0, [r4, r5]
}
 80018de:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80018e0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e2:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 80018e4:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e6:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80018e8:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ea:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80018ec:	7003      	strb	r3, [r0, #0]
 80018ee:	e7e8      	b.n	80018c2 <HAL_PCD_EP_Close+0x1e>

080018f0 <HAL_PCD_EP_Receive>:
{
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	2407      	movs	r4, #7
}
 80018f4:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 80018f6:	3421      	adds	r4, #33	@ 0x21
 80018f8:	434c      	muls	r4, r1
 80018fa:	1906      	adds	r6, r0, r4
 80018fc:	0037      	movs	r7, r6
 80018fe:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8001900:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8001902:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8001904:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8001906:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8001908:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190a:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 800190c:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 800190e:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001910:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8001912:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8001914:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8001916:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001918:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191a:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800191c:	6800      	ldr	r0, [r0, #0]
 800191e:	f001 f8f9 	bl	8002b14 <USB_EPStartXfer>
}
 8001922:	0028      	movs	r0, r5
 8001924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001926 <HAL_PCD_EP_Transmit>:
{
 8001926:	b570      	push	{r4, r5, r6, lr}
 8001928:	2407      	movs	r4, #7
}
 800192a:	4021      	ands	r1, r4
 800192c:	3421      	adds	r4, #33	@ 0x21
 800192e:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8001930:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8001932:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8001934:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8001936:	2201      	movs	r2, #1
 8001938:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 800193a:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 800193c:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 800193e:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001940:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8001942:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8001944:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 8001946:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 8001948:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194a:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800194c:	6800      	ldr	r0, [r0, #0]
 800194e:	f001 f8e1 	bl	8002b14 <USB_EPStartXfer>
}
 8001952:	0028      	movs	r0, r5
 8001954:	bd70      	pop	{r4, r5, r6, pc}

08001956 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001956:	2207      	movs	r2, #7
{
 8001958:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800195a:	7903      	ldrb	r3, [r0, #4]
{
 800195c:	0004      	movs	r4, r0
 800195e:	400a      	ands	r2, r1
    return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001962:	4293      	cmp	r3, r2
 8001964:	d319      	bcc.n	800199a <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8001966:	b248      	sxtb	r0, r1
 8001968:	2328      	movs	r3, #40	@ 0x28
 800196a:	2800      	cmp	r0, #0
 800196c:	da16      	bge.n	800199c <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196e:	4353      	muls	r3, r2
 8001970:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8001972:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001974:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8001976:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001978:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800197a:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 800197c:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 800197e:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8001980:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001982:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001984:	00ad      	lsls	r5, r5, #2
 8001986:	5d62      	ldrb	r2, [r4, r5]
 8001988:	2002      	movs	r0, #2
 800198a:	429a      	cmp	r2, r3
 800198c:	d005      	beq.n	800199a <HAL_PCD_EP_SetStall+0x44>
 800198e:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001990:	6820      	ldr	r0, [r4, #0]
 8001992:	f001 f83b 	bl	8002a0c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001996:	2000      	movs	r0, #0
 8001998:	5560      	strb	r0, [r4, r5]
}
 800199a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800199c:	434b      	muls	r3, r1
 800199e:	0019      	movs	r1, r3
    ep->is_in = 0U;
 80019a0:	2000      	movs	r0, #0
 80019a2:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80019a4:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 80019a6:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 80019a8:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80019aa:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 80019ac:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80019ae:	7018      	strb	r0, [r3, #0]
 80019b0:	e7e4      	b.n	800197c <HAL_PCD_EP_SetStall+0x26>

080019b2 <HAL_PCD_EP_ClrStall>:
{
 80019b2:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019b4:	220f      	movs	r2, #15
{
 80019b6:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019b8:	7901      	ldrb	r1, [r0, #4]
{
 80019ba:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019bc:	401a      	ands	r2, r3
    return HAL_ERROR;
 80019be:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019c0:	4291      	cmp	r1, r2
 80019c2:	d31b      	bcc.n	80019fc <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 80019c4:	2207      	movs	r2, #7
 80019c6:	2128      	movs	r1, #40	@ 0x28
 80019c8:	401a      	ands	r2, r3
 80019ca:	4351      	muls	r1, r2
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	1860      	adds	r0, r4, r1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da14      	bge.n	80019fe <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 80019d4:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019d6:	3110      	adds	r1, #16
 80019d8:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80019da:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 80019dc:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80019de:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 80019e0:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80019e4:	00b6      	lsls	r6, r6, #2
 80019e6:	5da3      	ldrb	r3, [r4, r6]
 80019e8:	2002      	movs	r0, #2
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d006      	beq.n	80019fc <HAL_PCD_EP_ClrStall+0x4a>
 80019ee:	2301      	movs	r3, #1
 80019f0:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019f2:	6820      	ldr	r0, [r4, #0]
 80019f4:	f001 f82c 	bl	8002a50 <USB_EPClearStall>
  return HAL_OK;
 80019f8:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 80019fa:	55a5      	strb	r5, [r4, r6]
}
 80019fc:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80019fe:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a00:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001a02:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a04:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001a06:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a08:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001a0a:	7003      	strb	r3, [r0, #0]
 8001a0c:	e7e6      	b.n	80019dc <HAL_PCD_EP_ClrStall+0x2a>

08001a0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001a0e:	b530      	push	{r4, r5, lr}
 8001a10:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001a12:	060d      	lsls	r5, r1, #24
 8001a14:	d50b      	bpl.n	8001a2e <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	2507      	movs	r5, #7
 8001a18:	4029      	ands	r1, r5
 8001a1a:	434c      	muls	r4, r1
 8001a1c:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a1e:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001a20:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d107      	bne.n	8001a36 <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8001a26:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001a28:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001a2e:	434c      	muls	r4, r1
 8001a30:	3451      	adds	r4, #81	@ 0x51
 8001a32:	34ff      	adds	r4, #255	@ 0xff
 8001a34:	e7f3      	b.n	8001a1e <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8001a36:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001a38:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001a3a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a3c:	e7f5      	b.n	8001a2a <HAL_PCDEx_PMAConfig+0x1c>

08001a3e <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001a3e:	6803      	ldr	r3, [r0, #0]
{
 8001a40:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8001a42:	20b4      	movs	r0, #180	@ 0xb4
 8001a44:	2101      	movs	r1, #1
{
 8001a46:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8001a48:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8001a4a:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8001a4c:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8001a4e:	2000      	movs	r0, #0
 8001a50:	00a4      	lsls	r4, r4, #2
 8001a52:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a54:	3354      	adds	r3, #84	@ 0x54
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a5a:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a5c:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a5e:	8819      	ldrh	r1, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8001a64:	bd10      	pop	{r4, pc}

08001a66 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001a66:	4770      	bx	lr

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	0004      	movs	r4, r0
 8001a6c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001a72:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001a74:	b005      	add	sp, #20
 8001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	07db      	lsls	r3, r3, #31
 8001a7c:	d433      	bmi.n	8001ae6 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	079b      	lsls	r3, r3, #30
 8001a82:	d500      	bpl.n	8001a86 <HAL_RCC_OscConfig+0x1e>
 8001a84:	e087      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	071b      	lsls	r3, r3, #28
 8001a8a:	d500      	bpl.n	8001a8e <HAL_RCC_OscConfig+0x26>
 8001a8c:	e0c8      	b.n	8001c20 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	075b      	lsls	r3, r3, #29
 8001a92:	d500      	bpl.n	8001a96 <HAL_RCC_OscConfig+0x2e>
 8001a94:	e0eb      	b.n	8001c6e <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	06db      	lsls	r3, r3, #27
 8001a9a:	d51a      	bpl.n	8001ad2 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a9c:	6962      	ldr	r2, [r4, #20]
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	4db9      	ldr	r5, [pc, #740]	@ (8001d88 <HAL_RCC_OscConfig+0x320>)
 8001aa2:	2a01      	cmp	r2, #1
 8001aa4:	d000      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x40>
 8001aa6:	e154      	b.n	8001d52 <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aa8:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aaa:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aac:	430b      	orrs	r3, r1
 8001aae:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001ab0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001ab6:	f7fe ff31 	bl	800091c <HAL_GetTick>
 8001aba:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001abc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001abe:	423b      	tst	r3, r7
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
 8001ac2:	e13f      	b.n	8001d44 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ac4:	21f8      	movs	r1, #248	@ 0xf8
 8001ac6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001ac8:	69a3      	ldr	r3, [r4, #24]
 8001aca:	438a      	bics	r2, r1
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	069b      	lsls	r3, r3, #26
 8001ad6:	d500      	bpl.n	8001ada <HAL_RCC_OscConfig+0x72>
 8001ad8:	e162      	b.n	8001da0 <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ada:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d000      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x7a>
 8001ae0:	e1a1      	b.n	8001e26 <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e7c6      	b.n	8001a74 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4da7      	ldr	r5, [pc, #668]	@ (8001d88 <HAL_RCC_OscConfig+0x320>)
 8001aea:	686b      	ldr	r3, [r5, #4]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d00b      	beq.n	8001b0a <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af2:	686b      	ldr	r3, [r5, #4]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d10e      	bne.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001afa:	22c0      	movs	r2, #192	@ 0xc0
 8001afc:	686b      	ldr	r3, [r5, #4]
 8001afe:	0252      	lsls	r2, r2, #9
 8001b00:	4013      	ands	r3, r2
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	0252      	lsls	r2, r2, #9
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d106      	bne.n	8001b18 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	039b      	lsls	r3, r3, #14
 8001b0e:	d5b6      	bpl.n	8001a7e <HAL_RCC_OscConfig+0x16>
 8001b10:	6863      	ldr	r3, [r4, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1b3      	bne.n	8001a7e <HAL_RCC_OscConfig+0x16>
 8001b16:	e7ac      	b.n	8001a72 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	6863      	ldr	r3, [r4, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d113      	bne.n	8001b46 <HAL_RCC_OscConfig+0xde>
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	682a      	ldr	r2, [r5, #0]
 8001b22:	025b      	lsls	r3, r3, #9
 8001b24:	4313      	orrs	r3, r2
 8001b26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b28:	f7fe fef8 	bl	800091c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2c:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001b2e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b30:	02bf      	lsls	r7, r7, #10
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	423b      	tst	r3, r7
 8001b36:	d1a2      	bne.n	8001a7e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b38:	f7fe fef0 	bl	800091c <HAL_GetTick>
 8001b3c:	1b80      	subs	r0, r0, r6
 8001b3e:	2864      	cmp	r0, #100	@ 0x64
 8001b40:	d9f7      	bls.n	8001b32 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001b42:	2003      	movs	r0, #3
 8001b44:	e796      	b.n	8001a74 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_OscConfig+0x10e>
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	4a8f      	ldr	r2, [pc, #572]	@ (8001d8c <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	4013      	ands	r3, r2
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	4a8e      	ldr	r2, [pc, #568]	@ (8001d90 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b58:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fedd 	bl	800091c <HAL_GetTick>
 8001b62:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	423b      	tst	r3, r7
 8001b68:	d089      	beq.n	8001a7e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7fe fed7 	bl	800091c <HAL_GetTick>
 8001b6e:	1b80      	subs	r0, r0, r6
 8001b70:	2864      	cmp	r0, #100	@ 0x64
 8001b72:	d9f7      	bls.n	8001b64 <HAL_RCC_OscConfig+0xfc>
 8001b74:	e7e5      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d105      	bne.n	8001b86 <HAL_RCC_OscConfig+0x11e>
 8001b7a:	2380      	movs	r3, #128	@ 0x80
 8001b7c:	682a      	ldr	r2, [r5, #0]
 8001b7e:	02db      	lsls	r3, r3, #11
 8001b80:	4313      	orrs	r3, r2
 8001b82:	602b      	str	r3, [r5, #0]
 8001b84:	e7cb      	b.n	8001b1e <HAL_RCC_OscConfig+0xb6>
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	4a80      	ldr	r2, [pc, #512]	@ (8001d8c <HAL_RCC_OscConfig+0x324>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	602b      	str	r3, [r5, #0]
 8001b8e:	682b      	ldr	r3, [r5, #0]
 8001b90:	4a7f      	ldr	r2, [pc, #508]	@ (8001d90 <HAL_RCC_OscConfig+0x328>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	e7c7      	b.n	8001b26 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b96:	220c      	movs	r2, #12
 8001b98:	4d7b      	ldr	r5, [pc, #492]	@ (8001d88 <HAL_RCC_OscConfig+0x320>)
 8001b9a:	686b      	ldr	r3, [r5, #4]
 8001b9c:	4213      	tst	r3, r2
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ba0:	686b      	ldr	r3, [r5, #4]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d116      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x16e>
 8001ba8:	22c0      	movs	r2, #192	@ 0xc0
 8001baa:	686b      	ldr	r3, [r5, #4]
 8001bac:	0252      	lsls	r2, r2, #9
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2280      	movs	r2, #128	@ 0x80
 8001bb2:	0212      	lsls	r2, r2, #8
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d10e      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	079b      	lsls	r3, r3, #30
 8001bbc:	d503      	bpl.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
 8001bbe:	68e3      	ldr	r3, [r4, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d000      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
 8001bc4:	e755      	b.n	8001a72 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	21f8      	movs	r1, #248	@ 0xf8
 8001bc8:	682a      	ldr	r2, [r5, #0]
 8001bca:	6923      	ldr	r3, [r4, #16]
 8001bcc:	438a      	bics	r2, r1
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	602b      	str	r3, [r5, #0]
 8001bd4:	e757      	b.n	8001a86 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd6:	68e2      	ldr	r2, [r4, #12]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	2a00      	cmp	r2, #0
 8001bdc:	d00f      	beq.n	8001bfe <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8001bde:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001be2:	4313      	orrs	r3, r2
 8001be4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001be6:	f7fe fe99 	bl	800091c <HAL_GetTick>
 8001bea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	423b      	tst	r3, r7
 8001bf0:	d1e9      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7fe fe93 	bl	800091c <HAL_GetTick>
 8001bf6:	1b80      	subs	r0, r0, r6
 8001bf8:	2802      	cmp	r0, #2
 8001bfa:	d9f7      	bls.n	8001bec <HAL_RCC_OscConfig+0x184>
 8001bfc:	e7a1      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c00:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001c02:	439a      	bics	r2, r3
 8001c04:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001c06:	f7fe fe89 	bl	800091c <HAL_GetTick>
 8001c0a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	423b      	tst	r3, r7
 8001c10:	d100      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1ac>
 8001c12:	e738      	b.n	8001a86 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c14:	f7fe fe82 	bl	800091c <HAL_GetTick>
 8001c18:	1b80      	subs	r0, r0, r6
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	d9f6      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1a4>
 8001c1e:	e790      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c20:	69e2      	ldr	r2, [r4, #28]
 8001c22:	2301      	movs	r3, #1
 8001c24:	4d58      	ldr	r5, [pc, #352]	@ (8001d88 <HAL_RCC_OscConfig+0x320>)
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d010      	beq.n	8001c4c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001c32:	f7fe fe73 	bl	800091c <HAL_GetTick>
 8001c36:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c38:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001c3a:	423b      	tst	r3, r7
 8001c3c:	d000      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1d8>
 8001c3e:	e726      	b.n	8001a8e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c40:	f7fe fe6c 	bl	800091c <HAL_GetTick>
 8001c44:	1b80      	subs	r0, r0, r6
 8001c46:	2802      	cmp	r0, #2
 8001c48:	d9f6      	bls.n	8001c38 <HAL_RCC_OscConfig+0x1d0>
 8001c4a:	e77a      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8001c4c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001c50:	439a      	bics	r2, r3
 8001c52:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001c54:	f7fe fe62 	bl	800091c <HAL_GetTick>
 8001c58:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001c5c:	423b      	tst	r3, r7
 8001c5e:	d100      	bne.n	8001c62 <HAL_RCC_OscConfig+0x1fa>
 8001c60:	e715      	b.n	8001a8e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c62:	f7fe fe5b 	bl	800091c <HAL_GetTick>
 8001c66:	1b80      	subs	r0, r0, r6
 8001c68:	2802      	cmp	r0, #2
 8001c6a:	d9f6      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f2>
 8001c6c:	e769      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001c70:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4d45      	ldr	r5, [pc, #276]	@ (8001d88 <HAL_RCC_OscConfig+0x320>)
 8001c74:	0552      	lsls	r2, r2, #21
 8001c76:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001c78:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4213      	tst	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	69eb      	ldr	r3, [r5, #28]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61eb      	str	r3, [r5, #28]
 8001c84:	69eb      	ldr	r3, [r5, #28]
 8001c86:	4013      	ands	r3, r2
 8001c88:	9303      	str	r3, [sp, #12]
 8001c8a:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	2780      	movs	r7, #128	@ 0x80
 8001c92:	4e40      	ldr	r6, [pc, #256]	@ (8001d94 <HAL_RCC_OscConfig+0x32c>)
 8001c94:	007f      	lsls	r7, r7, #1
 8001c96:	6833      	ldr	r3, [r6, #0]
 8001c98:	423b      	tst	r3, r7
 8001c9a:	d015      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	68a3      	ldr	r3, [r4, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d122      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x280>
 8001ca2:	6a2a      	ldr	r2, [r5, #32]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001ca8:	f7fe fe38 	bl	800091c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001cae:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	6a2b      	ldr	r3, [r5, #32]
 8001cb2:	423b      	tst	r3, r7
 8001cb4:	d03f      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 8001cb6:	9b00      	ldr	r3, [sp, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d000      	beq.n	8001cbe <HAL_RCC_OscConfig+0x256>
 8001cbc:	e6eb      	b.n	8001a96 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	69eb      	ldr	r3, [r5, #28]
 8001cc0:	4a35      	ldr	r2, [pc, #212]	@ (8001d98 <HAL_RCC_OscConfig+0x330>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61eb      	str	r3, [r5, #28]
 8001cc6:	e6e6      	b.n	8001a96 <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc8:	6833      	ldr	r3, [r6, #0]
 8001cca:	433b      	orrs	r3, r7
 8001ccc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001cce:	f7fe fe25 	bl	800091c <HAL_GetTick>
 8001cd2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	423b      	tst	r3, r7
 8001cd8:	d1e0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7fe fe1f 	bl	800091c <HAL_GetTick>
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	1ac0      	subs	r0, r0, r3
 8001ce2:	2864      	cmp	r0, #100	@ 0x64
 8001ce4:	d9f6      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x26c>
 8001ce6:	e72c      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d114      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2b0>
 8001cee:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	622b      	str	r3, [r5, #32]
 8001cf6:	6a2b      	ldr	r3, [r5, #32]
 8001cf8:	3203      	adds	r2, #3
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fe0d 	bl	800091c <HAL_GetTick>
 8001d02:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	6a2b      	ldr	r3, [r5, #32]
 8001d06:	423b      	tst	r3, r7
 8001d08:	d0d5      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe fe07 	bl	800091c <HAL_GetTick>
 8001d0e:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <HAL_RCC_OscConfig+0x334>)
 8001d10:	1b80      	subs	r0, r0, r6
 8001d12:	4298      	cmp	r0, r3
 8001d14:	d9f6      	bls.n	8001d04 <HAL_RCC_OscConfig+0x29c>
 8001d16:	e714      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2c0>
 8001d1c:	6a29      	ldr	r1, [r5, #32]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	430b      	orrs	r3, r1
 8001d22:	622b      	str	r3, [r5, #32]
 8001d24:	6a2b      	ldr	r3, [r5, #32]
 8001d26:	e7bd      	b.n	8001ca4 <HAL_RCC_OscConfig+0x23c>
 8001d28:	6a2b      	ldr	r3, [r5, #32]
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	622b      	str	r3, [r5, #32]
 8001d30:	6a2b      	ldr	r3, [r5, #32]
 8001d32:	4393      	bics	r3, r2
 8001d34:	e7b7      	b.n	8001ca6 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7fe fdf1 	bl	800091c <HAL_GetTick>
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_RCC_OscConfig+0x334>)
 8001d3c:	1b80      	subs	r0, r0, r6
 8001d3e:	4298      	cmp	r0, r3
 8001d40:	d9b6      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x248>
 8001d42:	e6fe      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d44:	f7fe fdea 	bl	800091c <HAL_GetTick>
 8001d48:	1b80      	subs	r0, r0, r6
 8001d4a:	2802      	cmp	r0, #2
 8001d4c:	d800      	bhi.n	8001d50 <HAL_RCC_OscConfig+0x2e8>
 8001d4e:	e6b5      	b.n	8001abc <HAL_RCC_OscConfig+0x54>
 8001d50:	e6f7      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d52:	3205      	adds	r2, #5
 8001d54:	d103      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d56:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001d58:	439a      	bics	r2, r3
 8001d5a:	636a      	str	r2, [r5, #52]	@ 0x34
 8001d5c:	e6b2      	b.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d5e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d60:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d62:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001d64:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d66:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001d68:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fdd5 	bl	800091c <HAL_GetTick>
 8001d72:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d74:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001d76:	423b      	tst	r3, r7
 8001d78:	d100      	bne.n	8001d7c <HAL_RCC_OscConfig+0x314>
 8001d7a:	e6aa      	b.n	8001ad2 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d7c:	f7fe fdce 	bl	800091c <HAL_GetTick>
 8001d80:	1b80      	subs	r0, r0, r6
 8001d82:	2802      	cmp	r0, #2
 8001d84:	d9f6      	bls.n	8001d74 <HAL_RCC_OscConfig+0x30c>
 8001d86:	e6dc      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	fffeffff 	.word	0xfffeffff
 8001d90:	fffbffff 	.word	0xfffbffff
 8001d94:	40007000 	.word	0x40007000
 8001d98:	efffffff 	.word	0xefffffff
 8001d9c:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001da0:	220c      	movs	r2, #12
 8001da2:	4d55      	ldr	r5, [pc, #340]	@ (8001ef8 <HAL_RCC_OscConfig+0x490>)
 8001da4:	686b      	ldr	r3, [r5, #4]
 8001da6:	4013      	ands	r3, r2
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001dac:	686b      	ldr	r3, [r5, #4]
 8001dae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d10e      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001db4:	22c0      	movs	r2, #192	@ 0xc0
 8001db6:	686b      	ldr	r3, [r5, #4]
 8001db8:	0252      	lsls	r2, r2, #9
 8001dba:	4013      	ands	r3, r2
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001dc0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001dc2:	039b      	lsls	r3, r3, #14
 8001dc4:	d400      	bmi.n	8001dc8 <HAL_RCC_OscConfig+0x360>
 8001dc6:	e688      	b.n	8001ada <HAL_RCC_OscConfig+0x72>
 8001dc8:	6a23      	ldr	r3, [r4, #32]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d000      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x368>
 8001dce:	e650      	b.n	8001a72 <HAL_RCC_OscConfig+0xa>
 8001dd0:	e683      	b.n	8001ada <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd2:	6a23      	ldr	r3, [r4, #32]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001ddc:	025b      	lsls	r3, r3, #9
 8001dde:	4313      	orrs	r3, r2
 8001de0:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8001de2:	f7fe fd9b 	bl	800091c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001de6:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001de8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001dea:	02bf      	lsls	r7, r7, #10
 8001dec:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001dee:	423b      	tst	r3, r7
 8001df0:	d000      	beq.n	8001df4 <HAL_RCC_OscConfig+0x38c>
 8001df2:	e672      	b.n	8001ada <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df4:	f7fe fd92 	bl	800091c <HAL_GetTick>
 8001df8:	1b80      	subs	r0, r0, r6
 8001dfa:	2802      	cmp	r0, #2
 8001dfc:	d9f6      	bls.n	8001dec <HAL_RCC_OscConfig+0x384>
 8001dfe:	e6a0      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001e00:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001e02:	4a3e      	ldr	r2, [pc, #248]	@ (8001efc <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e04:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001e06:	4013      	ands	r3, r2
 8001e08:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fd87 	bl	800091c <HAL_GetTick>
 8001e0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e10:	02bf      	lsls	r7, r7, #10
 8001e12:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001e14:	423b      	tst	r3, r7
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3b2>
 8001e18:	e65f      	b.n	8001ada <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e1a:	f7fe fd7f 	bl	800091c <HAL_GetTick>
 8001e1e:	1b80      	subs	r0, r0, r6
 8001e20:	2802      	cmp	r0, #2
 8001e22:	d9f6      	bls.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
 8001e24:	e68d      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e26:	210c      	movs	r1, #12
 8001e28:	4d33      	ldr	r5, [pc, #204]	@ (8001ef8 <HAL_RCC_OscConfig+0x490>)
 8001e2a:	686a      	ldr	r2, [r5, #4]
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	2a08      	cmp	r2, #8
 8001e30:	d047      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e32:	4a33      	ldr	r2, [pc, #204]	@ (8001f00 <HAL_RCC_OscConfig+0x498>)
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d132      	bne.n	8001e9e <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8001e38:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e40:	f7fe fd6c 	bl	800091c <HAL_GetTick>
 8001e44:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	04bf      	lsls	r7, r7, #18
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	423b      	tst	r3, r7
 8001e4c:	d121      	bne.n	8001e92 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4e:	220f      	movs	r2, #15
 8001e50:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e52:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e54:	4393      	bics	r3, r2
 8001e56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e58:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001e5e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001e60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001e62:	686a      	ldr	r2, [r5, #4]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	4927      	ldr	r1, [pc, #156]	@ (8001f04 <HAL_RCC_OscConfig+0x49c>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	682a      	ldr	r2, [r5, #0]
 8001e72:	045b      	lsls	r3, r3, #17
 8001e74:	4313      	orrs	r3, r2
 8001e76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e78:	f7fe fd50 	bl	800091c <HAL_GetTick>
 8001e7c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7e:	682b      	ldr	r3, [r5, #0]
 8001e80:	4233      	tst	r3, r6
 8001e82:	d000      	beq.n	8001e86 <HAL_RCC_OscConfig+0x41e>
 8001e84:	e62d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e86:	f7fe fd49 	bl	800091c <HAL_GetTick>
 8001e8a:	1b00      	subs	r0, r0, r4
 8001e8c:	2802      	cmp	r0, #2
 8001e8e:	d9f6      	bls.n	8001e7e <HAL_RCC_OscConfig+0x416>
 8001e90:	e657      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fd43 	bl	800091c <HAL_GetTick>
 8001e96:	1b80      	subs	r0, r0, r6
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	d9d5      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3e0>
 8001e9c:	e651      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fd39 	bl	800091c <HAL_GetTick>
 8001eaa:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	04b6      	lsls	r6, r6, #18
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	4233      	tst	r3, r6
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x44e>
 8001eb4:	e615      	b.n	8001ae2 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe fd31 	bl	800091c <HAL_GetTick>
 8001eba:	1b00      	subs	r0, r0, r4
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d9f6      	bls.n	8001eae <HAL_RCC_OscConfig+0x446>
 8001ec0:	e63f      	b.n	8001b42 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d100      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x460>
 8001ec6:	e5d4      	b.n	8001a72 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec8:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8001eca:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001ece:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001ed0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	4002      	ands	r2, r0
 8001ed4:	428a      	cmp	r2, r1
 8001ed6:	d000      	beq.n	8001eda <HAL_RCC_OscConfig+0x472>
 8001ed8:	e5cb      	b.n	8001a72 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eda:	220f      	movs	r2, #15
 8001edc:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d000      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x47e>
 8001ee4:	e5c5      	b.n	8001a72 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee6:	23f0      	movs	r3, #240	@ 0xf0
 8001ee8:	039b      	lsls	r3, r3, #14
 8001eea:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001eee:	1ac0      	subs	r0, r0, r3
 8001ef0:	1e43      	subs	r3, r0, #1
 8001ef2:	4198      	sbcs	r0, r3
 8001ef4:	b2c0      	uxtb	r0, r0
 8001ef6:	e5bd      	b.n	8001a74 <HAL_RCC_OscConfig+0xc>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	fffeffff 	.word	0xfffeffff
 8001f00:	feffffff 	.word	0xfeffffff
 8001f04:	ffc27fff 	.word	0xffc27fff

08001f08 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f08:	200c      	movs	r0, #12
{
 8001f0a:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001f0c:	4d13      	ldr	r5, [pc, #76]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001f0e:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f10:	4018      	ands	r0, r3
 8001f12:	2808      	cmp	r0, #8
 8001f14:	d008      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f16:	380c      	subs	r0, #12
 8001f18:	4243      	negs	r3, r0
 8001f1a:	4158      	adcs	r0, r3
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x58>)
 8001f1e:	4240      	negs	r0, r0
 8001f20:	4018      	ands	r0, r3
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001f24:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f28:	200f      	movs	r0, #15
 8001f2a:	490f      	ldr	r1, [pc, #60]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x60>)
 8001f2c:	0c9a      	lsrs	r2, r3, #18
 8001f2e:	4002      	ands	r2, r0
 8001f30:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f32:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001f34:	490d      	ldr	r1, [pc, #52]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x64>)
 8001f36:	4002      	ands	r2, r0
 8001f38:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f3a:	22c0      	movs	r2, #192	@ 0xc0
 8001f3c:	2080      	movs	r0, #128	@ 0x80
 8001f3e:	0252      	lsls	r2, r2, #9
 8001f40:	4013      	ands	r3, r2
 8001f42:	0240      	lsls	r0, r0, #9
 8001f44:	4283      	cmp	r3, r0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f48:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d1fb      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f50:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f52:	f7fe f8ff 	bl	8000154 <__udivsi3>
 8001f56:	4360      	muls	r0, r4
 8001f58:	e7e5      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1e>
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	02625a00 	.word	0x02625a00
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	08004d1c 	.word	0x08004d1c
 8001f6c:	08004d0c 	.word	0x08004d0c
 8001f70:	02dc6c00 	.word	0x02dc6c00

08001f74 <HAL_RCC_ClockConfig>:
{
 8001f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f76:	0004      	movs	r4, r0
 8001f78:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001f7e:	2001      	movs	r0, #1
}
 8001f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f82:	2201      	movs	r2, #1
 8001f84:	4d3a      	ldr	r5, [pc, #232]	@ (8002070 <HAL_RCC_ClockConfig+0xfc>)
 8001f86:	682b      	ldr	r3, [r5, #0]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	428b      	cmp	r3, r1
 8001f8c:	d31c      	bcc.n	8001fc8 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8e:	6822      	ldr	r2, [r4, #0]
 8001f90:	0793      	lsls	r3, r2, #30
 8001f92:	d422      	bmi.n	8001fda <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f94:	07d2      	lsls	r2, r2, #31
 8001f96:	d42f      	bmi.n	8001ff8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	2301      	movs	r3, #1
 8001f9a:	682a      	ldr	r2, [r5, #0]
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	42ba      	cmp	r2, r7
 8001fa0:	d857      	bhi.n	8002052 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	4d33      	ldr	r5, [pc, #204]	@ (8002074 <HAL_RCC_ClockConfig+0x100>)
 8001fa6:	075b      	lsls	r3, r3, #29
 8001fa8:	d45a      	bmi.n	8002060 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001faa:	f7ff ffad 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001fae:	686b      	ldr	r3, [r5, #4]
 8001fb0:	4a31      	ldr	r2, [pc, #196]	@ (8002078 <HAL_RCC_ClockConfig+0x104>)
 8001fb2:	061b      	lsls	r3, r3, #24
 8001fb4:	0f1b      	lsrs	r3, r3, #28
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	4930      	ldr	r1, [pc, #192]	@ (800207c <HAL_RCC_ClockConfig+0x108>)
 8001fba:	40d8      	lsrs	r0, r3
 8001fbc:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7fe fc6c 	bl	800089c <HAL_InitTick>
  return HAL_OK;
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	e7db      	b.n	8001f80 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc8:	682b      	ldr	r3, [r5, #0]
 8001fca:	4393      	bics	r3, r2
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd0:	682b      	ldr	r3, [r5, #0]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d1d2      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xa>
 8001fd8:	e7d9      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fda:	4926      	ldr	r1, [pc, #152]	@ (8002074 <HAL_RCC_ClockConfig+0x100>)
 8001fdc:	0753      	lsls	r3, r2, #29
 8001fde:	d504      	bpl.n	8001fea <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fe0:	23e0      	movs	r3, #224	@ 0xe0
 8001fe2:	6848      	ldr	r0, [r1, #4]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4303      	orrs	r3, r0
 8001fe8:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fea:	20f0      	movs	r0, #240	@ 0xf0
 8001fec:	684b      	ldr	r3, [r1, #4]
 8001fee:	4383      	bics	r3, r0
 8001ff0:	68a0      	ldr	r0, [r4, #8]
 8001ff2:	4303      	orrs	r3, r0
 8001ff4:	604b      	str	r3, [r1, #4]
 8001ff6:	e7cd      	b.n	8001f94 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	6862      	ldr	r2, [r4, #4]
 8001ffa:	4e1e      	ldr	r6, [pc, #120]	@ (8002074 <HAL_RCC_ClockConfig+0x100>)
 8001ffc:	2a01      	cmp	r2, #1
 8001ffe:	d103      	bne.n	8002008 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002002:	039b      	lsls	r3, r3, #14
 8002004:	d405      	bmi.n	8002012 <HAL_RCC_ClockConfig+0x9e>
 8002006:	e7ba      	b.n	8001f7e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002008:	2a02      	cmp	r2, #2
 800200a:	d11a      	bne.n	8002042 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200c:	6833      	ldr	r3, [r6, #0]
 800200e:	019b      	lsls	r3, r3, #6
 8002010:	d5b5      	bpl.n	8001f7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	2103      	movs	r1, #3
 8002014:	6873      	ldr	r3, [r6, #4]
 8002016:	438b      	bics	r3, r1
 8002018:	4313      	orrs	r3, r2
 800201a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800201c:	f7fe fc7e 	bl	800091c <HAL_GetTick>
 8002020:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	230c      	movs	r3, #12
 8002024:	6872      	ldr	r2, [r6, #4]
 8002026:	401a      	ands	r2, r3
 8002028:	6863      	ldr	r3, [r4, #4]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	429a      	cmp	r2, r3
 800202e:	d0b3      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7fe fc74 	bl	800091c <HAL_GetTick>
 8002034:	9b01      	ldr	r3, [sp, #4]
 8002036:	1ac0      	subs	r0, r0, r3
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_RCC_ClockConfig+0x10c>)
 800203a:	4298      	cmp	r0, r3
 800203c:	d9f1      	bls.n	8002022 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 800203e:	2003      	movs	r0, #3
 8002040:	e79e      	b.n	8001f80 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002042:	2a03      	cmp	r2, #3
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002046:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8002048:	e7db      	b.n	8002002 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	6833      	ldr	r3, [r6, #0]
 800204c:	079b      	lsls	r3, r3, #30
 800204e:	d4e0      	bmi.n	8002012 <HAL_RCC_ClockConfig+0x9e>
 8002050:	e795      	b.n	8001f7e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	682a      	ldr	r2, [r5, #0]
 8002054:	439a      	bics	r2, r3
 8002056:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002058:	682a      	ldr	r2, [r5, #0]
 800205a:	421a      	tst	r2, r3
 800205c:	d0a1      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x2e>
 800205e:	e78e      	b.n	8001f7e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	686b      	ldr	r3, [r5, #4]
 8002062:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <HAL_RCC_ClockConfig+0x110>)
 8002064:	4013      	ands	r3, r2
 8002066:	68e2      	ldr	r2, [r4, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	606b      	str	r3, [r5, #4]
 800206c:	e79d      	b.n	8001faa <HAL_RCC_ClockConfig+0x36>
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	08004cfc 	.word	0x08004cfc
 800207c:	20000000 	.word	0x20000000
 8002080:	00001388 	.word	0x00001388
 8002084:	fffff8ff 	.word	0xfffff8ff

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002088:	4b04      	ldr	r3, [pc, #16]	@ (800209c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4905      	ldr	r1, [pc, #20]	@ (80020a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002090:	055b      	lsls	r3, r3, #21
 8002092:	0f5b      	lsrs	r3, r3, #29
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	6810      	ldr	r0, [r2, #0]
 8002098:	40d8      	lsrs	r0, r3
}    
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	20000000 	.word	0x20000000
 80020a4:	08004cf4 	.word	0x08004cf4

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020aa:	6803      	ldr	r3, [r0, #0]
{
 80020ac:	0005      	movs	r5, r0
 80020ae:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020b0:	03db      	lsls	r3, r3, #15
 80020b2:	d52b      	bpl.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b8:	4c41      	ldr	r4, [pc, #260]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80020ba:	0552      	lsls	r2, r2, #21
 80020bc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80020be:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c0:	4213      	tst	r3, r2
 80020c2:	d108      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	69e3      	ldr	r3, [r4, #28]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61e3      	str	r3, [r4, #28]
 80020ca:	69e3      	ldr	r3, [r4, #28]
 80020cc:	4013      	ands	r3, r2
 80020ce:	9303      	str	r3, [sp, #12]
 80020d0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	2780      	movs	r7, #128	@ 0x80
 80020d8:	4e3a      	ldr	r6, [pc, #232]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80020da:	007f      	lsls	r7, r7, #1
 80020dc:	6833      	ldr	r3, [r6, #0]
 80020de:	423b      	tst	r3, r7
 80020e0:	d034      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xa4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e2:	6a21      	ldr	r1, [r4, #32]
 80020e4:	22c0      	movs	r2, #192	@ 0xc0
 80020e6:	0008      	movs	r0, r1
 80020e8:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ea:	686b      	ldr	r3, [r5, #4]
 80020ec:	4e36      	ldr	r6, [pc, #216]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ee:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f0:	4211      	tst	r1, r2
 80020f2:	d13d      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xc8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f4:	6a23      	ldr	r3, [r4, #32]
 80020f6:	686a      	ldr	r2, [r5, #4]
 80020f8:	4033      	ands	r3, r6
 80020fa:	4313      	orrs	r3, r2
 80020fc:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020fe:	9b00      	ldr	r3, [sp, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d103      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	69e3      	ldr	r3, [r4, #28]
 8002106:	4a31      	ldr	r2, [pc, #196]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002108:	4013      	ands	r3, r2
 800210a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	07da      	lsls	r2, r3, #31
 8002110:	d506      	bpl.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002112:	2003      	movs	r0, #3
 8002114:	492a      	ldr	r1, [pc, #168]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002116:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002118:	4382      	bics	r2, r0
 800211a:	68a8      	ldr	r0, [r5, #8]
 800211c:	4302      	orrs	r2, r0
 800211e:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002120:	069a      	lsls	r2, r3, #26
 8002122:	d506      	bpl.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002124:	2010      	movs	r0, #16
 8002126:	4926      	ldr	r1, [pc, #152]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002128:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800212a:	4382      	bics	r2, r0
 800212c:	68e8      	ldr	r0, [r5, #12]
 800212e:	4302      	orrs	r2, r0
 8002130:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002132:	039a      	lsls	r2, r3, #14
 8002134:	d506      	bpl.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002136:	2080      	movs	r0, #128	@ 0x80
 8002138:	4921      	ldr	r1, [pc, #132]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800213a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800213c:	4382      	bics	r2, r0
 800213e:	6968      	ldr	r0, [r5, #20]
 8002140:	4302      	orrs	r2, r0
 8002142:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002144:	055b      	lsls	r3, r3, #21
 8002146:	d433      	bmi.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002148:	2000      	movs	r0, #0
 800214a:	e00f      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214c:	6833      	ldr	r3, [r6, #0]
 800214e:	433b      	orrs	r3, r7
 8002150:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002152:	f7fe fbe3 	bl	800091c <HAL_GetTick>
 8002156:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	6833      	ldr	r3, [r6, #0]
 800215a:	423b      	tst	r3, r7
 800215c:	d1c1      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7fe fbdd 	bl	800091c <HAL_GetTick>
 8002162:	9b01      	ldr	r3, [sp, #4]
 8002164:	1ac0      	subs	r0, r0, r3
 8002166:	2864      	cmp	r0, #100	@ 0x64
 8002168:	d9f6      	bls.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 800216a:	2003      	movs	r0, #3
}
 800216c:	b005      	add	sp, #20
 800216e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002170:	4013      	ands	r3, r2
 8002172:	4283      	cmp	r3, r0
 8002174:	d0be      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002176:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002178:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800217a:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800217c:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800217e:	0252      	lsls	r2, r2, #9
 8002180:	4302      	orrs	r2, r0
 8002182:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002184:	6a22      	ldr	r2, [r4, #32]
 8002186:	4812      	ldr	r0, [pc, #72]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002188:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800218a:	4002      	ands	r2, r0
 800218c:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 800218e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002190:	07db      	lsls	r3, r3, #31
 8002192:	d5af      	bpl.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8002194:	f7fe fbc2 	bl	800091c <HAL_GetTick>
 8002198:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	2202      	movs	r2, #2
 800219c:	6a23      	ldr	r3, [r4, #32]
 800219e:	4213      	tst	r3, r2
 80021a0:	d1a8      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe fbbb 	bl	800091c <HAL_GetTick>
 80021a6:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80021a8:	1bc0      	subs	r0, r0, r7
 80021aa:	4298      	cmp	r0, r3
 80021ac:	d9f5      	bls.n	800219a <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80021ae:	e7dc      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021b0:	2140      	movs	r1, #64	@ 0x40
 80021b2:	4a03      	ldr	r2, [pc, #12]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80021b4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80021b6:	438b      	bics	r3, r1
 80021b8:	6929      	ldr	r1, [r5, #16]
 80021ba:	430b      	orrs	r3, r1
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	e7c3      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
 80021c8:	fffffcff 	.word	0xfffffcff
 80021cc:	efffffff 	.word	0xefffffff
 80021d0:	fffeffff 	.word	0xfffeffff
 80021d4:	00001388 	.word	0x00001388

080021d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021d8:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021de:	2201      	movs	r2, #1
 80021e0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021e4:	6801      	ldr	r1, [r0, #0]
 80021e6:	4d12      	ldr	r5, [pc, #72]	@ (8002230 <UART_EndRxTransfer+0x58>)
 80021e8:	680b      	ldr	r3, [r1, #0]
 80021ea:	402b      	ands	r3, r5
 80021ec:	600b      	str	r3, [r1, #0]
 80021ee:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021fa:	6801      	ldr	r1, [r0, #0]
 80021fc:	688b      	ldr	r3, [r1, #8]
 80021fe:	4393      	bics	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
 8002202:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002206:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002208:	4293      	cmp	r3, r2
 800220a:	d10a      	bne.n	8002222 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800220c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002214:	2410      	movs	r4, #16
 8002216:	6802      	ldr	r2, [r0, #0]
 8002218:	6813      	ldr	r3, [r2, #0]
 800221a:	43a3      	bics	r3, r4
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002222:	2220      	movs	r2, #32
 8002224:	1d03      	adds	r3, r0, #4
 8002226:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002228:	2300      	movs	r3, #0
 800222a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800222c:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800222e:	bd30      	pop	{r4, r5, pc}
 8002230:	fffffedf 	.word	0xfffffedf

08002234 <UART_SetConfig>:
{
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002238:	6925      	ldr	r5, [r4, #16]
 800223a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800223c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800223e:	4329      	orrs	r1, r5
 8002240:	6965      	ldr	r5, [r4, #20]
 8002242:	69c2      	ldr	r2, [r0, #28]
 8002244:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	4d3d      	ldr	r5, [pc, #244]	@ (8002340 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800224a:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800224c:	4028      	ands	r0, r5
 800224e:	4301      	orrs	r1, r0
 8002250:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	483b      	ldr	r0, [pc, #236]	@ (8002344 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 8002256:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002258:	4001      	ands	r1, r0
 800225a:	68e0      	ldr	r0, [r4, #12]
 800225c:	4301      	orrs	r1, r0
 800225e:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002260:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002262:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002264:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002266:	4d38      	ldr	r5, [pc, #224]	@ (8002348 <UART_SetConfig+0x114>)
 8002268:	4028      	ands	r0, r5
 800226a:	4301      	orrs	r1, r0
 800226c:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800226e:	4937      	ldr	r1, [pc, #220]	@ (800234c <UART_SetConfig+0x118>)
 8002270:	428b      	cmp	r3, r1
 8002272:	d115      	bne.n	80022a0 <UART_SetConfig+0x6c>
 8002274:	2103      	movs	r1, #3
 8002276:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <UART_SetConfig+0x11c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	400b      	ands	r3, r1
 800227c:	3b01      	subs	r3, #1
 800227e:	2b02      	cmp	r3, #2
 8002280:	d851      	bhi.n	8002326 <UART_SetConfig+0xf2>
 8002282:	4934      	ldr	r1, [pc, #208]	@ (8002354 <UART_SetConfig+0x120>)
 8002284:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	429a      	cmp	r2, r3
 800228c:	d127      	bne.n	80022de <UART_SetConfig+0xaa>
    switch (clocksource)
 800228e:	2808      	cmp	r0, #8
 8002290:	d847      	bhi.n	8002322 <UART_SetConfig+0xee>
 8002292:	f7fd ff4b 	bl	800012c <__gnu_thumb1_case_uqi>
 8002296:	464c      	.short	0x464c
 8002298:	460b460e 	.word	0x460b460e
 800229c:	4646      	.short	0x4646
 800229e:	0f          	.byte	0x0f
 800229f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022a0:	492d      	ldr	r1, [pc, #180]	@ (8002358 <UART_SetConfig+0x124>)
 80022a2:	185b      	adds	r3, r3, r1
 80022a4:	1e59      	subs	r1, r3, #1
 80022a6:	418b      	sbcs	r3, r1
 80022a8:	0118      	lsls	r0, r3, #4
 80022aa:	e7ec      	b.n	8002286 <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 80022ac:	f7ff fe2c 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 80022b0:	e03f      	b.n	8002332 <UART_SetConfig+0xfe>
    switch (clocksource)
 80022b2:	4a2a      	ldr	r2, [pc, #168]	@ (800235c <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022b4:	6861      	ldr	r1, [r4, #4]
 80022b6:	0052      	lsls	r2, r2, #1
 80022b8:	0848      	lsrs	r0, r1, #1
 80022ba:	1810      	adds	r0, r2, r0
 80022bc:	f7fd ff4a 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022c0:	0002      	movs	r2, r0
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <UART_SetConfig+0x12c>)
 80022c4:	3a10      	subs	r2, #16
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d82b      	bhi.n	8002322 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022ca:	230f      	movs	r3, #15
 80022cc:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022ce:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022d0:	439a      	bics	r2, r3
 80022d2:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022d4:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	4303      	orrs	r3, r0
 80022da:	60d3      	str	r3, [r2, #12]
 80022dc:	e02b      	b.n	8002336 <UART_SetConfig+0x102>
    switch (clocksource)
 80022de:	2808      	cmp	r0, #8
 80022e0:	d81f      	bhi.n	8002322 <UART_SetConfig+0xee>
 80022e2:	f7fd ff23 	bl	800012c <__gnu_thumb1_case_uqi>
 80022e6:	1e13      	.short	0x1e13
 80022e8:	1e181e05 	.word	0x1e181e05
 80022ec:	1e1e      	.short	0x1e1e
 80022ee:	1b          	.byte	0x1b
 80022ef:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80022f0:	481a      	ldr	r0, [pc, #104]	@ (800235c <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022f2:	6861      	ldr	r1, [r4, #4]
 80022f4:	084b      	lsrs	r3, r1, #1
 80022f6:	1818      	adds	r0, r3, r0
 80022f8:	f7fd ff2c 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022fc:	0002      	movs	r2, r0
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <UART_SetConfig+0x12c>)
 8002300:	3a10      	subs	r2, #16
 8002302:	429a      	cmp	r2, r3
 8002304:	d80d      	bhi.n	8002322 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	60d8      	str	r0, [r3, #12]
 800230a:	e014      	b.n	8002336 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 800230c:	f7ff febc 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002310:	2800      	cmp	r0, #0
 8002312:	d010      	beq.n	8002336 <UART_SetConfig+0x102>
 8002314:	e7ed      	b.n	80022f2 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8002316:	f7ff fdf7 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
        break;
 800231a:	e7f9      	b.n	8002310 <UART_SetConfig+0xdc>
    switch (clocksource)
 800231c:	2080      	movs	r0, #128	@ 0x80
 800231e:	0200      	lsls	r0, r0, #8
 8002320:	e7e7      	b.n	80022f2 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8002322:	2001      	movs	r0, #1
 8002324:	e008      	b.n	8002338 <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	429a      	cmp	r2, r3
 800232c:	d1ee      	bne.n	800230c <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800232e:	f7ff feab 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002332:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8002334:	d1be      	bne.n	80022b4 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 8002336:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002338:	2300      	movs	r3, #0
 800233a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800233c:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	efff69f3 	.word	0xefff69f3
 8002344:	ffffcfff 	.word	0xffffcfff
 8002348:	fffff4ff 	.word	0xfffff4ff
 800234c:	40013800 	.word	0x40013800
 8002350:	40021000 	.word	0x40021000
 8002354:	08004d2c 	.word	0x08004d2c
 8002358:	bfffbc00 	.word	0xbfffbc00
 800235c:	007a1200 	.word	0x007a1200
 8002360:	0000ffef 	.word	0x0000ffef

08002364 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002364:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002366:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002368:	071a      	lsls	r2, r3, #28
 800236a:	d506      	bpl.n	800237a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800236c:	6801      	ldr	r1, [r0, #0]
 800236e:	4c28      	ldr	r4, [pc, #160]	@ (8002410 <UART_AdvFeatureConfig+0xac>)
 8002370:	684a      	ldr	r2, [r1, #4]
 8002372:	4022      	ands	r2, r4
 8002374:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002376:	4322      	orrs	r2, r4
 8002378:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800237a:	07da      	lsls	r2, r3, #31
 800237c:	d506      	bpl.n	800238c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800237e:	6801      	ldr	r1, [r0, #0]
 8002380:	4c24      	ldr	r4, [pc, #144]	@ (8002414 <UART_AdvFeatureConfig+0xb0>)
 8002382:	684a      	ldr	r2, [r1, #4]
 8002384:	4022      	ands	r2, r4
 8002386:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002388:	4322      	orrs	r2, r4
 800238a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800238c:	079a      	lsls	r2, r3, #30
 800238e:	d506      	bpl.n	800239e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002390:	6801      	ldr	r1, [r0, #0]
 8002392:	4c21      	ldr	r4, [pc, #132]	@ (8002418 <UART_AdvFeatureConfig+0xb4>)
 8002394:	684a      	ldr	r2, [r1, #4]
 8002396:	4022      	ands	r2, r4
 8002398:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800239a:	4322      	orrs	r2, r4
 800239c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800239e:	075a      	lsls	r2, r3, #29
 80023a0:	d506      	bpl.n	80023b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023a2:	6801      	ldr	r1, [r0, #0]
 80023a4:	4c1d      	ldr	r4, [pc, #116]	@ (800241c <UART_AdvFeatureConfig+0xb8>)
 80023a6:	684a      	ldr	r2, [r1, #4]
 80023a8:	4022      	ands	r2, r4
 80023aa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80023ac:	4322      	orrs	r2, r4
 80023ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023b0:	06da      	lsls	r2, r3, #27
 80023b2:	d506      	bpl.n	80023c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023b4:	6801      	ldr	r1, [r0, #0]
 80023b6:	4c1a      	ldr	r4, [pc, #104]	@ (8002420 <UART_AdvFeatureConfig+0xbc>)
 80023b8:	688a      	ldr	r2, [r1, #8]
 80023ba:	4022      	ands	r2, r4
 80023bc:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80023be:	4322      	orrs	r2, r4
 80023c0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023c2:	069a      	lsls	r2, r3, #26
 80023c4:	d506      	bpl.n	80023d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023c6:	6801      	ldr	r1, [r0, #0]
 80023c8:	4c16      	ldr	r4, [pc, #88]	@ (8002424 <UART_AdvFeatureConfig+0xc0>)
 80023ca:	688a      	ldr	r2, [r1, #8]
 80023cc:	4022      	ands	r2, r4
 80023ce:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80023d0:	4322      	orrs	r2, r4
 80023d2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023d4:	065a      	lsls	r2, r3, #25
 80023d6:	d510      	bpl.n	80023fa <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023d8:	6801      	ldr	r1, [r0, #0]
 80023da:	4d13      	ldr	r5, [pc, #76]	@ (8002428 <UART_AdvFeatureConfig+0xc4>)
 80023dc:	684a      	ldr	r2, [r1, #4]
 80023de:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80023e0:	402a      	ands	r2, r5
 80023e2:	4322      	orrs	r2, r4
 80023e4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023e6:	2280      	movs	r2, #128	@ 0x80
 80023e8:	0352      	lsls	r2, r2, #13
 80023ea:	4294      	cmp	r4, r2
 80023ec:	d105      	bne.n	80023fa <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023ee:	684a      	ldr	r2, [r1, #4]
 80023f0:	4c0e      	ldr	r4, [pc, #56]	@ (800242c <UART_AdvFeatureConfig+0xc8>)
 80023f2:	4022      	ands	r2, r4
 80023f4:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80023f6:	4322      	orrs	r2, r4
 80023f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	d506      	bpl.n	800240c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023fe:	6802      	ldr	r2, [r0, #0]
 8002400:	490b      	ldr	r1, [pc, #44]	@ (8002430 <UART_AdvFeatureConfig+0xcc>)
 8002402:	6853      	ldr	r3, [r2, #4]
 8002404:	400b      	ands	r3, r1
 8002406:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002408:	430b      	orrs	r3, r1
 800240a:	6053      	str	r3, [r2, #4]
}
 800240c:	bd30      	pop	{r4, r5, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	ffff7fff 	.word	0xffff7fff
 8002414:	fffdffff 	.word	0xfffdffff
 8002418:	fffeffff 	.word	0xfffeffff
 800241c:	fffbffff 	.word	0xfffbffff
 8002420:	ffffefff 	.word	0xffffefff
 8002424:	ffffdfff 	.word	0xffffdfff
 8002428:	ffefffff 	.word	0xffefffff
 800242c:	ff9fffff 	.word	0xff9fffff
 8002430:	fff7ffff 	.word	0xfff7ffff

08002434 <UART_WaitOnFlagUntilTimeout>:
{
 8002434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002436:	0004      	movs	r4, r0
 8002438:	000d      	movs	r5, r1
 800243a:	0017      	movs	r7, r2
 800243c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243e:	6822      	ldr	r2, [r4, #0]
 8002440:	69d3      	ldr	r3, [r2, #28]
 8002442:	402b      	ands	r3, r5
 8002444:	1b5b      	subs	r3, r3, r5
 8002446:	4259      	negs	r1, r3
 8002448:	414b      	adcs	r3, r1
 800244a:	42bb      	cmp	r3, r7
 800244c:	d001      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800244e:	2000      	movs	r0, #0
 8002450:	e025      	b.n	800249e <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002452:	9b08      	ldr	r3, [sp, #32]
 8002454:	3301      	adds	r3, #1
 8002456:	d0f3      	beq.n	8002440 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe fa60 	bl	800091c <HAL_GetTick>
 800245c:	9b00      	ldr	r3, [sp, #0]
 800245e:	1ac0      	subs	r0, r0, r3
 8002460:	9b08      	ldr	r3, [sp, #32]
 8002462:	4298      	cmp	r0, r3
 8002464:	d82c      	bhi.n	80024c0 <UART_WaitOnFlagUntilTimeout+0x8c>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d02a      	beq.n	80024c0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	0752      	lsls	r2, r2, #29
 8002470:	d5e5      	bpl.n	800243e <UART_WaitOnFlagUntilTimeout+0xa>
 8002472:	002a      	movs	r2, r5
 8002474:	2140      	movs	r1, #64	@ 0x40
 8002476:	3a40      	subs	r2, #64	@ 0x40
 8002478:	438a      	bics	r2, r1
 800247a:	d0e0      	beq.n	800243e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	2608      	movs	r6, #8
 8002480:	0011      	movs	r1, r2
 8002482:	4031      	ands	r1, r6
 8002484:	9101      	str	r1, [sp, #4]
 8002486:	4232      	tst	r2, r6
 8002488:	d00a      	beq.n	80024a0 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800248a:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800248c:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800248e:	f7ff fea3 	bl	80021d8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002492:	19a3      	adds	r3, r4, r6
 8002494:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002496:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002498:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800249a:	3478      	adds	r4, #120	@ 0x78
 800249c:	7023      	strb	r3, [r4, #0]
}
 800249e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024a0:	2280      	movs	r2, #128	@ 0x80
 80024a2:	69d9      	ldr	r1, [r3, #28]
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	4211      	tst	r1, r2
 80024a8:	d0c9      	beq.n	800243e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024aa:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80024ac:	0020      	movs	r0, r4
 80024ae:	f7ff fe93 	bl	80021d8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024b2:	0023      	movs	r3, r4
 80024b4:	2220      	movs	r2, #32
 80024b6:	3308      	adds	r3, #8
 80024b8:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80024ba:	9b01      	ldr	r3, [sp, #4]
 80024bc:	3478      	adds	r4, #120	@ 0x78
 80024be:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80024c0:	2003      	movs	r0, #3
 80024c2:	e7ec      	b.n	800249e <UART_WaitOnFlagUntilTimeout+0x6a>

080024c4 <HAL_UART_Transmit>:
{
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	b087      	sub	sp, #28
 80024c8:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80024ca:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80024cc:	0004      	movs	r4, r0
 80024ce:	000d      	movs	r5, r1
 80024d0:	0017      	movs	r7, r2
    return HAL_BUSY;
 80024d2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d138      	bne.n	800254a <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 80024d8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80024da:	2900      	cmp	r1, #0
 80024dc:	d035      	beq.n	800254a <HAL_UART_Transmit+0x86>
 80024de:	2a00      	cmp	r2, #0
 80024e0:	d033      	beq.n	800254a <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	68a2      	ldr	r2, [r4, #8]
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d104      	bne.n	80024f6 <HAL_UART_Transmit+0x32>
 80024ec:	6923      	ldr	r3, [r4, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80024f2:	4201      	tst	r1, r0
 80024f4:	d129      	bne.n	800254a <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	0023      	movs	r3, r4
 80024f8:	2600      	movs	r6, #0
 80024fa:	3308      	adds	r3, #8
 80024fc:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fe:	2321      	movs	r3, #33	@ 0x21
 8002500:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8002502:	f7fe fa0b 	bl	800091c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002506:	0023      	movs	r3, r4
 8002508:	3350      	adds	r3, #80	@ 0x50
 800250a:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800250c:	3302      	adds	r3, #2
 800250e:	9303      	str	r3, [sp, #12]
 8002510:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002516:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	015b      	lsls	r3, r3, #5
 800251a:	429a      	cmp	r2, r3
 800251c:	d104      	bne.n	8002528 <HAL_UART_Transmit+0x64>
 800251e:	6923      	ldr	r3, [r4, #16]
 8002520:	42b3      	cmp	r3, r6
 8002522:	d101      	bne.n	8002528 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 8002524:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002526:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002528:	0023      	movs	r3, r4
 800252a:	3352      	adds	r3, #82	@ 0x52
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29a      	uxth	r2, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002534:	9b05      	ldr	r3, [sp, #20]
 8002536:	2140      	movs	r1, #64	@ 0x40
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	0020      	movs	r0, r4
 800253c:	9b04      	ldr	r3, [sp, #16]
 800253e:	f7ff ff79 	bl	8002434 <UART_WaitOnFlagUntilTimeout>
 8002542:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002544:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002546:	2800      	cmp	r0, #0
 8002548:	d10d      	bne.n	8002566 <HAL_UART_Transmit+0xa2>
}
 800254a:	b007      	add	sp, #28
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	9b05      	ldr	r3, [sp, #20]
 8002550:	2200      	movs	r2, #0
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2180      	movs	r1, #128	@ 0x80
 8002556:	0020      	movs	r0, r4
 8002558:	9b04      	ldr	r3, [sp, #16]
 800255a:	f7ff ff6b 	bl	8002434 <UART_WaitOnFlagUntilTimeout>
 800255e:	2800      	cmp	r0, #0
 8002560:	d003      	beq.n	800256a <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8002562:	2320      	movs	r3, #32
 8002564:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8002566:	2003      	movs	r0, #3
 8002568:	e7ef      	b.n	800254a <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800256a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800256c:	2d00      	cmp	r5, #0
 800256e:	d10b      	bne.n	8002588 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002570:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002572:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002574:	05db      	lsls	r3, r3, #23
 8002576:	0ddb      	lsrs	r3, r3, #23
 8002578:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800257a:	9b03      	ldr	r3, [sp, #12]
 800257c:	9a03      	ldr	r2, [sp, #12]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	b29b      	uxth	r3, r3
 8002584:	8013      	strh	r3, [r2, #0]
 8002586:	e7cf      	b.n	8002528 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002588:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800258a:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800258c:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 800258e:	e7f4      	b.n	800257a <HAL_UART_Transmit+0xb6>

08002590 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002590:	0003      	movs	r3, r0
{
 8002592:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002594:	2500      	movs	r5, #0
{
 8002596:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	3308      	adds	r3, #8
 800259a:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 800259c:	f7fe f9be 	bl	800091c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025a0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80025a2:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	071b      	lsls	r3, r3, #28
 80025a8:	d51d      	bpl.n	80025e6 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025aa:	2180      	movs	r1, #128	@ 0x80
 80025ac:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <UART_CheckIdleState+0xb8>)
 80025ae:	002a      	movs	r2, r5
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	0389      	lsls	r1, r1, #14
 80025b4:	0003      	movs	r3, r0
 80025b6:	0020      	movs	r0, r4
 80025b8:	f7ff ff3c 	bl	8002434 <UART_WaitOnFlagUntilTimeout>
 80025bc:	42a8      	cmp	r0, r5
 80025be:	d012      	beq.n	80025e6 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c4:	2301      	movs	r3, #1
 80025c6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025ca:	2080      	movs	r0, #128	@ 0x80
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	4383      	bics	r3, r0
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80025d8:	2320      	movs	r3, #32
 80025da:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80025dc:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80025de:	2300      	movs	r3, #0
 80025e0:	3478      	adds	r4, #120	@ 0x78
 80025e2:	7023      	strb	r3, [r4, #0]
}
 80025e4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025e6:	0025      	movs	r5, r4
 80025e8:	cd08      	ldmia	r5!, {r3}
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	075b      	lsls	r3, r3, #29
 80025ee:	d523      	bpl.n	8002638 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <UART_CheckIdleState+0xb8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	0020      	movs	r0, r4
 80025fa:	0033      	movs	r3, r6
 80025fc:	03c9      	lsls	r1, r1, #15
 80025fe:	f7ff ff19 	bl	8002434 <UART_WaitOnFlagUntilTimeout>
 8002602:	2800      	cmp	r0, #0
 8002604:	d018      	beq.n	8002638 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002606:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260a:	2201      	movs	r2, #1
 800260c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002610:	6821      	ldr	r1, [r4, #0]
 8002612:	4e0e      	ldr	r6, [pc, #56]	@ (800264c <UART_CheckIdleState+0xbc>)
 8002614:	680b      	ldr	r3, [r1, #0]
 8002616:	4033      	ands	r3, r6
 8002618:	600b      	str	r3, [r1, #0]
 800261a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002622:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	6821      	ldr	r1, [r4, #0]
 8002628:	688b      	ldr	r3, [r1, #8]
 800262a:	4393      	bics	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
 800262e:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002632:	2320      	movs	r3, #32
 8002634:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002636:	e7d1      	b.n	80025dc <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002638:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800263c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800263e:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002640:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002642:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002644:	e7cb      	b.n	80025de <UART_CheckIdleState+0x4e>
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	01ffffff 	.word	0x01ffffff
 800264c:	fffffedf 	.word	0xfffffedf

08002650 <HAL_UART_Init>:
{
 8002650:	b510      	push	{r4, lr}
 8002652:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002660:	0002      	movs	r2, r0
 8002662:	3278      	adds	r2, #120	@ 0x78
 8002664:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002666:	f7fe f859 	bl	800071c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800266a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800266c:	2101      	movs	r1, #1
 800266e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002670:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002672:	6813      	ldr	r3, [r2, #0]
 8002674:	438b      	bics	r3, r1
 8002676:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002678:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800267e:	0020      	movs	r0, r4
 8002680:	f7ff fe70 	bl	8002364 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002684:	0020      	movs	r0, r4
 8002686:	f7ff fdd5 	bl	8002234 <UART_SetConfig>
 800268a:	2801      	cmp	r0, #1
 800268c:	d0e3      	beq.n	8002656 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	4907      	ldr	r1, [pc, #28]	@ (80026b0 <HAL_UART_Init+0x60>)
 8002692:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002694:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002698:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	438a      	bics	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026a2:	2201      	movs	r2, #1
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026aa:	f7ff ff71 	bl	8002590 <UART_CheckIdleState>
 80026ae:	e7d3      	b.n	8002658 <HAL_UART_Init+0x8>
 80026b0:	ffffb7ff 	.word	0xffffb7ff

080026b4 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80026b4:	1d82      	adds	r2, r0, #6
{
 80026b6:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 80026b8:	2000      	movs	r0, #0
 80026ba:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80026bc:	4a01      	ldr	r2, [pc, #4]	@ (80026c4 <USB_EnableGlobalInt+0x10>)
 80026be:	3302      	adds	r3, #2
 80026c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 80026c2:	4770      	bx	lr
 80026c4:	ffffbf80 	.word	0xffffbf80

080026c8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80026c8:	3002      	adds	r0, #2
 80026ca:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 80026cc:	4a02      	ldr	r2, [pc, #8]	@ (80026d8 <USB_DisableGlobalInt+0x10>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 80026d2:	2000      	movs	r0, #0
 80026d4:	4770      	bx	lr
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	0000407f 	.word	0x0000407f

080026dc <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80026dc:	1c82      	adds	r2, r0, #2
{
 80026de:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80026e0:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80026e2:	2000      	movs	r0, #0
{
 80026e4:	b082      	sub	sp, #8
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80026e6:	87d1      	strh	r1, [r2, #62]	@ 0x3e
  USBx->CNTR = 0U;
 80026e8:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80026ea:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80026ec:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 80026ee:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 80026f0:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 80026f2:	b002      	add	sp, #8
 80026f4:	4770      	bx	lr
	...

080026f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80026f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80026fa:	780e      	ldrb	r6, [r1, #0]
 80026fc:	4a7a      	ldr	r2, [pc, #488]	@ (80028e8 <USB_ActivateEndpoint+0x1f0>)
 80026fe:	00b3      	lsls	r3, r6, #2
 8002700:	18c3      	adds	r3, r0, r3
 8002702:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002704:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002706:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002708:	2201      	movs	r2, #1
{
 800270a:	0005      	movs	r5, r0
      ret = HAL_ERROR;
 800270c:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 800270e:	2f03      	cmp	r7, #3
 8002710:	d808      	bhi.n	8002724 <USB_ActivateEndpoint+0x2c>
 8002712:	0038      	movs	r0, r7
 8002714:	f7fd fd0a 	bl	800012c <__gnu_thumb1_case_uqi>
 8002718:	3c3f4202 	.word	0x3c3f4202
      wEpRegVal |= USB_EP_CONTROL;
 800271c:	2280      	movs	r2, #128	@ 0x80
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8002722:	9700      	str	r7, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002724:	4a71      	ldr	r2, [pc, #452]	@ (80028ec <USB_ActivateEndpoint+0x1f4>)
 8002726:	4314      	orrs	r4, r2
 8002728:	b2a4      	uxth	r4, r4
 800272a:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800272c:	8818      	ldrh	r0, [r3, #0]
 800272e:	4c70      	ldr	r4, [pc, #448]	@ (80028f0 <USB_ActivateEndpoint+0x1f8>)
 8002730:	4020      	ands	r0, r4
 8002732:	4330      	orrs	r0, r6
 8002734:	4310      	orrs	r0, r2
 8002736:	b280      	uxth	r0, r0
 8002738:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800273a:	00f0      	lsls	r0, r6, #3
 800273c:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 800273e:	7b08      	ldrb	r0, [r1, #12]
 8002740:	44ac      	add	ip, r5
 8002742:	3550      	adds	r5, #80	@ 0x50
 8002744:	9501      	str	r5, [sp, #4]
 8002746:	2800      	cmp	r0, #0
 8002748:	d000      	beq.n	800274c <USB_ActivateEndpoint+0x54>
 800274a:	e06b      	b.n	8002824 <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800274c:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 800274e:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002750:	086d      	lsrs	r5, r5, #1
 8002752:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8002754:	2800      	cmp	r0, #0
 8002756:	d023      	beq.n	80027a0 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002758:	2080      	movs	r0, #128	@ 0x80
 800275a:	9901      	ldr	r1, [sp, #4]
 800275c:	00c0      	lsls	r0, r0, #3
 800275e:	8809      	ldrh	r1, [r1, #0]
 8002760:	4461      	add	r1, ip
 8002762:	1809      	adds	r1, r1, r0
 8002764:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002766:	8819      	ldrh	r1, [r3, #0]
 8002768:	0649      	lsls	r1, r1, #25
 800276a:	d504      	bpl.n	8002776 <USB_ActivateEndpoint+0x7e>
 800276c:	8819      	ldrh	r1, [r3, #0]
 800276e:	4021      	ands	r1, r4
 8002770:	4c60      	ldr	r4, [pc, #384]	@ (80028f4 <USB_ActivateEndpoint+0x1fc>)
 8002772:	4321      	orrs	r1, r4
 8002774:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002776:	4d60      	ldr	r5, [pc, #384]	@ (80028f8 <USB_ActivateEndpoint+0x200>)
 8002778:	2f01      	cmp	r7, #1
 800277a:	d100      	bne.n	800277e <USB_ActivateEndpoint+0x86>
 800277c:	e0ae      	b.n	80028dc <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800277e:	2120      	movs	r1, #32
 8002780:	881c      	ldrh	r4, [r3, #0]
 8002782:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002784:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002786:	430a      	orrs	r2, r1
 8002788:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800278a:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800278c:	801a      	strh	r2, [r3, #0]
}
 800278e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8002790:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002792:	00d2      	lsls	r2, r2, #3
 8002794:	4314      	orrs	r4, r2
  switch (ep->type)
 8002796:	2200      	movs	r2, #0
 8002798:	9200      	str	r2, [sp, #0]
 800279a:	e7c3      	b.n	8002724 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	e7f8      	b.n	8002792 <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80027a0:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80027a2:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80027a4:	8807      	ldrh	r7, [r0, #0]
 80027a6:	4855      	ldr	r0, [pc, #340]	@ (80028fc <USB_ActivateEndpoint+0x204>)
 80027a8:	4467      	add	r7, ip
 80027aa:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80027ac:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80027ae:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80027b0:	8805      	ldrh	r5, [r0, #0]
 80027b2:	4853      	ldr	r0, [pc, #332]	@ (8002900 <USB_ActivateEndpoint+0x208>)
 80027b4:	4465      	add	r5, ip
 80027b6:	182d      	adds	r5, r5, r0
 80027b8:	882f      	ldrh	r7, [r5, #0]
 80027ba:	05bf      	lsls	r7, r7, #22
 80027bc:	0dbf      	lsrs	r7, r7, #22
 80027be:	802f      	strh	r7, [r5, #0]
 80027c0:	2900      	cmp	r1, #0
 80027c2:	d115      	bne.n	80027f0 <USB_ActivateEndpoint+0xf8>
 80027c4:	2780      	movs	r7, #128	@ 0x80
 80027c6:	8829      	ldrh	r1, [r5, #0]
 80027c8:	023f      	lsls	r7, r7, #8
 80027ca:	4339      	orrs	r1, r7
 80027cc:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027ce:	8819      	ldrh	r1, [r3, #0]
 80027d0:	0449      	lsls	r1, r1, #17
 80027d2:	d504      	bpl.n	80027de <USB_ActivateEndpoint+0xe6>
 80027d4:	8819      	ldrh	r1, [r3, #0]
 80027d6:	4021      	ands	r1, r4
 80027d8:	4c4a      	ldr	r4, [pc, #296]	@ (8002904 <USB_ActivateEndpoint+0x20c>)
 80027da:	4321      	orrs	r1, r4
 80027dc:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 80027de:	494a      	ldr	r1, [pc, #296]	@ (8002908 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027e0:	881c      	ldrh	r4, [r3, #0]
 80027e2:	400c      	ands	r4, r1
 80027e4:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 80027e6:	2e00      	cmp	r6, #0
 80027e8:	d000      	beq.n	80027ec <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	0189      	lsls	r1, r1, #6
 80027ee:	e7c9      	b.n	8002784 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80027f0:	293e      	cmp	r1, #62	@ 0x3e
 80027f2:	d808      	bhi.n	8002806 <USB_ActivateEndpoint+0x10e>
 80027f4:	2001      	movs	r0, #1
 80027f6:	084f      	lsrs	r7, r1, #1
 80027f8:	4001      	ands	r1, r0
 80027fa:	187f      	adds	r7, r7, r1
 80027fc:	8829      	ldrh	r1, [r5, #0]
 80027fe:	02bf      	lsls	r7, r7, #10
 8002800:	4339      	orrs	r1, r7
 8002802:	b289      	uxth	r1, r1
 8002804:	e7e2      	b.n	80027cc <USB_ActivateEndpoint+0xd4>
 8002806:	201f      	movs	r0, #31
 8002808:	094f      	lsrs	r7, r1, #5
 800280a:	4001      	ands	r1, r0
 800280c:	0008      	movs	r0, r1
 800280e:	4241      	negs	r1, r0
 8002810:	4141      	adcs	r1, r0
 8002812:	1a7f      	subs	r7, r7, r1
 8002814:	8829      	ldrh	r1, [r5, #0]
 8002816:	02bf      	lsls	r7, r7, #10
 8002818:	4339      	orrs	r1, r7
 800281a:	4f3c      	ldr	r7, [pc, #240]	@ (800290c <USB_ActivateEndpoint+0x214>)
 800281c:	430f      	orrs	r7, r1
 800281e:	b2bf      	uxth	r7, r7
 8002820:	802f      	strh	r7, [r5, #0]
 8002822:	e7d4      	b.n	80027ce <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002824:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 8002826:	2f02      	cmp	r7, #2
 8002828:	d13a      	bne.n	80028a0 <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800282a:	4e39      	ldr	r6, [pc, #228]	@ (8002910 <USB_ActivateEndpoint+0x218>)
 800282c:	4025      	ands	r5, r4
 800282e:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002830:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002832:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002834:	8805      	ldrh	r5, [r0, #0]
 8002836:	2080      	movs	r0, #128	@ 0x80
 8002838:	890e      	ldrh	r6, [r1, #8]
 800283a:	4465      	add	r5, ip
 800283c:	00c0      	lsls	r0, r0, #3
 800283e:	0876      	lsrs	r6, r6, #1
 8002840:	182d      	adds	r5, r5, r0
 8002842:	0076      	lsls	r6, r6, #1
 8002844:	9801      	ldr	r0, [sp, #4]
 8002846:	802e      	strh	r6, [r5, #0]
 8002848:	8805      	ldrh	r5, [r0, #0]
 800284a:	894e      	ldrh	r6, [r1, #10]
 800284c:	482b      	ldr	r0, [pc, #172]	@ (80028fc <USB_ActivateEndpoint+0x204>)
 800284e:	4465      	add	r5, ip
 8002850:	0876      	lsrs	r6, r6, #1
 8002852:	182d      	adds	r5, r5, r0
 8002854:	0076      	lsls	r6, r6, #1
 8002856:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 8002858:	7849      	ldrb	r1, [r1, #1]
 800285a:	4e27      	ldr	r6, [pc, #156]	@ (80028f8 <USB_ActivateEndpoint+0x200>)
 800285c:	468c      	mov	ip, r1
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	4660      	mov	r0, ip
 8002862:	4d29      	ldr	r5, [pc, #164]	@ (8002908 <USB_ActivateEndpoint+0x210>)
 8002864:	01c9      	lsls	r1, r1, #7
 8002866:	2800      	cmp	r0, #0
 8002868:	d11f      	bne.n	80028aa <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800286a:	881f      	ldrh	r7, [r3, #0]
 800286c:	420f      	tst	r7, r1
 800286e:	d004      	beq.n	800287a <USB_ActivateEndpoint+0x182>
 8002870:	8819      	ldrh	r1, [r3, #0]
 8002872:	4f24      	ldr	r7, [pc, #144]	@ (8002904 <USB_ActivateEndpoint+0x20c>)
 8002874:	4021      	ands	r1, r4
 8002876:	4339      	orrs	r1, r7
 8002878:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800287a:	8819      	ldrh	r1, [r3, #0]
 800287c:	0649      	lsls	r1, r1, #25
 800287e:	d504      	bpl.n	800288a <USB_ActivateEndpoint+0x192>
 8002880:	8819      	ldrh	r1, [r3, #0]
 8002882:	4021      	ands	r1, r4
 8002884:	4c1b      	ldr	r4, [pc, #108]	@ (80028f4 <USB_ActivateEndpoint+0x1fc>)
 8002886:	4321      	orrs	r1, r4
 8002888:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800288a:	21c0      	movs	r1, #192	@ 0xc0
 800288c:	881c      	ldrh	r4, [r3, #0]
 800288e:	0189      	lsls	r1, r1, #6
 8002890:	402c      	ands	r4, r5
 8002892:	4061      	eors	r1, r4
 8002894:	4311      	orrs	r1, r2
 8002896:	b289      	uxth	r1, r1
 8002898:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800289a:	8819      	ldrh	r1, [r3, #0]
 800289c:	4031      	ands	r1, r6
 800289e:	e772      	b.n	8002786 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80028a0:	4e1c      	ldr	r6, [pc, #112]	@ (8002914 <USB_ActivateEndpoint+0x21c>)
 80028a2:	4035      	ands	r5, r6
 80028a4:	4315      	orrs	r5, r2
 80028a6:	b2ad      	uxth	r5, r5
 80028a8:	e7c2      	b.n	8002830 <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028aa:	8818      	ldrh	r0, [r3, #0]
 80028ac:	4208      	tst	r0, r1
 80028ae:	d004      	beq.n	80028ba <USB_ActivateEndpoint+0x1c2>
 80028b0:	8819      	ldrh	r1, [r3, #0]
 80028b2:	4814      	ldr	r0, [pc, #80]	@ (8002904 <USB_ActivateEndpoint+0x20c>)
 80028b4:	4021      	ands	r1, r4
 80028b6:	4301      	orrs	r1, r0
 80028b8:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028ba:	8819      	ldrh	r1, [r3, #0]
 80028bc:	0649      	lsls	r1, r1, #25
 80028be:	d504      	bpl.n	80028ca <USB_ActivateEndpoint+0x1d2>
 80028c0:	8819      	ldrh	r1, [r3, #0]
 80028c2:	4021      	ands	r1, r4
 80028c4:	4c0b      	ldr	r4, [pc, #44]	@ (80028f4 <USB_ActivateEndpoint+0x1fc>)
 80028c6:	4321      	orrs	r1, r4
 80028c8:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 80028ca:	2f01      	cmp	r7, #1
 80028cc:	d009      	beq.n	80028e2 <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80028ce:	2120      	movs	r1, #32
 80028d0:	881c      	ldrh	r4, [r3, #0]
 80028d2:	4034      	ands	r4, r6
 80028d4:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028d6:	4311      	orrs	r1, r2
 80028d8:	b289      	uxth	r1, r1
 80028da:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028dc:	8819      	ldrh	r1, [r3, #0]
 80028de:	4029      	ands	r1, r5
 80028e0:	e751      	b.n	8002786 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028e2:	8819      	ldrh	r1, [r3, #0]
 80028e4:	4031      	ands	r1, r6
 80028e6:	e7f6      	b.n	80028d6 <USB_ActivateEndpoint+0x1de>
 80028e8:	ffff898f 	.word	0xffff898f
 80028ec:	ffff8080 	.word	0xffff8080
 80028f0:	ffff8f8f 	.word	0xffff8f8f
 80028f4:	000080c0 	.word	0x000080c0
 80028f8:	ffff8fbf 	.word	0xffff8fbf
 80028fc:	00000404 	.word	0x00000404
 8002900:	00000406 	.word	0x00000406
 8002904:	0000c080 	.word	0x0000c080
 8002908:	ffffbf8f 	.word	0xffffbf8f
 800290c:	ffff8000 	.word	0xffff8000
 8002910:	00008180 	.word	0x00008180
 8002914:	ffff8e8f 	.word	0xffff8e8f

08002918 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800291a:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 800291c:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 800291e:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	18c0      	adds	r0, r0, r3
 8002924:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 8002926:	2900      	cmp	r1, #0
 8002928:	d11a      	bne.n	8002960 <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 800292a:	2a00      	cmp	r2, #0
 800292c:	d00c      	beq.n	8002948 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800292e:	8802      	ldrh	r2, [r0, #0]
 8002930:	0652      	lsls	r2, r2, #25
 8002932:	d505      	bpl.n	8002940 <USB_DeactivateEndpoint+0x28>
 8002934:	8802      	ldrh	r2, [r0, #0]
 8002936:	492e      	ldr	r1, [pc, #184]	@ (80029f0 <USB_DeactivateEndpoint+0xd8>)
 8002938:	400a      	ands	r2, r1
 800293a:	492e      	ldr	r1, [pc, #184]	@ (80029f4 <USB_DeactivateEndpoint+0xdc>)
 800293c:	430a      	orrs	r2, r1
 800293e:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002940:	8802      	ldrh	r2, [r0, #0]
 8002942:	492d      	ldr	r1, [pc, #180]	@ (80029f8 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002944:	400a      	ands	r2, r1
 8002946:	e02f      	b.n	80029a8 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002948:	8802      	ldrh	r2, [r0, #0]
 800294a:	0452      	lsls	r2, r2, #17
 800294c:	d505      	bpl.n	800295a <USB_DeactivateEndpoint+0x42>
 800294e:	8802      	ldrh	r2, [r0, #0]
 8002950:	4927      	ldr	r1, [pc, #156]	@ (80029f0 <USB_DeactivateEndpoint+0xd8>)
 8002952:	400a      	ands	r2, r1
 8002954:	4929      	ldr	r1, [pc, #164]	@ (80029fc <USB_DeactivateEndpoint+0xe4>)
 8002956:	430a      	orrs	r2, r1
 8002958:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800295a:	8802      	ldrh	r2, [r0, #0]
 800295c:	4928      	ldr	r1, [pc, #160]	@ (8002a00 <USB_DeactivateEndpoint+0xe8>)
 800295e:	e7f1      	b.n	8002944 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8002960:	2780      	movs	r7, #128	@ 0x80
 8002962:	4e23      	ldr	r6, [pc, #140]	@ (80029f0 <USB_DeactivateEndpoint+0xd8>)
 8002964:	4d24      	ldr	r5, [pc, #144]	@ (80029f8 <USB_DeactivateEndpoint+0xe0>)
 8002966:	4926      	ldr	r1, [pc, #152]	@ (8002a00 <USB_DeactivateEndpoint+0xe8>)
 8002968:	01ff      	lsls	r7, r7, #7
 800296a:	2a00      	cmp	r2, #0
 800296c:	d121      	bne.n	80029b2 <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800296e:	8802      	ldrh	r2, [r0, #0]
 8002970:	423a      	tst	r2, r7
 8002972:	d004      	beq.n	800297e <USB_DeactivateEndpoint+0x66>
 8002974:	8802      	ldrh	r2, [r0, #0]
 8002976:	4c21      	ldr	r4, [pc, #132]	@ (80029fc <USB_DeactivateEndpoint+0xe4>)
 8002978:	4032      	ands	r2, r6
 800297a:	4322      	orrs	r2, r4
 800297c:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800297e:	8802      	ldrh	r2, [r0, #0]
 8002980:	4c20      	ldr	r4, [pc, #128]	@ (8002a04 <USB_DeactivateEndpoint+0xec>)
 8002982:	0652      	lsls	r2, r2, #25
 8002984:	d504      	bpl.n	8002990 <USB_DeactivateEndpoint+0x78>
 8002986:	8802      	ldrh	r2, [r0, #0]
 8002988:	4032      	ands	r2, r6
 800298a:	4322      	orrs	r2, r4
 800298c:	b292      	uxth	r2, r2
 800298e:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8002990:	8802      	ldrh	r2, [r0, #0]
 8002992:	4032      	ands	r2, r6
 8002994:	4314      	orrs	r4, r2
 8002996:	b2a4      	uxth	r4, r4
 8002998:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800299a:	8802      	ldrh	r2, [r0, #0]
 800299c:	400a      	ands	r2, r1
 800299e:	431a      	orrs	r2, r3
 80029a0:	b292      	uxth	r2, r2
 80029a2:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029a4:	8802      	ldrh	r2, [r0, #0]
 80029a6:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80029ae:	2000      	movs	r0, #0
 80029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029b2:	8802      	ldrh	r2, [r0, #0]
 80029b4:	4c14      	ldr	r4, [pc, #80]	@ (8002a08 <USB_DeactivateEndpoint+0xf0>)
 80029b6:	423a      	tst	r2, r7
 80029b8:	d004      	beq.n	80029c4 <USB_DeactivateEndpoint+0xac>
 80029ba:	8802      	ldrh	r2, [r0, #0]
 80029bc:	4032      	ands	r2, r6
 80029be:	4322      	orrs	r2, r4
 80029c0:	b292      	uxth	r2, r2
 80029c2:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029c4:	8802      	ldrh	r2, [r0, #0]
 80029c6:	0652      	lsls	r2, r2, #25
 80029c8:	d504      	bpl.n	80029d4 <USB_DeactivateEndpoint+0xbc>
 80029ca:	8802      	ldrh	r2, [r0, #0]
 80029cc:	4f09      	ldr	r7, [pc, #36]	@ (80029f4 <USB_DeactivateEndpoint+0xdc>)
 80029ce:	4032      	ands	r2, r6
 80029d0:	433a      	orrs	r2, r7
 80029d2:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80029d4:	8802      	ldrh	r2, [r0, #0]
 80029d6:	4032      	ands	r2, r6
 80029d8:	4314      	orrs	r4, r2
 80029da:	b2a4      	uxth	r4, r4
 80029dc:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029de:	8802      	ldrh	r2, [r0, #0]
 80029e0:	402a      	ands	r2, r5
 80029e2:	431a      	orrs	r2, r3
 80029e4:	b292      	uxth	r2, r2
 80029e6:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029e8:	8802      	ldrh	r2, [r0, #0]
 80029ea:	e7ab      	b.n	8002944 <USB_DeactivateEndpoint+0x2c>
 80029ec:	ffff8080 	.word	0xffff8080
 80029f0:	ffff8f8f 	.word	0xffff8f8f
 80029f4:	000080c0 	.word	0x000080c0
 80029f8:	ffff8fbf 	.word	0xffff8fbf
 80029fc:	0000c080 	.word	0x0000c080
 8002a00:	ffffbf8f 	.word	0xffffbf8f
 8002a04:	ffff80c0 	.word	0xffff80c0
 8002a08:	ffffc080 	.word	0xffffc080

08002a0c <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002a0c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 8002a0e:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4a0c      	ldr	r2, [pc, #48]	@ (8002a44 <USB_EPSetStall+0x38>)
 8002a14:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8002a16:	2900      	cmp	r1, #0
 8002a18:	d009      	beq.n	8002a2e <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002a1a:	8801      	ldrh	r1, [r0, #0]
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <USB_EPSetStall+0x3c>)
 8002a1e:	4019      	ands	r1, r3
 8002a20:	2310      	movs	r3, #16
 8002a22:	404b      	eors	r3, r1
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002a2e:	8801      	ldrh	r1, [r0, #0]
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <USB_EPSetStall+0x40>)
 8002a32:	4019      	ands	r1, r3
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	015b      	lsls	r3, r3, #5
 8002a38:	404b      	eors	r3, r1
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	8002      	strh	r2, [r0, #0]
 8002a40:	e7f3      	b.n	8002a2a <USB_EPSetStall+0x1e>
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	ffff8080 	.word	0xffff8080
 8002a48:	ffff8fbf 	.word	0xffff8fbf
 8002a4c:	ffffbf8f 	.word	0xffffbf8f

08002a50 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002a50:	7b0b      	ldrb	r3, [r1, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d119      	bne.n	8002a8a <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a56:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8002a58:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	18c0      	adds	r0, r0, r3
 8002a5e:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in != 0U)
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d014      	beq.n	8002a8e <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a64:	065b      	lsls	r3, r3, #25
 8002a66:	d505      	bpl.n	8002a74 <USB_EPClearStall+0x24>
 8002a68:	8803      	ldrh	r3, [r0, #0]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <USB_EPClearStall+0x5c>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	4a10      	ldr	r2, [pc, #64]	@ (8002ab0 <USB_EPClearStall+0x60>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002a74:	78cb      	ldrb	r3, [r1, #3]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d007      	beq.n	8002a8a <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <USB_EPClearStall+0x64>)
 8002a7c:	8802      	ldrh	r2, [r0, #0]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a82:	4053      	eors	r3, r2
 8002a84:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab8 <USB_EPClearStall+0x68>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a8e:	045b      	lsls	r3, r3, #17
 8002a90:	d505      	bpl.n	8002a9e <USB_EPClearStall+0x4e>
 8002a92:	8803      	ldrh	r3, [r0, #0]
 8002a94:	4a05      	ldr	r2, [pc, #20]	@ (8002aac <USB_EPClearStall+0x5c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	4a08      	ldr	r2, [pc, #32]	@ (8002abc <USB_EPClearStall+0x6c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <USB_EPClearStall+0x70>)
 8002aa0:	8802      	ldrh	r2, [r0, #0]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	23c0      	movs	r3, #192	@ 0xc0
 8002aa6:	019b      	lsls	r3, r3, #6
 8002aa8:	e7eb      	b.n	8002a82 <USB_EPClearStall+0x32>
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	ffff8f8f 	.word	0xffff8f8f
 8002ab0:	000080c0 	.word	0x000080c0
 8002ab4:	ffff8fbf 	.word	0xffff8fbf
 8002ab8:	00008080 	.word	0x00008080
 8002abc:	0000c080 	.word	0x0000c080
 8002ac0:	ffffbf8f 	.word	0xffffbf8f

08002ac4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002ac4:	2900      	cmp	r1, #0
 8002ac6:	d102      	bne.n	8002ace <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	304c      	adds	r0, #76	@ 0x4c
 8002acc:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8002ace:	2000      	movs	r0, #0
 8002ad0:	4770      	bx	lr

08002ad2 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	3058      	adds	r0, #88	@ 0x58
 8002ad6:	8803      	ldrh	r3, [r0, #0]
 8002ad8:	0212      	lsls	r2, r2, #8
 8002ada:	4313      	orrs	r3, r2
 8002adc:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8002ade:	2000      	movs	r0, #0
 8002ae0:	4770      	bx	lr

08002ae2 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002ae2:	3006      	adds	r0, #6
 8002ae4:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8002ae6:	b280      	uxth	r0, r0
  return tmpreg;
}
 8002ae8:	4770      	bx	lr

08002aea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002aea:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002aec:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002aee:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002af0:	00e4      	lsls	r4, r4, #3
 8002af2:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002af4:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002af6:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	18cb      	adds	r3, r1, r3
 8002afc:	1a40      	subs	r0, r0, r1
 8002afe:	180c      	adds	r4, r1, r0
 8002b00:	428b      	cmp	r3, r1
 8002b02:	d100      	bne.n	8002b06 <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8002b04:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 8002b06:	784a      	ldrb	r2, [r1, #1]
 8002b08:	780d      	ldrb	r5, [r1, #0]
 8002b0a:	0212      	lsls	r2, r2, #8
 8002b0c:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8002b0e:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8002b10:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8002b12:	e7f4      	b.n	8002afe <USB_WritePMA+0x14>

08002b14 <USB_EPStartXfer>:
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8002b18:	7849      	ldrb	r1, [r1, #1]
{
 8002b1a:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 8002b1c:	7b22      	ldrb	r2, [r4, #12]
{
 8002b1e:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8002b20:	2901      	cmp	r1, #1
 8002b22:	d000      	beq.n	8002b26 <USB_EPStartXfer+0x12>
 8002b24:	e11b      	b.n	8002d5e <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8002b26:	6923      	ldr	r3, [r4, #16]
 8002b28:	69a7      	ldr	r7, [r4, #24]
 8002b2a:	9302      	str	r3, [sp, #8]
 8002b2c:	429f      	cmp	r7, r3
 8002b2e:	d900      	bls.n	8002b32 <USB_EPStartXfer+0x1e>
 8002b30:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 8002b32:	002b      	movs	r3, r5
 8002b34:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002b36:	6961      	ldr	r1, [r4, #20]
 8002b38:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d11d      	bne.n	8002b7a <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002b3e:	b2bf      	uxth	r7, r7
 8002b40:	003b      	movs	r3, r7
 8002b42:	88e2      	ldrh	r2, [r4, #6]
 8002b44:	0028      	movs	r0, r5
 8002b46:	f7ff ffd0 	bl	8002aea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002b4a:	9b01      	ldr	r3, [sp, #4]
 8002b4c:	4abe      	ldr	r2, [pc, #760]	@ (8002e48 <USB_EPStartXfer+0x334>)
 8002b4e:	8819      	ldrh	r1, [r3, #0]
 8002b50:	7823      	ldrb	r3, [r4, #0]
 8002b52:	18aa      	adds	r2, r5, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	1852      	adds	r2, r2, r1
 8002b58:	189b      	adds	r3, r3, r2
 8002b5a:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002b5c:	7823      	ldrb	r3, [r4, #0]
 8002b5e:	4abb      	ldr	r2, [pc, #748]	@ (8002e4c <USB_EPStartXfer+0x338>)
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	18eb      	adds	r3, r5, r3
 8002b64:	8819      	ldrh	r1, [r3, #0]
 8002b66:	4011      	ands	r1, r2
 8002b68:	2230      	movs	r2, #48	@ 0x30
 8002b6a:	404a      	eors	r2, r1
 8002b6c:	49b8      	ldr	r1, [pc, #736]	@ (8002e50 <USB_EPStartXfer+0x33c>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	b292      	uxth	r2, r2
 8002b72:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 8002b74:	2000      	movs	r0, #0
}
 8002b76:	b007      	add	sp, #28
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002b7a:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 8002b7c:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002b7e:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b80:	00d2      	lsls	r2, r2, #3
 8002b82:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 8002b84:	78e0      	ldrb	r0, [r4, #3]
 8002b86:	18eb      	adds	r3, r5, r3
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	d000      	beq.n	8002b8e <USB_EPStartXfer+0x7a>
 8002b8c:	e0d1      	b.n	8002d32 <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 8002b8e:	9a02      	ldr	r2, [sp, #8]
 8002b90:	42b2      	cmp	r2, r6
 8002b92:	d300      	bcc.n	8002b96 <USB_EPStartXfer+0x82>
 8002b94:	e0bb      	b.n	8002d0e <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002b96:	881a      	ldrh	r2, [r3, #0]
 8002b98:	48ae      	ldr	r0, [pc, #696]	@ (8002e54 <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8002b9a:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002b9c:	4010      	ands	r0, r2
 8002b9e:	4aae      	ldr	r2, [pc, #696]	@ (8002e58 <USB_EPStartXfer+0x344>)
 8002ba0:	4310      	orrs	r0, r2
 8002ba2:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	2040      	movs	r0, #64	@ 0x40
 8002ba8:	469c      	mov	ip, r3
 8002baa:	4662      	mov	r2, ip
 8002bac:	4002      	ands	r2, r0
 8002bae:	9205      	str	r2, [sp, #20]
 8002bb0:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 8002bb2:	19cb      	adds	r3, r1, r7
 8002bb4:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 8002bb6:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002bb8:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002bba:	4202      	tst	r2, r0
 8002bbc:	d055      	beq.n	8002c6a <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bbe:	9a01      	ldr	r2, [sp, #4]
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	4694      	mov	ip, r2
 8002bc4:	4aa5      	ldr	r2, [pc, #660]	@ (8002e5c <USB_EPStartXfer+0x348>)
 8002bc6:	18a8      	adds	r0, r5, r2
 8002bc8:	9a03      	ldr	r2, [sp, #12]
 8002bca:	4460      	add	r0, ip
 8002bcc:	1882      	adds	r2, r0, r2
 8002bce:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bd0:	8962      	ldrh	r2, [r4, #10]
 8002bd2:	0028      	movs	r0, r5
 8002bd4:	f7ff ff89 	bl	8002aea <USB_WritePMA>
            ep->xfer_buff += len;
 8002bd8:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8002bda:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8002bdc:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8002bde:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8002be0:	42b2      	cmp	r2, r6
 8002be2:	d201      	bcs.n	8002be8 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 8002be4:	1bf3      	subs	r3, r6, r7
 8002be6:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002be8:	7862      	ldrb	r2, [r4, #1]
 8002bea:	6223      	str	r3, [r4, #32]
 8002bec:	b2b3      	uxth	r3, r6
 8002bee:	2a00      	cmp	r2, #0
 8002bf0:	d12e      	bne.n	8002c50 <USB_EPStartXfer+0x13c>
 8002bf2:	9a01      	ldr	r2, [sp, #4]
 8002bf4:	4994      	ldr	r1, [pc, #592]	@ (8002e48 <USB_EPStartXfer+0x334>)
 8002bf6:	8810      	ldrh	r0, [r2, #0]
 8002bf8:	7822      	ldrb	r2, [r4, #0]
 8002bfa:	1869      	adds	r1, r5, r1
 8002bfc:	1809      	adds	r1, r1, r0
 8002bfe:	00d2      	lsls	r2, r2, #3
 8002c00:	1852      	adds	r2, r2, r1
 8002c02:	8811      	ldrh	r1, [r2, #0]
 8002c04:	0589      	lsls	r1, r1, #22
 8002c06:	0d89      	lsrs	r1, r1, #22
 8002c08:	8011      	strh	r1, [r2, #0]
 8002c0a:	2e00      	cmp	r6, #0
 8002c0c:	d10a      	bne.n	8002c24 <USB_EPStartXfer+0x110>
 8002c0e:	2080      	movs	r0, #128	@ 0x80
 8002c10:	8811      	ldrh	r1, [r2, #0]
 8002c12:	0200      	lsls	r0, r0, #8
 8002c14:	4301      	orrs	r1, r0
 8002c16:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c18:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c1a:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c1c:	0028      	movs	r0, r5
 8002c1e:	f7ff ff64 	bl	8002aea <USB_WritePMA>
 8002c22:	e79b      	b.n	8002b5c <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c24:	2e3e      	cmp	r6, #62	@ 0x3e
 8002c26:	d808      	bhi.n	8002c3a <USB_EPStartXfer+0x126>
 8002c28:	2101      	movs	r1, #1
 8002c2a:	0870      	lsrs	r0, r6, #1
 8002c2c:	4031      	ands	r1, r6
 8002c2e:	1840      	adds	r0, r0, r1
 8002c30:	8811      	ldrh	r1, [r2, #0]
 8002c32:	0280      	lsls	r0, r0, #10
 8002c34:	4301      	orrs	r1, r0
 8002c36:	b289      	uxth	r1, r1
 8002c38:	e7ed      	b.n	8002c16 <USB_EPStartXfer+0x102>
 8002c3a:	201f      	movs	r0, #31
 8002c3c:	4030      	ands	r0, r6
 8002c3e:	0971      	lsrs	r1, r6, #5
 8002c40:	4246      	negs	r6, r0
 8002c42:	4170      	adcs	r0, r6
 8002c44:	1a09      	subs	r1, r1, r0
 8002c46:	8810      	ldrh	r0, [r2, #0]
 8002c48:	0289      	lsls	r1, r1, #10
 8002c4a:	4308      	orrs	r0, r1
 8002c4c:	4984      	ldr	r1, [pc, #528]	@ (8002e60 <USB_EPStartXfer+0x34c>)
 8002c4e:	e7f1      	b.n	8002c34 <USB_EPStartXfer+0x120>
 8002c50:	2a01      	cmp	r2, #1
 8002c52:	d1e1      	bne.n	8002c18 <USB_EPStartXfer+0x104>
 8002c54:	002a      	movs	r2, r5
 8002c56:	497c      	ldr	r1, [pc, #496]	@ (8002e48 <USB_EPStartXfer+0x334>)
 8002c58:	3250      	adds	r2, #80	@ 0x50
 8002c5a:	8810      	ldrh	r0, [r2, #0]
 8002c5c:	7822      	ldrb	r2, [r4, #0]
 8002c5e:	1869      	adds	r1, r5, r1
 8002c60:	00d2      	lsls	r2, r2, #3
 8002c62:	1809      	adds	r1, r1, r0
 8002c64:	1852      	adds	r2, r2, r1
 8002c66:	8013      	strh	r3, [r2, #0]
 8002c68:	e7d6      	b.n	8002c18 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c6a:	9a01      	ldr	r2, [sp, #4]
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	4694      	mov	ip, r2
 8002c70:	4a75      	ldr	r2, [pc, #468]	@ (8002e48 <USB_EPStartXfer+0x334>)
 8002c72:	18a8      	adds	r0, r5, r2
 8002c74:	9a03      	ldr	r2, [sp, #12]
 8002c76:	4460      	add	r0, ip
 8002c78:	1882      	adds	r2, r0, r2
 8002c7a:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c7c:	8922      	ldrh	r2, [r4, #8]
 8002c7e:	0028      	movs	r0, r5
 8002c80:	f7ff ff33 	bl	8002aea <USB_WritePMA>
            ep->xfer_buff += len;
 8002c84:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8002c86:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8002c88:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8002c8a:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002c8c:	42b2      	cmp	r2, r6
 8002c8e:	d201      	bcs.n	8002c94 <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 8002c90:	1bf3      	subs	r3, r6, r7
 8002c92:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c94:	7862      	ldrb	r2, [r4, #1]
 8002c96:	6223      	str	r3, [r4, #32]
 8002c98:	b2b3      	uxth	r3, r6
 8002c9a:	2a00      	cmp	r2, #0
 8002c9c:	d12a      	bne.n	8002cf4 <USB_EPStartXfer+0x1e0>
 8002c9e:	9a01      	ldr	r2, [sp, #4]
 8002ca0:	496e      	ldr	r1, [pc, #440]	@ (8002e5c <USB_EPStartXfer+0x348>)
 8002ca2:	8810      	ldrh	r0, [r2, #0]
 8002ca4:	7822      	ldrb	r2, [r4, #0]
 8002ca6:	1869      	adds	r1, r5, r1
 8002ca8:	1809      	adds	r1, r1, r0
 8002caa:	00d2      	lsls	r2, r2, #3
 8002cac:	1852      	adds	r2, r2, r1
 8002cae:	8811      	ldrh	r1, [r2, #0]
 8002cb0:	0589      	lsls	r1, r1, #22
 8002cb2:	0d89      	lsrs	r1, r1, #22
 8002cb4:	8011      	strh	r1, [r2, #0]
 8002cb6:	2e00      	cmp	r6, #0
 8002cb8:	d106      	bne.n	8002cc8 <USB_EPStartXfer+0x1b4>
 8002cba:	2080      	movs	r0, #128	@ 0x80
 8002cbc:	8811      	ldrh	r1, [r2, #0]
 8002cbe:	0200      	lsls	r0, r0, #8
 8002cc0:	4301      	orrs	r1, r0
 8002cc2:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002cc4:	8962      	ldrh	r2, [r4, #10]
 8002cc6:	e7a8      	b.n	8002c1a <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002cc8:	2e3e      	cmp	r6, #62	@ 0x3e
 8002cca:	d808      	bhi.n	8002cde <USB_EPStartXfer+0x1ca>
 8002ccc:	2101      	movs	r1, #1
 8002cce:	0870      	lsrs	r0, r6, #1
 8002cd0:	4031      	ands	r1, r6
 8002cd2:	1840      	adds	r0, r0, r1
 8002cd4:	8811      	ldrh	r1, [r2, #0]
 8002cd6:	0280      	lsls	r0, r0, #10
 8002cd8:	4301      	orrs	r1, r0
 8002cda:	b289      	uxth	r1, r1
 8002cdc:	e7f1      	b.n	8002cc2 <USB_EPStartXfer+0x1ae>
 8002cde:	201f      	movs	r0, #31
 8002ce0:	0971      	lsrs	r1, r6, #5
 8002ce2:	4006      	ands	r6, r0
 8002ce4:	4270      	negs	r0, r6
 8002ce6:	4146      	adcs	r6, r0
 8002ce8:	8810      	ldrh	r0, [r2, #0]
 8002cea:	1b89      	subs	r1, r1, r6
 8002cec:	0289      	lsls	r1, r1, #10
 8002cee:	4308      	orrs	r0, r1
 8002cf0:	495b      	ldr	r1, [pc, #364]	@ (8002e60 <USB_EPStartXfer+0x34c>)
 8002cf2:	e7f1      	b.n	8002cd8 <USB_EPStartXfer+0x1c4>
 8002cf4:	2a01      	cmp	r2, #1
 8002cf6:	d1e5      	bne.n	8002cc4 <USB_EPStartXfer+0x1b0>
 8002cf8:	002a      	movs	r2, r5
 8002cfa:	4958      	ldr	r1, [pc, #352]	@ (8002e5c <USB_EPStartXfer+0x348>)
 8002cfc:	3250      	adds	r2, #80	@ 0x50
 8002cfe:	8810      	ldrh	r0, [r2, #0]
 8002d00:	7822      	ldrb	r2, [r4, #0]
 8002d02:	1869      	adds	r1, r5, r1
 8002d04:	00d2      	lsls	r2, r2, #3
 8002d06:	1809      	adds	r1, r1, r0
 8002d08:	1852      	adds	r2, r2, r1
 8002d0a:	8013      	strh	r3, [r2, #0]
 8002d0c:	e7da      	b.n	8002cc4 <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8002d0e:	8818      	ldrh	r0, [r3, #0]
 8002d10:	4f54      	ldr	r7, [pc, #336]	@ (8002e64 <USB_EPStartXfer+0x350>)
 8002d12:	4a4f      	ldr	r2, [pc, #316]	@ (8002e50 <USB_EPStartXfer+0x33c>)
 8002d14:	4038      	ands	r0, r7
 8002d16:	4310      	orrs	r0, r2
 8002d18:	b280      	uxth	r0, r0
 8002d1a:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d1c:	9b01      	ldr	r3, [sp, #4]
 8002d1e:	9a03      	ldr	r2, [sp, #12]
 8002d20:	8818      	ldrh	r0, [r3, #0]
 8002d22:	4b49      	ldr	r3, [pc, #292]	@ (8002e48 <USB_EPStartXfer+0x334>)
 8002d24:	18eb      	adds	r3, r5, r3
 8002d26:	181b      	adds	r3, r3, r0
 8002d28:	189a      	adds	r2, r3, r2
 8002d2a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d2c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d2e:	8922      	ldrh	r2, [r4, #8]
 8002d30:	e774      	b.n	8002c1c <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d32:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 8002d34:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d36:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 8002d38:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d3a:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002d3c:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d3e:	0640      	lsls	r0, r0, #25
 8002d40:	d507      	bpl.n	8002d52 <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d42:	4a46      	ldr	r2, [pc, #280]	@ (8002e5c <USB_EPStartXfer+0x348>)
 8002d44:	18a8      	adds	r0, r5, r2
 8002d46:	9a03      	ldr	r2, [sp, #12]
 8002d48:	1980      	adds	r0, r0, r6
 8002d4a:	1882      	adds	r2, r0, r2
 8002d4c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d4e:	8962      	ldrh	r2, [r4, #10]
 8002d50:	e764      	b.n	8002c1c <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d52:	4a3d      	ldr	r2, [pc, #244]	@ (8002e48 <USB_EPStartXfer+0x334>)
 8002d54:	18a8      	adds	r0, r5, r2
 8002d56:	9a03      	ldr	r2, [sp, #12]
 8002d58:	1980      	adds	r0, r0, r6
 8002d5a:	1882      	adds	r2, r0, r2
 8002d5c:	e7e6      	b.n	8002d2c <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d11c      	bne.n	8002d9c <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 8002d62:	69a3      	ldr	r3, [r4, #24]
 8002d64:	6921      	ldr	r1, [r4, #16]
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d901      	bls.n	8002d6e <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 8002d6a:	1a5a      	subs	r2, r3, r1
        len = ep->maxpacket;
 8002d6c:	000b      	movs	r3, r1
 8002d6e:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002d70:	002a      	movs	r2, r5
 8002d72:	493a      	ldr	r1, [pc, #232]	@ (8002e5c <USB_EPStartXfer+0x348>)
 8002d74:	3250      	adds	r2, #80	@ 0x50
 8002d76:	8810      	ldrh	r0, [r2, #0]
 8002d78:	7822      	ldrb	r2, [r4, #0]
 8002d7a:	1869      	adds	r1, r5, r1
 8002d7c:	00d2      	lsls	r2, r2, #3
 8002d7e:	1809      	adds	r1, r1, r0
 8002d80:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002d82:	8811      	ldrh	r1, [r2, #0]
 8002d84:	0589      	lsls	r1, r1, #22
 8002d86:	0d89      	lsrs	r1, r1, #22
 8002d88:	8011      	strh	r1, [r2, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d000      	beq.n	8002d90 <USB_EPStartXfer+0x27c>
 8002d8e:	e0d6      	b.n	8002f3e <USB_EPStartXfer+0x42a>
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	8813      	ldrh	r3, [r2, #0]
 8002d94:	0209      	lsls	r1, r1, #8
 8002d96:	430b      	orrs	r3, r1
 8002d98:	8013      	strh	r3, [r2, #0]
 8002d9a:	e03d      	b.n	8002e18 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 8002d9c:	78e3      	ldrb	r3, [r4, #3]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d000      	beq.n	8002da4 <USB_EPStartXfer+0x290>
 8002da2:	e08c      	b.n	8002ebe <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d124      	bne.n	8002df2 <USB_EPStartXfer+0x2de>
 8002da8:	0006      	movs	r6, r0
 8002daa:	4a27      	ldr	r2, [pc, #156]	@ (8002e48 <USB_EPStartXfer+0x334>)
 8002dac:	3650      	adds	r6, #80	@ 0x50
 8002dae:	8833      	ldrh	r3, [r6, #0]
 8002db0:	7820      	ldrb	r0, [r4, #0]
 8002db2:	18aa      	adds	r2, r5, r2
 8002db4:	18d2      	adds	r2, r2, r3
 8002db6:	00c0      	lsls	r0, r0, #3
 8002db8:	1812      	adds	r2, r2, r0
 8002dba:	8813      	ldrh	r3, [r2, #0]
 8002dbc:	059b      	lsls	r3, r3, #22
 8002dbe:	0d9b      	lsrs	r3, r3, #22
 8002dc0:	8013      	strh	r3, [r2, #0]
 8002dc2:	6923      	ldr	r3, [r4, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d134      	bne.n	8002e32 <USB_EPStartXfer+0x31e>
 8002dc8:	2780      	movs	r7, #128	@ 0x80
 8002dca:	8811      	ldrh	r1, [r2, #0]
 8002dcc:	023f      	lsls	r7, r7, #8
 8002dce:	4339      	orrs	r1, r7
 8002dd0:	8011      	strh	r1, [r2, #0]
 8002dd2:	4a22      	ldr	r2, [pc, #136]	@ (8002e5c <USB_EPStartXfer+0x348>)
 8002dd4:	8831      	ldrh	r1, [r6, #0]
 8002dd6:	18aa      	adds	r2, r5, r2
 8002dd8:	1852      	adds	r2, r2, r1
 8002dda:	1812      	adds	r2, r2, r0
 8002ddc:	8811      	ldrh	r1, [r2, #0]
 8002dde:	0589      	lsls	r1, r1, #22
 8002de0:	0d89      	lsrs	r1, r1, #22
 8002de2:	8011      	strh	r1, [r2, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d154      	bne.n	8002e92 <USB_EPStartXfer+0x37e>
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	8813      	ldrh	r3, [r2, #0]
 8002dec:	0209      	lsls	r1, r1, #8
 8002dee:	430b      	orrs	r3, r1
 8002df0:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 8002df2:	69e3      	ldr	r3, [r4, #28]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00f      	beq.n	8002e18 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002df8:	7823      	ldrb	r3, [r4, #0]
 8002dfa:	491b      	ldr	r1, [pc, #108]	@ (8002e68 <USB_EPStartXfer+0x354>)
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	18eb      	adds	r3, r5, r3
 8002e00:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002e02:	400a      	ands	r2, r1
 8002e04:	428a      	cmp	r2, r1
 8002e06:	d001      	beq.n	8002e0c <USB_EPStartXfer+0x2f8>
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	d105      	bne.n	8002e18 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	4911      	ldr	r1, [pc, #68]	@ (8002e54 <USB_EPStartXfer+0x340>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	4916      	ldr	r1, [pc, #88]	@ (8002e6c <USB_EPStartXfer+0x358>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e18:	7823      	ldrb	r3, [r4, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	18ed      	adds	r5, r5, r3
 8002e1e:	882a      	ldrh	r2, [r5, #0]
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <USB_EPStartXfer+0x35c>)
 8002e22:	401a      	ands	r2, r3
 8002e24:	23c0      	movs	r3, #192	@ 0xc0
 8002e26:	019b      	lsls	r3, r3, #6
 8002e28:	4053      	eors	r3, r2
 8002e2a:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <USB_EPStartXfer+0x360>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	802b      	strh	r3, [r5, #0]
 8002e30:	e6a0      	b.n	8002b74 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002e32:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e34:	d820      	bhi.n	8002e78 <USB_EPStartXfer+0x364>
 8002e36:	2101      	movs	r1, #1
 8002e38:	085f      	lsrs	r7, r3, #1
 8002e3a:	4019      	ands	r1, r3
 8002e3c:	187f      	adds	r7, r7, r1
 8002e3e:	8811      	ldrh	r1, [r2, #0]
 8002e40:	02bf      	lsls	r7, r7, #10
 8002e42:	4339      	orrs	r1, r7
 8002e44:	b289      	uxth	r1, r1
 8002e46:	e7c3      	b.n	8002dd0 <USB_EPStartXfer+0x2bc>
 8002e48:	00000402 	.word	0x00000402
 8002e4c:	ffff8fbf 	.word	0xffff8fbf
 8002e50:	ffff8080 	.word	0xffff8080
 8002e54:	ffff8f8f 	.word	0xffff8f8f
 8002e58:	00008180 	.word	0x00008180
 8002e5c:	00000406 	.word	0x00000406
 8002e60:	ffff8000 	.word	0xffff8000
 8002e64:	ffff8e8f 	.word	0xffff8e8f
 8002e68:	00004040 	.word	0x00004040
 8002e6c:	000080c0 	.word	0x000080c0
 8002e70:	ffffbf8f 	.word	0xffffbf8f
 8002e74:	00008080 	.word	0x00008080
 8002e78:	271f      	movs	r7, #31
 8002e7a:	401f      	ands	r7, r3
 8002e7c:	0039      	movs	r1, r7
 8002e7e:	424f      	negs	r7, r1
 8002e80:	414f      	adcs	r7, r1
 8002e82:	0959      	lsrs	r1, r3, #5
 8002e84:	1bc9      	subs	r1, r1, r7
 8002e86:	8817      	ldrh	r7, [r2, #0]
 8002e88:	9101      	str	r1, [sp, #4]
 8002e8a:	0289      	lsls	r1, r1, #10
 8002e8c:	430f      	orrs	r7, r1
 8002e8e:	4937      	ldr	r1, [pc, #220]	@ (8002f6c <USB_EPStartXfer+0x458>)
 8002e90:	e7d7      	b.n	8002e42 <USB_EPStartXfer+0x32e>
 8002e92:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e94:	d808      	bhi.n	8002ea8 <USB_EPStartXfer+0x394>
 8002e96:	2001      	movs	r0, #1
 8002e98:	0859      	lsrs	r1, r3, #1
 8002e9a:	4003      	ands	r3, r0
 8002e9c:	18c9      	adds	r1, r1, r3
 8002e9e:	8813      	ldrh	r3, [r2, #0]
 8002ea0:	0289      	lsls	r1, r1, #10
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	e7a3      	b.n	8002df0 <USB_EPStartXfer+0x2dc>
 8002ea8:	201f      	movs	r0, #31
 8002eaa:	0959      	lsrs	r1, r3, #5
 8002eac:	4003      	ands	r3, r0
 8002eae:	4258      	negs	r0, r3
 8002eb0:	4143      	adcs	r3, r0
 8002eb2:	1ac9      	subs	r1, r1, r3
 8002eb4:	8813      	ldrh	r3, [r2, #0]
 8002eb6:	0289      	lsls	r1, r1, #10
 8002eb8:	4319      	orrs	r1, r3
 8002eba:	4b2c      	ldr	r3, [pc, #176]	@ (8002f6c <USB_EPStartXfer+0x458>)
 8002ebc:	e7f1      	b.n	8002ea2 <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 8002ebe:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8002ec0:	4283      	cmp	r3, r0
 8002ec2:	d000      	beq.n	8002ec6 <USB_EPStartXfer+0x3b2>
 8002ec4:	e657      	b.n	8002b76 <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 8002ec6:	69a3      	ldr	r3, [r4, #24]
 8002ec8:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 8002eca:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 8002ed0:	1a98      	subs	r0, r3, r2
          len = ep->maxpacket;
 8002ed2:	0013      	movs	r3, r2
 8002ed4:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d19e      	bne.n	8002e18 <USB_EPStartXfer+0x304>
 8002eda:	002e      	movs	r6, r5
 8002edc:	4a24      	ldr	r2, [pc, #144]	@ (8002f70 <USB_EPStartXfer+0x45c>)
 8002ede:	3650      	adds	r6, #80	@ 0x50
 8002ee0:	8831      	ldrh	r1, [r6, #0]
 8002ee2:	7820      	ldrb	r0, [r4, #0]
 8002ee4:	18aa      	adds	r2, r5, r2
 8002ee6:	1852      	adds	r2, r2, r1
 8002ee8:	00c0      	lsls	r0, r0, #3
 8002eea:	1812      	adds	r2, r2, r0
 8002eec:	8811      	ldrh	r1, [r2, #0]
 8002eee:	0589      	lsls	r1, r1, #22
 8002ef0:	0d89      	lsrs	r1, r1, #22
 8002ef2:	8011      	strh	r1, [r2, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <USB_EPStartXfer+0x3fa>
 8002ef8:	2780      	movs	r7, #128	@ 0x80
 8002efa:	8811      	ldrh	r1, [r2, #0]
 8002efc:	023f      	lsls	r7, r7, #8
 8002efe:	4339      	orrs	r1, r7
 8002f00:	8011      	strh	r1, [r2, #0]
 8002f02:	4a1c      	ldr	r2, [pc, #112]	@ (8002f74 <USB_EPStartXfer+0x460>)
 8002f04:	8831      	ldrh	r1, [r6, #0]
 8002f06:	18aa      	adds	r2, r5, r2
 8002f08:	1852      	adds	r2, r2, r1
 8002f0a:	1812      	adds	r2, r2, r0
 8002f0c:	e739      	b.n	8002d82 <USB_EPStartXfer+0x26e>
 8002f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f10:	d808      	bhi.n	8002f24 <USB_EPStartXfer+0x410>
 8002f12:	2101      	movs	r1, #1
 8002f14:	085f      	lsrs	r7, r3, #1
 8002f16:	4019      	ands	r1, r3
 8002f18:	187f      	adds	r7, r7, r1
 8002f1a:	8811      	ldrh	r1, [r2, #0]
 8002f1c:	02bf      	lsls	r7, r7, #10
 8002f1e:	4339      	orrs	r1, r7
 8002f20:	b289      	uxth	r1, r1
 8002f22:	e7ed      	b.n	8002f00 <USB_EPStartXfer+0x3ec>
 8002f24:	271f      	movs	r7, #31
 8002f26:	401f      	ands	r7, r3
 8002f28:	0039      	movs	r1, r7
 8002f2a:	424f      	negs	r7, r1
 8002f2c:	414f      	adcs	r7, r1
 8002f2e:	0959      	lsrs	r1, r3, #5
 8002f30:	1bc9      	subs	r1, r1, r7
 8002f32:	8817      	ldrh	r7, [r2, #0]
 8002f34:	9101      	str	r1, [sp, #4]
 8002f36:	0289      	lsls	r1, r1, #10
 8002f38:	430f      	orrs	r7, r1
 8002f3a:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <USB_EPStartXfer+0x458>)
 8002f3c:	e7ef      	b.n	8002f1e <USB_EPStartXfer+0x40a>
 8002f3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f40:	d808      	bhi.n	8002f54 <USB_EPStartXfer+0x440>
 8002f42:	2001      	movs	r0, #1
 8002f44:	0859      	lsrs	r1, r3, #1
 8002f46:	4003      	ands	r3, r0
 8002f48:	18c9      	adds	r1, r1, r3
 8002f4a:	8813      	ldrh	r3, [r2, #0]
 8002f4c:	0289      	lsls	r1, r1, #10
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	e721      	b.n	8002d98 <USB_EPStartXfer+0x284>
 8002f54:	201f      	movs	r0, #31
 8002f56:	0959      	lsrs	r1, r3, #5
 8002f58:	4003      	ands	r3, r0
 8002f5a:	4258      	negs	r0, r3
 8002f5c:	4143      	adcs	r3, r0
 8002f5e:	1ac9      	subs	r1, r1, r3
 8002f60:	8813      	ldrh	r3, [r2, #0]
 8002f62:	0289      	lsls	r1, r1, #10
 8002f64:	4319      	orrs	r1, r3
 8002f66:	4b01      	ldr	r3, [pc, #4]	@ (8002f6c <USB_EPStartXfer+0x458>)
 8002f68:	e7f1      	b.n	8002f4e <USB_EPStartXfer+0x43a>
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	ffff8000 	.word	0xffff8000
 8002f70:	00000402 	.word	0x00000402
 8002f74:	00000406 	.word	0x00000406

08002f78 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002f78:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f7a:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002f7c:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f7e:	00ed      	lsls	r5, r5, #3
 8002f80:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 8002f82:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8002f84:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f86:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8002f88:	1a47      	subs	r7, r0, r1
 8002f8a:	19ea      	adds	r2, r5, r7
 8002f8c:	2e00      	cmp	r6, #0
 8002f8e:	d106      	bne.n	8002f9e <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002f90:	07db      	lsls	r3, r3, #31
 8002f92:	d503      	bpl.n	8002f9c <USB_ReadPMA+0x24>
 8002f94:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 8002f96:	1900      	adds	r0, r0, r4
 8002f98:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002f9a:	550b      	strb	r3, [r1, r4]
  }
}
 8002f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002f9e:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8002fa0:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002fa2:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002fa4:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8002fa6:	0a12      	lsrs	r2, r2, #8
 8002fa8:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8002faa:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 8002fac:	e7ed      	b.n	8002f8a <USB_ReadPMA+0x12>
	...

08002fb0 <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_CfgFSDesc);
 8002fb0:	2322      	movs	r3, #34	@ 0x22
 8002fb2:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgFSDesc;
 8002fb4:	4800      	ldr	r0, [pc, #0]	@ (8002fb8 <USBD_HID_GetFSCfgDesc+0x8>)
}
 8002fb6:	4770      	bx	lr
 8002fb8:	2000006c 	.word	0x2000006c

08002fbc <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_CfgHSDesc);
 8002fbc:	2322      	movs	r3, #34	@ 0x22
 8002fbe:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgHSDesc;
 8002fc0:	4800      	ldr	r0, [pc, #0]	@ (8002fc4 <USBD_HID_GetHSCfgDesc+0x8>)
}
 8002fc2:	4770      	bx	lr
 8002fc4:	20000048 	.word	0x20000048

08002fc8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8002fc8:	2322      	movs	r3, #34	@ 0x22
 8002fca:	8003      	strh	r3, [r0, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8002fcc:	4800      	ldr	r0, [pc, #0]	@ (8002fd0 <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
}
 8002fce:	4770      	bx	lr
 8002fd0:	20000024 	.word	0x20000024

08002fd4 <USBD_HID_DataIn>:
                                uint8_t epnum)
{

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002fd4:	23ae      	movs	r3, #174	@ 0xae
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	58c3      	ldr	r3, [r0, r3]
 8002fda:	2000      	movs	r0, #0
 8002fdc:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002fde:	4770      	bx	lr

08002fe0 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8002fe0:	230a      	movs	r3, #10
 8002fe2:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
 8002fe4:	4800      	ldr	r0, [pc, #0]	@ (8002fe8 <USBD_HID_GetDeviceQualifierDesc+0x8>)
}
 8002fe6:	4770      	bx	lr
 8002fe8:	2000000c 	.word	0x2000000c

08002fec <USBD_HID_Setup>:
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8002fec:	22ae      	movs	r2, #174	@ 0xae
{
 8002fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ff0:	000b      	movs	r3, r1
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8002ff2:	0092      	lsls	r2, r2, #2
 8002ff4:	5881      	ldr	r1, [r0, r2]
  uint16_t status_info = 0U;
 8002ff6:	466a      	mov	r2, sp
{
 8002ff8:	0004      	movs	r4, r0
 8002ffa:	7818      	ldrb	r0, [r3, #0]
  uint16_t status_info = 0U;
 8002ffc:	1d95      	adds	r5, r2, #6
 8002ffe:	2200      	movs	r2, #0
 8003000:	0006      	movs	r6, r0
 8003002:	802a      	strh	r2, [r5, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003004:	3260      	adds	r2, #96	@ 0x60
 8003006:	4016      	ands	r6, r2
 8003008:	4210      	tst	r0, r2
 800300a:	d01a      	beq.n	8003042 <USBD_HID_Setup+0x56>
 800300c:	2e20      	cmp	r6, #32
 800300e:	d12b      	bne.n	8003068 <USBD_HID_Setup+0x7c>
      switch (req->bRequest)
 8003010:	7858      	ldrb	r0, [r3, #1]
 8003012:	3802      	subs	r0, #2
 8003014:	2809      	cmp	r0, #9
 8003016:	d827      	bhi.n	8003068 <USBD_HID_Setup+0x7c>
 8003018:	f7fd f888 	bl	800012c <__gnu_thumb1_case_uqi>
 800301c:	26260e0d 	.word	0x26260e0d
 8003020:	26262626 	.word	0x26262626
 8003024:	0509      	.short	0x0509
          hhid->Protocol = (uint8_t)(req->wValue);
 8003026:	789b      	ldrb	r3, [r3, #2]
 8003028:	600b      	str	r3, [r1, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800302a:	2000      	movs	r0, #0
}
 800302c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800302e:	885b      	ldrh	r3, [r3, #2]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	604b      	str	r3, [r1, #4]
          break;
 8003034:	e7f9      	b.n	800302a <USBD_HID_Setup+0x3e>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8003036:	3104      	adds	r1, #4
 8003038:	2201      	movs	r2, #1
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800303a:	0020      	movs	r0, r4
 800303c:	f000 fc29 	bl	8003892 <USBD_CtlSendData>
 8003040:	e7f3      	b.n	800302a <USBD_HID_Setup+0x3e>
      switch (req->bRequest)
 8003042:	7858      	ldrb	r0, [r3, #1]
 8003044:	280b      	cmp	r0, #11
 8003046:	d80f      	bhi.n	8003068 <USBD_HID_Setup+0x7c>
 8003048:	f7fd f870 	bl	800012c <__gnu_thumb1_case_uqi>
 800304c:	0e0e0e06 	.word	0x0e0e0e06
 8003050:	0e140e0e 	.word	0x0e140e0e
 8003054:	322a0e0e 	.word	0x322a0e0e
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003058:	22a7      	movs	r2, #167	@ 0xa7
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	5ca2      	ldrb	r2, [r4, r2]
 800305e:	2a03      	cmp	r2, #3
 8003060:	d102      	bne.n	8003068 <USBD_HID_Setup+0x7c>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003062:	0029      	movs	r1, r5
 8003064:	3a01      	subs	r2, #1
 8003066:	e7e8      	b.n	800303a <USBD_HID_Setup+0x4e>
            USBD_CtlError(pdev, req);
 8003068:	0020      	movs	r0, r4
 800306a:	0019      	movs	r1, r3
 800306c:	f000 fbea 	bl	8003844 <USBD_CtlError>
            ret = USBD_FAIL;
 8003070:	2002      	movs	r0, #2
 8003072:	e7db      	b.n	800302c <USBD_HID_Setup+0x40>
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8003074:	885a      	ldrh	r2, [r3, #2]
 8003076:	0a12      	lsrs	r2, r2, #8
 8003078:	2a22      	cmp	r2, #34	@ 0x22
 800307a:	d107      	bne.n	800308c <USBD_HID_Setup+0xa0>
        	  len = MIN(DS5_HID_REPORT_DESC_SIZE, req->wLength);
 800307c:	88db      	ldrh	r3, [r3, #6]
 800307e:	1c1a      	adds	r2, r3, #0
 8003080:	2b63      	cmp	r3, #99	@ 0x63
 8003082:	d900      	bls.n	8003086 <USBD_HID_Setup+0x9a>
 8003084:	2263      	movs	r2, #99	@ 0x63
			  pbuf = DS5_HID_ReportDesc;
 8003086:	490e      	ldr	r1, [pc, #56]	@ (80030c0 <USBD_HID_Setup+0xd4>)
        	  len = MIN(DS5_HID_REPORT_DESC_SIZE, req->wLength);
 8003088:	b292      	uxth	r2, r2
			  pbuf = DS5_HID_ReportDesc;
 800308a:	e7d6      	b.n	800303a <USBD_HID_Setup+0x4e>
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800308c:	2a21      	cmp	r2, #33	@ 0x21
 800308e:	d1eb      	bne.n	8003068 <USBD_HID_Setup+0x7c>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8003090:	88db      	ldrh	r3, [r3, #6]
 8003092:	1c1a      	adds	r2, r3, #0
 8003094:	2b09      	cmp	r3, #9
 8003096:	d900      	bls.n	800309a <USBD_HID_Setup+0xae>
 8003098:	2209      	movs	r2, #9
            pbuf = USBD_HID_Desc;
 800309a:	490a      	ldr	r1, [pc, #40]	@ (80030c4 <USBD_HID_Setup+0xd8>)
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800309c:	b292      	uxth	r2, r2
          USBD_CtlSendData(pdev, pbuf, len);
 800309e:	e7cc      	b.n	800303a <USBD_HID_Setup+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030a0:	22a7      	movs	r2, #167	@ 0xa7
 80030a2:	0092      	lsls	r2, r2, #2
 80030a4:	5ca2      	ldrb	r2, [r4, r2]
 80030a6:	2a03      	cmp	r2, #3
 80030a8:	d1de      	bne.n	8003068 <USBD_HID_Setup+0x7c>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80030aa:	3108      	adds	r1, #8
 80030ac:	3a02      	subs	r2, #2
 80030ae:	e7c4      	b.n	800303a <USBD_HID_Setup+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030b0:	22a7      	movs	r2, #167	@ 0xa7
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	5ca2      	ldrb	r2, [r4, r2]
 80030b6:	2a03      	cmp	r2, #3
 80030b8:	d1d6      	bne.n	8003068 <USBD_HID_Setup+0x7c>
            hhid->AltSetting = (uint8_t)(req->wValue);
 80030ba:	789b      	ldrb	r3, [r3, #2]
 80030bc:	608b      	str	r3, [r1, #8]
 80030be:	e7b4      	b.n	800302a <USBD_HID_Setup+0x3e>
 80030c0:	200000c8 	.word	0x200000c8
 80030c4:	20000018 	.word	0x20000018

080030c8 <USBD_HID_DeInit>:
{
 80030c8:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData != NULL)
 80030ca:	25ae      	movs	r5, #174	@ 0xae
{
 80030cc:	0004      	movs	r4, r0
  pdev->ep_in[DS5_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80030ce:	2600      	movs	r6, #0
  USBD_LL_CloseEP(pdev, DS5_HID_EPIN_ADDR);
 80030d0:	2181      	movs	r1, #129	@ 0x81
  if (pdev->pClassData != NULL)
 80030d2:	00ad      	lsls	r5, r5, #2
  USBD_LL_CloseEP(pdev, DS5_HID_EPIN_ADDR);
 80030d4:	f000 fd79 	bl	8003bca <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80030d8:	5960      	ldr	r0, [r4, r5]
  pdev->ep_in[DS5_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80030da:	62e6      	str	r6, [r4, #44]	@ 0x2c
  if (pdev->pClassData != NULL)
 80030dc:	42b0      	cmp	r0, r6
 80030de:	d002      	beq.n	80030e6 <USBD_HID_DeInit+0x1e>
    USBD_free(pdev->pClassData);
 80030e0:	f000 fdc0 	bl	8003c64 <USBD_static_free>
    pdev->pClassData = NULL;
 80030e4:	5166      	str	r6, [r4, r5]
}
 80030e6:	2000      	movs	r0, #0
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080030ec <USBD_HID_Init>:
{
 80030ec:	b570      	push	{r4, r5, r6, lr}
	if (g_current_mode == MODE_DS5) {
 80030ee:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <USBD_HID_Init+0x48>)
{
 80030f0:	0004      	movs	r4, r0
	if (g_current_mode == MODE_DS5) {
 80030f2:	781d      	ldrb	r5, [r3, #0]
 80030f4:	2d02      	cmp	r5, #2
 80030f6:	d113      	bne.n	8003120 <USBD_HID_Init+0x34>
	  USBD_LL_OpenEP(pdev, DS5_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, DS5_HID_EPIN_SIZE);
 80030f8:	2340      	movs	r3, #64	@ 0x40
 80030fa:	2203      	movs	r2, #3
 80030fc:	2181      	movs	r1, #129	@ 0x81
 80030fe:	f000 fd58 	bl	8003bb2 <USBD_LL_OpenEP>
	  pdev->ep_in[DS5_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003102:	2301      	movs	r3, #1
 8003104:	62e3      	str	r3, [r4, #44]	@ 0x2c
  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8003106:	2010      	movs	r0, #16
 8003108:	f000 fda8 	bl	8003c5c <USBD_static_malloc>
 800310c:	22ae      	movs	r2, #174	@ 0xae
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	0003      	movs	r3, r0
 8003112:	50a0      	str	r0, [r4, r2]
    return USBD_FAIL;
 8003114:	2002      	movs	r0, #2
  if (pdev->pClassData == NULL)
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <USBD_HID_Init+0x32>
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800311a:	2000      	movs	r0, #0
 800311c:	7318      	strb	r0, [r3, #12]
}
 800311e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (g_current_mode == MODE_GAMEPAD) {
 8003120:	2d01      	cmp	r5, #1
 8003122:	d1f0      	bne.n	8003106 <USBD_HID_Init+0x1a>
	  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8003124:	2304      	movs	r3, #4
 8003126:	2203      	movs	r2, #3
 8003128:	2181      	movs	r1, #129	@ 0x81
 800312a:	f000 fd42 	bl	8003bb2 <USBD_LL_OpenEP>
	  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800312e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8003130:	e7e9      	b.n	8003106 <USBD_HID_Init+0x1a>
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	200002bc 	.word	0x200002bc

08003138 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003138:	2302      	movs	r3, #2
{
 800313a:	b510      	push	{r4, lr}
  if (pdev == NULL)
 800313c:	2800      	cmp	r0, #0
 800313e:	d013      	beq.n	8003168 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003140:	23ad      	movs	r3, #173	@ 0xad
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	58c4      	ldr	r4, [r0, r3]
 8003146:	2c00      	cmp	r4, #0
 8003148:	d001      	beq.n	800314e <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 800314a:	2400      	movs	r4, #0
 800314c:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800314e:	2900      	cmp	r1, #0
 8003150:	d002      	beq.n	8003158 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8003152:	23ac      	movs	r3, #172	@ 0xac
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003158:	23a7      	movs	r3, #167	@ 0xa7
 800315a:	2101      	movs	r1, #1
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8003160:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003162:	f000 fceb 	bl	8003b3c <USBD_LL_Init>

  return USBD_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	0018      	movs	r0, r3
 800316a:	bd10      	pop	{r4, pc}

0800316c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800316c:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800316e:	2002      	movs	r0, #2
  if (pclass != NULL)
 8003170:	2900      	cmp	r1, #0
 8003172:	d003      	beq.n	800317c <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 8003174:	22ad      	movs	r2, #173	@ 0xad
    status = USBD_OK;
 8003176:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 800317c:	4770      	bx	lr

0800317e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800317e:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003180:	f000 fd0e 	bl	8003ba0 <USBD_LL_Start>

  return USBD_OK;
}
 8003184:	2000      	movs	r0, #0
 8003186:	bd10      	pop	{r4, pc}

08003188 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003188:	23ad      	movs	r3, #173	@ 0xad
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	58c2      	ldr	r2, [r0, r3]
{
 800318e:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003190:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 8003192:	2a00      	cmp	r2, #0
 8003194:	d004      	beq.n	80031a0 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	4798      	blx	r3
 800319a:	1e43      	subs	r3, r0, #1
 800319c:	4198      	sbcs	r0, r3
 800319e:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	bd10      	pop	{r4, pc}

080031a4 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80031a4:	23ad      	movs	r3, #173	@ 0xad
{
 80031a6:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	58c3      	ldr	r3, [r0, r3]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4798      	blx	r3

  return USBD_OK;
}
 80031b0:	2000      	movs	r0, #0
 80031b2:	bd10      	pop	{r4, pc}

080031b4 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80031b4:	23aa      	movs	r3, #170	@ 0xaa
 80031b6:	009b      	lsls	r3, r3, #2
{
 80031b8:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80031ba:	18c5      	adds	r5, r0, r3
{
 80031bc:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80031be:	0028      	movs	r0, r5
 80031c0:	f000 fb2c 	bl	800381c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80031c4:	23a5      	movs	r3, #165	@ 0xa5
 80031c6:	2201      	movs	r2, #1
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <USBD_LL_SetupStage+0x60>)
 80031ce:	5ae2      	ldrh	r2, [r4, r3]
 80031d0:	3b16      	subs	r3, #22
 80031d2:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80031d4:	3310      	adds	r3, #16
 80031d6:	5ce1      	ldrb	r1, [r4, r3]
 80031d8:	231f      	movs	r3, #31
 80031da:	400b      	ands	r3, r1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d009      	beq.n	80031f4 <USBD_LL_SetupStage+0x40>
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d00c      	beq.n	80031fe <USBD_LL_SetupStage+0x4a>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10f      	bne.n	8003208 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80031e8:	0029      	movs	r1, r5
 80031ea:	0020      	movs	r0, r4
 80031ec:	f000 f91a 	bl	8003424 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80031f0:	2000      	movs	r0, #0
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80031f4:	0029      	movs	r1, r5
 80031f6:	0020      	movs	r0, r4
 80031f8:	f000 fa54 	bl	80036a4 <USBD_StdItfReq>
      break;
 80031fc:	e7f8      	b.n	80031f0 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 80031fe:	0029      	movs	r1, r5
 8003200:	0020      	movs	r0, r4
 8003202:	f000 fa77 	bl	80036f4 <USBD_StdEPReq>
      break;
 8003206:	e7f3      	b.n	80031f0 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003208:	237f      	movs	r3, #127	@ 0x7f
 800320a:	0020      	movs	r0, r4
 800320c:	4399      	bics	r1, r3
 800320e:	f000 fce5 	bl	8003bdc <USBD_LL_StallEP>
      break;
 8003212:	e7ed      	b.n	80031f0 <USBD_LL_SetupStage+0x3c>
 8003214:	000002ae 	.word	0x000002ae

08003218 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	0004      	movs	r4, r0
 800321c:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800321e:	2900      	cmp	r1, #0
 8003220:	d12e      	bne.n	8003280 <USBD_LL_DataOutStage+0x68>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003222:	23a5      	movs	r3, #165	@ 0xa5
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	58c2      	ldr	r2, [r0, r3]
 8003228:	2a03      	cmp	r2, #3
 800322a:	d123      	bne.n	8003274 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 800322c:	0002      	movs	r2, r0
 800322e:	3255      	adds	r2, #85	@ 0x55
 8003230:	32ff      	adds	r2, #255	@ 0xff
 8003232:	68d3      	ldr	r3, [r2, #12]
 8003234:	6910      	ldr	r0, [r2, #16]
 8003236:	4283      	cmp	r3, r0
 8003238:	d90b      	bls.n	8003252 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 800323a:	1a1b      	subs	r3, r3, r0
 800323c:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 800323e:	b282      	uxth	r2, r0
 8003240:	4298      	cmp	r0, r3
 8003242:	d900      	bls.n	8003246 <USBD_LL_DataOutStage+0x2e>
 8003244:	b29a      	uxth	r2, r3
 8003246:	0029      	movs	r1, r5
 8003248:	0020      	movs	r0, r4
 800324a:	f000 fb38 	bl	80038be <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800324e:	2000      	movs	r0, #0
}
 8003250:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003252:	23ad      	movs	r3, #173	@ 0xad
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	58e3      	ldr	r3, [r4, r3]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800325e:	22a7      	movs	r2, #167	@ 0xa7
 8003260:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003262:	5ca2      	ldrb	r2, [r4, r2]
 8003264:	2a03      	cmp	r2, #3
 8003266:	d101      	bne.n	800326c <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8003268:	0020      	movs	r0, r4
 800326a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800326c:	0020      	movs	r0, r4
 800326e:	f000 fb2e 	bl	80038ce <USBD_CtlSendStatus>
 8003272:	e7ec      	b.n	800324e <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003274:	2a05      	cmp	r2, #5
 8003276:	d1ea      	bne.n	800324e <USBD_LL_DataOutStage+0x36>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003278:	50c1      	str	r1, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 800327a:	f000 fcaf 	bl	8003bdc <USBD_LL_StallEP>
 800327e:	e7e6      	b.n	800324e <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003280:	23ad      	movs	r3, #173	@ 0xad
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 8003286:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0e0      	beq.n	8003250 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800328e:	22a7      	movs	r2, #167	@ 0xa7
 8003290:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8003292:	5ca2      	ldrb	r2, [r4, r2]
 8003294:	2a03      	cmp	r2, #3
 8003296:	d1db      	bne.n	8003250 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8003298:	0020      	movs	r0, r4
 800329a:	4798      	blx	r3
 800329c:	e7d7      	b.n	800324e <USBD_LL_DataOutStage+0x36>

0800329e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800329e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a0:	000d      	movs	r5, r1
 80032a2:	0004      	movs	r4, r0
 80032a4:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	d14d      	bne.n	8003346 <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80032aa:	23a5      	movs	r3, #165	@ 0xa5
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	58c3      	ldr	r3, [r0, r3]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d13e      	bne.n	8003332 <USBD_LL_DataInStage+0x94>
    {
      if (pep->rem_length > pep->maxpacket)
 80032b4:	6a03      	ldr	r3, [r0, #32]
 80032b6:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 80032b8:	42b3      	cmp	r3, r6
 80032ba:	d911      	bls.n	80032e0 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 80032bc:	1b9b      	subs	r3, r3, r6
 80032be:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	f000 faf4 	bl	80038ae <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80032c6:	002b      	movs	r3, r5
 80032c8:	002a      	movs	r2, r5
 80032ca:	0029      	movs	r1, r5
 80032cc:	0020      	movs	r0, r4
 80032ce:	f000 fcbc 	bl	8003c4a <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80032d2:	23a8      	movs	r3, #168	@ 0xa8
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	5ce2      	ldrb	r2, [r4, r3]
 80032d8:	2a01      	cmp	r2, #1
 80032da:	d031      	beq.n	8003340 <USBD_LL_DataInStage+0xa2>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80032dc:	2000      	movs	r0, #0
}
 80032de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80032e0:	69c7      	ldr	r7, [r0, #28]
 80032e2:	0031      	movs	r1, r6
 80032e4:	0038      	movs	r0, r7
 80032e6:	f7fc ffbb 	bl	8000260 <__aeabi_uidivmod>
 80032ea:	1e0d      	subs	r5, r1, #0
 80032ec:	d10c      	bne.n	8003308 <USBD_LL_DataInStage+0x6a>
 80032ee:	42be      	cmp	r6, r7
 80032f0:	d80a      	bhi.n	8003308 <USBD_LL_DataInStage+0x6a>
            (pep->total_length < pdev->ep0_data_len))
 80032f2:	26a6      	movs	r6, #166	@ 0xa6
 80032f4:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 80032f6:	59a3      	ldr	r3, [r4, r6]
 80032f8:	429f      	cmp	r7, r3
 80032fa:	d205      	bcs.n	8003308 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80032fc:	000a      	movs	r2, r1
 80032fe:	0020      	movs	r0, r4
 8003300:	f000 fad5 	bl	80038ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003304:	51a5      	str	r5, [r4, r6]
 8003306:	e7de      	b.n	80032c6 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003308:	23ad      	movs	r3, #173	@ 0xad
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	58e3      	ldr	r3, [r4, r3]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <USBD_LL_DataInStage+0x84>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003314:	22a7      	movs	r2, #167	@ 0xa7
 8003316:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003318:	5ca2      	ldrb	r2, [r4, r2]
 800331a:	2a03      	cmp	r2, #3
 800331c:	d101      	bne.n	8003322 <USBD_LL_DataInStage+0x84>
            pdev->pClass->EP0_TxSent(pdev);
 800331e:	0020      	movs	r0, r4
 8003320:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003322:	2180      	movs	r1, #128	@ 0x80
 8003324:	0020      	movs	r0, r4
 8003326:	f000 fc59 	bl	8003bdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800332a:	0020      	movs	r0, r4
 800332c:	f000 fadb 	bl	80038e6 <USBD_CtlReceiveStatus>
 8003330:	e7cf      	b.n	80032d2 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003332:	2204      	movs	r2, #4
 8003334:	4393      	bics	r3, r2
 8003336:	d1cc      	bne.n	80032d2 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003338:	2180      	movs	r1, #128	@ 0x80
 800333a:	f000 fc4f 	bl	8003bdc <USBD_LL_StallEP>
 800333e:	e7c8      	b.n	80032d2 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8003340:	2200      	movs	r2, #0
 8003342:	54e2      	strb	r2, [r4, r3]
 8003344:	e7ca      	b.n	80032dc <USBD_LL_DataInStage+0x3e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003346:	23ad      	movs	r3, #173	@ 0xad
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800334c:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0c4      	beq.n	80032de <USBD_LL_DataInStage+0x40>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003354:	22a7      	movs	r2, #167	@ 0xa7
 8003356:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8003358:	5ca2      	ldrb	r2, [r4, r2]
 800335a:	2a03      	cmp	r2, #3
 800335c:	d1bf      	bne.n	80032de <USBD_LL_DataInStage+0x40>
    pdev->pClass->DataIn(pdev, epnum);
 800335e:	0029      	movs	r1, r5
 8003360:	0020      	movs	r0, r4
 8003362:	4798      	blx	r3
 8003364:	e7ba      	b.n	80032dc <USBD_LL_DataInStage+0x3e>

08003366 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003366:	2200      	movs	r2, #0
{
 8003368:	b570      	push	{r4, r5, r6, lr}
 800336a:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800336c:	0011      	movs	r1, r2
 800336e:	2340      	movs	r3, #64	@ 0x40
 8003370:	f000 fc1f 	bl	8003bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003374:	0023      	movs	r3, r4
 8003376:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003378:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800337a:	33fc      	adds	r3, #252	@ 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800337c:	2180      	movs	r1, #128	@ 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800337e:	65dd      	str	r5, [r3, #92]	@ 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003380:	669e      	str	r6, [r3, #104]	@ 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003382:	2200      	movs	r2, #0
 8003384:	0033      	movs	r3, r6
 8003386:	0020      	movs	r0, r4
 8003388:	f000 fc13 	bl	8003bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800338c:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 800338e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003390:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003392:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003394:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003396:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8003398:	3b08      	subs	r3, #8
 800339a:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 800339c:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 800339e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80033a0:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 80033a2:	3314      	adds	r3, #20
 80033a4:	58e3      	ldr	r3, [r4, r3]
 80033a6:	428b      	cmp	r3, r1
 80033a8:	d005      	beq.n	80033b6 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80033aa:	23ad      	movs	r3, #173	@ 0xad
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	58e3      	ldr	r3, [r4, r3]
 80033b0:	0020      	movs	r0, r4
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4798      	blx	r3
  }

  return USBD_OK;
}
 80033b6:	2000      	movs	r0, #0
 80033b8:	bd70      	pop	{r4, r5, r6, pc}

080033ba <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80033ba:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80033bc:	2000      	movs	r0, #0
 80033be:	4770      	bx	lr

080033c0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80033c0:	23a7      	movs	r3, #167	@ 0xa7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	5cc1      	ldrb	r1, [r0, r3]
 80033c6:	4a03      	ldr	r2, [pc, #12]	@ (80033d4 <USBD_LL_Suspend+0x14>)
 80033c8:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80033ca:	2204      	movs	r2, #4
 80033cc:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 80033ce:	2000      	movs	r0, #0
 80033d0:	4770      	bx	lr
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	0000029d 	.word	0x0000029d

080033d8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80033d8:	23a7      	movs	r3, #167	@ 0xa7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	5cc2      	ldrb	r2, [r0, r3]
 80033de:	2a04      	cmp	r2, #4
 80033e0:	d102      	bne.n	80033e8 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80033e2:	4a02      	ldr	r2, [pc, #8]	@ (80033ec <USBD_LL_Resume+0x14>)
 80033e4:	5c82      	ldrb	r2, [r0, r2]
 80033e6:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 80033e8:	2000      	movs	r0, #0
 80033ea:	4770      	bx	lr
 80033ec:	0000029d 	.word	0x0000029d

080033f0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80033f0:	23a7      	movs	r3, #167	@ 0xa7
{
 80033f2:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	5cc3      	ldrb	r3, [r0, r3]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d106      	bne.n	800340a <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 80033fc:	23ad      	movs	r3, #173	@ 0xad
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	58c3      	ldr	r3, [r0, r3]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d000      	beq.n	800340a <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8003408:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800340a:	2000      	movs	r0, #0
 800340c:	bd10      	pop	{r4, pc}

0800340e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800340e:	b510      	push	{r4, lr}
 8003410:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003412:	2180      	movs	r1, #128	@ 0x80
 8003414:	f000 fbe2 	bl	8003bdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003418:	2100      	movs	r1, #0
 800341a:	0020      	movs	r0, r4
 800341c:	f000 fbde 	bl	8003bdc <USBD_LL_StallEP>
}
 8003420:	bd10      	pop	{r4, pc}
	...

08003424 <USBD_StdDevReq>:
{
 8003424:	2260      	movs	r2, #96	@ 0x60
 8003426:	780b      	ldrb	r3, [r1, #0]
 8003428:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800342a:	4013      	ands	r3, r2
 800342c:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800342e:	0019      	movs	r1, r3
 8003430:	1892      	adds	r2, r2, r2
 8003432:	3920      	subs	r1, #32
{
 8003434:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003436:	4211      	tst	r1, r2
 8003438:	d005      	beq.n	8003446 <USBD_StdDevReq+0x22>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <USBD_StdDevReq+0x32>
        USBD_CtlError(pdev, req);
 800343e:	0020      	movs	r0, r4
 8003440:	f7ff ffe5 	bl	800340e <USBD_CtlError.constprop.0>
        break;
 8003444:	e005      	b.n	8003452 <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 8003446:	23ad      	movs	r3, #173	@ 0xad
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	58c3      	ldr	r3, [r0, r3]
 800344c:	0029      	movs	r1, r5
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4798      	blx	r3
}
 8003452:	2000      	movs	r0, #0
 8003454:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      switch (req->bRequest)
 8003456:	7868      	ldrb	r0, [r5, #1]
 8003458:	2809      	cmp	r0, #9
 800345a:	d8f0      	bhi.n	800343e <USBD_StdDevReq+0x1a>
 800345c:	f7fc fe70 	bl	8000140 <__gnu_thumb1_case_shi>
 8003460:	010e00ef 	.word	0x010e00ef
 8003464:	0106ffef 	.word	0x0106ffef
 8003468:	007dffef 	.word	0x007dffef
 800346c:	ffef000a 	.word	0xffef000a
 8003470:	009f00d6 	.word	0x009f00d6
  uint16_t len = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	466a      	mov	r2, sp
 8003478:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 800347a:	886b      	ldrh	r3, [r5, #2]
 800347c:	0a18      	lsrs	r0, r3, #8
 800347e:	3801      	subs	r0, #1
 8003480:	2806      	cmp	r0, #6
 8003482:	d8dc      	bhi.n	800343e <USBD_StdDevReq+0x1a>
 8003484:	f7fc fe48 	bl	8000118 <__gnu_thumb1_case_sqi>
 8003488:	db261704 	.word	0xdb261704
 800348c:	40db      	.short	0x40db
 800348e:	4c          	.byte	0x4c
 800348f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003490:	23ac      	movs	r3, #172	@ 0xac
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	58e3      	ldr	r3, [r4, r3]
 8003496:	7c20      	ldrb	r0, [r4, #16]
 8003498:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800349a:	466a      	mov	r2, sp
 800349c:	1d91      	adds	r1, r2, #6
 800349e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80034a0:	466b      	mov	r3, sp
 80034a2:	88d9      	ldrh	r1, [r3, #6]
 80034a4:	88ea      	ldrh	r2, [r5, #6]
 80034a6:	2900      	cmp	r1, #0
 80034a8:	d052      	beq.n	8003550 <USBD_StdDevReq+0x12c>
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	d145      	bne.n	800353a <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 80034ae:	0020      	movs	r0, r4
 80034b0:	f000 fa0d 	bl	80038ce <USBD_CtlSendStatus>
 80034b4:	e7cd      	b.n	8003452 <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 80034b6:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034b8:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034be:	2a00      	cmp	r2, #0
 80034c0:	d106      	bne.n	80034d0 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80034c4:	466a      	mov	r2, sp
 80034c6:	1d90      	adds	r0, r2, #6
 80034c8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80034ca:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80034cc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80034ce:	e7e7      	b.n	80034a0 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	e7f7      	b.n	80034c4 <USBD_StdDevReq+0xa0>
      switch ((uint8_t)(req->wValue))
 80034d4:	b2d8      	uxtb	r0, r3
 80034d6:	2805      	cmp	r0, #5
 80034d8:	d8b1      	bhi.n	800343e <USBD_StdDevReq+0x1a>
 80034da:	23ac      	movs	r3, #172	@ 0xac
 80034dc:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80034de:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 80034e0:	f7fc fe24 	bl	800012c <__gnu_thumb1_case_uqi>
 80034e4:	0c0a0803 	.word	0x0c0a0803
 80034e8:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0a6      	beq.n	800343e <USBD_StdDevReq+0x1a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80034f0:	7c20      	ldrb	r0, [r4, #16]
 80034f2:	e7d2      	b.n	800349a <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	e7f9      	b.n	80034ec <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	e7f7      	b.n	80034ec <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	e7f5      	b.n	80034ec <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	e7f3      	b.n	80034ec <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	e7f1      	b.n	80034ec <USBD_StdDevReq+0xc8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003508:	7c23      	ldrb	r3, [r4, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d000      	beq.n	8003510 <USBD_StdDevReq+0xec>
 800350e:	e796      	b.n	800343e <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003510:	23ad      	movs	r3, #173	@ 0xad
 8003512:	466a      	mov	r2, sp
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	58e3      	ldr	r3, [r4, r3]
 8003518:	1d90      	adds	r0, r2, #6
 800351a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351c:	4798      	blx	r3
  if (err != 0U)
 800351e:	e7bf      	b.n	80034a0 <USBD_StdDevReq+0x7c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003520:	7c23      	ldrb	r3, [r4, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d000      	beq.n	8003528 <USBD_StdDevReq+0x104>
 8003526:	e78a      	b.n	800343e <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003528:	23ad      	movs	r3, #173	@ 0xad
 800352a:	466a      	mov	r2, sp
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	58e3      	ldr	r3, [r4, r3]
 8003530:	1d90      	adds	r0, r2, #6
 8003532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003534:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003536:	2307      	movs	r3, #7
 8003538:	e7c8      	b.n	80034cc <USBD_StdDevReq+0xa8>
      len = MIN(len, req->wLength);
 800353a:	1c0b      	adds	r3, r1, #0
 800353c:	4291      	cmp	r1, r2
 800353e:	d900      	bls.n	8003542 <USBD_StdDevReq+0x11e>
 8003540:	1c13      	adds	r3, r2, #0
 8003542:	4669      	mov	r1, sp
 8003544:	b29a      	uxth	r2, r3
 8003546:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003548:	0001      	movs	r1, r0
 800354a:	0020      	movs	r0, r4
 800354c:	f000 f9a1 	bl	8003892 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003550:	88eb      	ldrh	r3, [r5, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d000      	beq.n	8003558 <USBD_StdDevReq+0x134>
 8003556:	e77c      	b.n	8003452 <USBD_StdDevReq+0x2e>
 8003558:	e7a9      	b.n	80034ae <USBD_StdDevReq+0x8a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800355a:	88ab      	ldrh	r3, [r5, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d000      	beq.n	8003562 <USBD_StdDevReq+0x13e>
 8003560:	e76d      	b.n	800343e <USBD_StdDevReq+0x1a>
 8003562:	88eb      	ldrh	r3, [r5, #6]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d000      	beq.n	800356a <USBD_StdDevReq+0x146>
 8003568:	e769      	b.n	800343e <USBD_StdDevReq+0x1a>
 800356a:	886d      	ldrh	r5, [r5, #2]
 800356c:	2d7f      	cmp	r5, #127	@ 0x7f
 800356e:	d900      	bls.n	8003572 <USBD_StdDevReq+0x14e>
 8003570:	e765      	b.n	800343e <USBD_StdDevReq+0x1a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003572:	26a7      	movs	r6, #167	@ 0xa7
 8003574:	00b6      	lsls	r6, r6, #2
 8003576:	5da3      	ldrb	r3, [r4, r6]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d100      	bne.n	800357e <USBD_StdDevReq+0x15a>
 800357c:	e75f      	b.n	800343e <USBD_StdDevReq+0x1a>
      pdev->dev_address = dev_addr;
 800357e:	4b47      	ldr	r3, [pc, #284]	@ (800369c <USBD_StdDevReq+0x278>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003580:	b2ed      	uxtb	r5, r5
      pdev->dev_address = dev_addr;
 8003582:	54e5      	strb	r5, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003584:	0029      	movs	r1, r5
 8003586:	0020      	movs	r0, r4
 8003588:	f000 fb4d 	bl	8003c26 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800358c:	0020      	movs	r0, r4
 800358e:	f000 f99e 	bl	80038ce <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003592:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8003594:	2d00      	cmp	r5, #0
 8003596:	d100      	bne.n	800359a <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003598:	2301      	movs	r3, #1
 800359a:	55a3      	strb	r3, [r4, r6]
 800359c:	e759      	b.n	8003452 <USBD_StdDevReq+0x2e>
  cfgidx = (uint8_t)(req->wValue);
 800359e:	78a9      	ldrb	r1, [r5, #2]
 80035a0:	4d3f      	ldr	r5, [pc, #252]	@ (80036a0 <USBD_StdDevReq+0x27c>)
 80035a2:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80035a4:	2901      	cmp	r1, #1
 80035a6:	d900      	bls.n	80035aa <USBD_StdDevReq+0x186>
 80035a8:	e749      	b.n	800343e <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 80035aa:	23a7      	movs	r3, #167	@ 0xa7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	5ce2      	ldrb	r2, [r4, r3]
 80035b0:	2a02      	cmp	r2, #2
 80035b2:	d009      	beq.n	80035c8 <USBD_StdDevReq+0x1a4>
 80035b4:	2a03      	cmp	r2, #3
 80035b6:	d015      	beq.n	80035e4 <USBD_StdDevReq+0x1c0>
        USBD_CtlError(pdev, req);
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7ff ff28 	bl	800340e <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80035be:	0020      	movs	r0, r4
 80035c0:	7829      	ldrb	r1, [r5, #0]
 80035c2:	f7ff fdef 	bl	80031a4 <USBD_ClrClassConfig>
        break;
 80035c6:	e744      	b.n	8003452 <USBD_StdDevReq+0x2e>
        if (cfgidx)
 80035c8:	2900      	cmp	r1, #0
 80035ca:	d100      	bne.n	80035ce <USBD_StdDevReq+0x1aa>
 80035cc:	e76f      	b.n	80034ae <USBD_StdDevReq+0x8a>
          pdev->dev_config = cfgidx;
 80035ce:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80035d0:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 80035d2:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80035d4:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80035d6:	0020      	movs	r0, r4
 80035d8:	f7ff fdd6 	bl	8003188 <USBD_SetClassConfig>
 80035dc:	2802      	cmp	r0, #2
 80035de:	d000      	beq.n	80035e2 <USBD_StdDevReq+0x1be>
 80035e0:	e765      	b.n	80034ae <USBD_StdDevReq+0x8a>
 80035e2:	e72c      	b.n	800343e <USBD_StdDevReq+0x1a>
        if (cfgidx == 0U)
 80035e4:	2900      	cmp	r1, #0
 80035e6:	d106      	bne.n	80035f6 <USBD_StdDevReq+0x1d2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80035e8:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 80035ea:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80035ec:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 80035ee:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80035f0:	f7ff fdd8 	bl	80031a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80035f4:	e75b      	b.n	80034ae <USBD_StdDevReq+0x8a>
        else if (cfgidx != pdev->dev_config)
 80035f6:	6861      	ldr	r1, [r4, #4]
 80035f8:	2901      	cmp	r1, #1
 80035fa:	d100      	bne.n	80035fe <USBD_StdDevReq+0x1da>
 80035fc:	e757      	b.n	80034ae <USBD_StdDevReq+0x8a>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80035fe:	b2c9      	uxtb	r1, r1
 8003600:	0020      	movs	r0, r4
 8003602:	f7ff fdcf 	bl	80031a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003606:	7829      	ldrb	r1, [r5, #0]
 8003608:	6061      	str	r1, [r4, #4]
 800360a:	e7e4      	b.n	80035d6 <USBD_StdDevReq+0x1b2>
  if (req->wLength != 1U)
 800360c:	88ea      	ldrh	r2, [r5, #6]
 800360e:	2a01      	cmp	r2, #1
 8003610:	d000      	beq.n	8003614 <USBD_StdDevReq+0x1f0>
 8003612:	e714      	b.n	800343e <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 8003614:	23a7      	movs	r3, #167	@ 0xa7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	5ce3      	ldrb	r3, [r4, r3]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d807      	bhi.n	800362e <USBD_StdDevReq+0x20a>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d100      	bne.n	8003624 <USBD_StdDevReq+0x200>
 8003622:	e70c      	b.n	800343e <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 8003624:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003626:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8003628:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800362a:	3108      	adds	r1, #8
 800362c:	e003      	b.n	8003636 <USBD_StdDevReq+0x212>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800362e:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8003630:	2b03      	cmp	r3, #3
 8003632:	d000      	beq.n	8003636 <USBD_StdDevReq+0x212>
 8003634:	e703      	b.n	800343e <USBD_StdDevReq+0x1a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003636:	0020      	movs	r0, r4
 8003638:	f000 f92b 	bl	8003892 <USBD_CtlSendData>
      break;
 800363c:	e709      	b.n	8003452 <USBD_StdDevReq+0x2e>
  switch (pdev->dev_state)
 800363e:	23a7      	movs	r3, #167	@ 0xa7
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	5ce3      	ldrb	r3, [r4, r3]
 8003644:	3b01      	subs	r3, #1
 8003646:	2b02      	cmp	r3, #2
 8003648:	d900      	bls.n	800364c <USBD_StdDevReq+0x228>
 800364a:	e6f8      	b.n	800343e <USBD_StdDevReq+0x1a>
      if (req->wLength != 0x2U)
 800364c:	88eb      	ldrh	r3, [r5, #6]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d000      	beq.n	8003654 <USBD_StdDevReq+0x230>
 8003652:	e6f4      	b.n	800343e <USBD_StdDevReq+0x1a>
      if (pdev->dev_remote_wakeup)
 8003654:	23a9      	movs	r3, #169	@ 0xa9
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800365a:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup)
 800365c:	2a00      	cmp	r2, #0
 800365e:	d000      	beq.n	8003662 <USBD_StdDevReq+0x23e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003660:	3302      	adds	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003662:	0021      	movs	r1, r4
 8003664:	2202      	movs	r2, #2
 8003666:	60e3      	str	r3, [r4, #12]
 8003668:	310c      	adds	r1, #12
 800366a:	e7e4      	b.n	8003636 <USBD_StdDevReq+0x212>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800366c:	886b      	ldrh	r3, [r5, #2]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d000      	beq.n	8003674 <USBD_StdDevReq+0x250>
 8003672:	e6ee      	b.n	8003452 <USBD_StdDevReq+0x2e>
    pdev->dev_remote_wakeup = 1U;
 8003674:	22a9      	movs	r2, #169	@ 0xa9
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 800367a:	e718      	b.n	80034ae <USBD_StdDevReq+0x8a>
  switch (pdev->dev_state)
 800367c:	23a7      	movs	r3, #167	@ 0xa7
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	5ce3      	ldrb	r3, [r4, r3]
 8003682:	3b01      	subs	r3, #1
 8003684:	2b02      	cmp	r3, #2
 8003686:	d900      	bls.n	800368a <USBD_StdDevReq+0x266>
 8003688:	e6d9      	b.n	800343e <USBD_StdDevReq+0x1a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800368a:	886b      	ldrh	r3, [r5, #2]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d000      	beq.n	8003692 <USBD_StdDevReq+0x26e>
 8003690:	e6df      	b.n	8003452 <USBD_StdDevReq+0x2e>
        pdev->dev_remote_wakeup = 0U;
 8003692:	23a9      	movs	r3, #169	@ 0xa9
 8003694:	2200      	movs	r2, #0
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	50e2      	str	r2, [r4, r3]
 800369a:	e708      	b.n	80034ae <USBD_StdDevReq+0x8a>
 800369c:	0000029e 	.word	0x0000029e
 80036a0:	200002e8 	.word	0x200002e8

080036a4 <USBD_StdItfReq>:
{
 80036a4:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036a6:	780a      	ldrb	r2, [r1, #0]
{
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4013      	ands	r3, r2
 80036ac:	0004      	movs	r4, r0
 80036ae:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036b0:	0652      	lsls	r2, r2, #25
 80036b2:	d501      	bpl.n	80036b8 <USBD_StdItfReq+0x14>
 80036b4:	2b40      	cmp	r3, #64	@ 0x40
 80036b6:	d119      	bne.n	80036ec <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 80036b8:	23a7      	movs	r3, #167	@ 0xa7
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	5ce3      	ldrb	r3, [r4, r3]
 80036be:	3b01      	subs	r3, #1
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d813      	bhi.n	80036ec <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80036c4:	792b      	ldrb	r3, [r5, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d810      	bhi.n	80036ec <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80036ca:	23ad      	movs	r3, #173	@ 0xad
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	58e3      	ldr	r3, [r4, r3]
 80036d0:	0029      	movs	r1, r5
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	0020      	movs	r0, r4
 80036d6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80036d8:	88eb      	ldrh	r3, [r5, #6]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <USBD_StdItfReq+0x44>
 80036de:	2800      	cmp	r0, #0
 80036e0:	d102      	bne.n	80036e8 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 80036e2:	0020      	movs	r0, r4
 80036e4:	f000 f8f3 	bl	80038ce <USBD_CtlSendStatus>
}
 80036e8:	2000      	movs	r0, #0
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 80036ec:	0020      	movs	r0, r4
 80036ee:	f7ff fe8e 	bl	800340e <USBD_CtlError.constprop.0>
          break;
 80036f2:	e7f9      	b.n	80036e8 <USBD_StdItfReq+0x44>

080036f4 <USBD_StdEPReq>:
{
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	0004      	movs	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 80036f8:	2060      	movs	r0, #96	@ 0x60
{
 80036fa:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 80036fc:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036fe:	7809      	ldrb	r1, [r1, #0]
 8003700:	4001      	ands	r1, r0
 8003702:	000d      	movs	r5, r1
 8003704:	1800      	adds	r0, r0, r0
 8003706:	3d20      	subs	r5, #32
 8003708:	4205      	tst	r5, r0
 800370a:	d005      	beq.n	8003718 <USBD_StdEPReq+0x24>
 800370c:	2900      	cmp	r1, #0
 800370e:	d00c      	beq.n	800372a <USBD_StdEPReq+0x36>
              USBD_CtlError(pdev, req);
 8003710:	0020      	movs	r0, r4
 8003712:	f7ff fe7c 	bl	800340e <USBD_CtlError.constprop.0>
              break;
 8003716:	e006      	b.n	8003726 <USBD_StdEPReq+0x32>
      pdev->pClass->Setup(pdev, req);
 8003718:	22ad      	movs	r2, #173	@ 0xad
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	58a2      	ldr	r2, [r4, r2]
 800371e:	0019      	movs	r1, r3
 8003720:	0020      	movs	r0, r4
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	4790      	blx	r2
}
 8003726:	2000      	movs	r0, #0
 8003728:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800372a:	7858      	ldrb	r0, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800372c:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800372e:	2801      	cmp	r0, #1
 8003730:	d038      	beq.n	80037a4 <USBD_StdEPReq+0xb0>
 8003732:	2803      	cmp	r0, #3
 8003734:	d020      	beq.n	8003778 <USBD_StdEPReq+0x84>
 8003736:	2800      	cmp	r0, #0
 8003738:	d1ea      	bne.n	8003710 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800373a:	23a7      	movs	r3, #167	@ 0xa7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	5ce3      	ldrb	r3, [r4, r3]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d049      	beq.n	80037d8 <USBD_StdEPReq+0xe4>
 8003744:	2b03      	cmp	r3, #3
 8003746:	d1e3      	bne.n	8003710 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003748:	230f      	movs	r3, #15
 800374a:	2514      	movs	r5, #20
 800374c:	400b      	ands	r3, r1
 800374e:	436b      	muls	r3, r5
 8003750:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8003752:	0612      	lsls	r2, r2, #24
 8003754:	d550      	bpl.n	80037f8 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0d9      	beq.n	8003710 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800375c:	237f      	movs	r3, #127	@ 0x7f
 800375e:	400b      	ands	r3, r1
 8003760:	3301      	adds	r3, #1
 8003762:	435d      	muls	r5, r3
 8003764:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003766:	2980      	cmp	r1, #128	@ 0x80
 8003768:	d051      	beq.n	800380e <USBD_StdEPReq+0x11a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800376a:	0020      	movs	r0, r4
 800376c:	f000 fa48 	bl	8003c00 <USBD_LL_IsStallEP>
 8003770:	2800      	cmp	r0, #0
 8003772:	d051      	beq.n	8003818 <USBD_StdEPReq+0x124>
                pep->status = 0x0001U;
 8003774:	2301      	movs	r3, #1
 8003776:	e04b      	b.n	8003810 <USBD_StdEPReq+0x11c>
          switch (pdev->dev_state)
 8003778:	22a7      	movs	r2, #167	@ 0xa7
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	5ca2      	ldrb	r2, [r4, r2]
 800377e:	2a02      	cmp	r2, #2
 8003780:	d020      	beq.n	80037c4 <USBD_StdEPReq+0xd0>
 8003782:	2a03      	cmp	r2, #3
 8003784:	d1c4      	bne.n	8003710 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003786:	885a      	ldrh	r2, [r3, #2]
 8003788:	2a00      	cmp	r2, #0
 800378a:	d107      	bne.n	800379c <USBD_StdEPReq+0xa8>
                if ((ep_addr != 0x00U) &&
 800378c:	064a      	lsls	r2, r1, #25
 800378e:	d005      	beq.n	800379c <USBD_StdEPReq+0xa8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003790:	88db      	ldrh	r3, [r3, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <USBD_StdEPReq+0xa8>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003796:	0020      	movs	r0, r4
 8003798:	f000 fa20 	bl	8003bdc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800379c:	0020      	movs	r0, r4
 800379e:	f000 f896 	bl	80038ce <USBD_CtlSendStatus>
              break;
 80037a2:	e7c0      	b.n	8003726 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80037a4:	22a7      	movs	r2, #167	@ 0xa7
 80037a6:	0092      	lsls	r2, r2, #2
 80037a8:	5ca2      	ldrb	r2, [r4, r2]
 80037aa:	2a02      	cmp	r2, #2
 80037ac:	d00a      	beq.n	80037c4 <USBD_StdEPReq+0xd0>
 80037ae:	2a03      	cmp	r2, #3
 80037b0:	d1ae      	bne.n	8003710 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80037b2:	885b      	ldrh	r3, [r3, #2]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1b6      	bne.n	8003726 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 80037b8:	064b      	lsls	r3, r1, #25
 80037ba:	d0ef      	beq.n	800379c <USBD_StdEPReq+0xa8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80037bc:	0020      	movs	r0, r4
 80037be:	f000 fa16 	bl	8003bee <USBD_LL_ClearStallEP>
 80037c2:	e7eb      	b.n	800379c <USBD_StdEPReq+0xa8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80037c4:	064b      	lsls	r3, r1, #25
 80037c6:	d0a3      	beq.n	8003710 <USBD_StdEPReq+0x1c>
                USBD_LL_StallEP(pdev, ep_addr);
 80037c8:	0020      	movs	r0, r4
 80037ca:	f000 fa07 	bl	8003bdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	0020      	movs	r0, r4
 80037d2:	f000 fa03 	bl	8003bdc <USBD_LL_StallEP>
 80037d6:	e7a6      	b.n	8003726 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80037d8:	0649      	lsls	r1, r1, #25
 80037da:	d199      	bne.n	8003710 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80037dc:	0021      	movs	r1, r4
 80037de:	3155      	adds	r1, #85	@ 0x55
 80037e0:	31ff      	adds	r1, #255	@ 0xff
 80037e2:	0612      	lsls	r2, r2, #24
 80037e4:	d501      	bpl.n	80037ea <USBD_StdEPReq+0xf6>
 80037e6:	3941      	subs	r1, #65	@ 0x41
 80037e8:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 80037ea:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80037ec:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 80037ee:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80037f0:	0020      	movs	r0, r4
 80037f2:	f000 f84e 	bl	8003892 <USBD_CtlSendData>
              break;
 80037f6:	e796      	b.n	8003726 <USBD_StdEPReq+0x32>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80037f8:	33fc      	adds	r3, #252	@ 0xfc
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d100      	bne.n	8003802 <USBD_StdEPReq+0x10e>
 8003800:	e786      	b.n	8003710 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003802:	434d      	muls	r5, r1
 8003804:	3555      	adds	r5, #85	@ 0x55
 8003806:	35ff      	adds	r5, #255	@ 0xff
 8003808:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800380a:	2900      	cmp	r1, #0
 800380c:	d1ad      	bne.n	800376a <USBD_StdEPReq+0x76>
                pep->status = 0x0000U;
 800380e:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8003810:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003812:	2202      	movs	r2, #2
 8003814:	0029      	movs	r1, r5
 8003816:	e7eb      	b.n	80037f0 <USBD_StdEPReq+0xfc>
                pep->status = 0x0000U;
 8003818:	6028      	str	r0, [r5, #0]
 800381a:	e7fa      	b.n	8003812 <USBD_StdEPReq+0x11e>

0800381c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800381c:	780b      	ldrb	r3, [r1, #0]
 800381e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003820:	784b      	ldrb	r3, [r1, #1]
 8003822:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003824:	78cb      	ldrb	r3, [r1, #3]
 8003826:	788a      	ldrb	r2, [r1, #2]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	4313      	orrs	r3, r2
 800382c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800382e:	794b      	ldrb	r3, [r1, #5]
 8003830:	790a      	ldrb	r2, [r1, #4]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4313      	orrs	r3, r2
 8003836:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003838:	79cb      	ldrb	r3, [r1, #7]
 800383a:	798a      	ldrb	r2, [r1, #6]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	4313      	orrs	r3, r2
 8003840:	80c3      	strh	r3, [r0, #6]
}
 8003842:	4770      	bx	lr

08003844 <USBD_CtlError>:
{
 8003844:	b510      	push	{r4, lr}
 8003846:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003848:	2180      	movs	r1, #128	@ 0x80
 800384a:	f000 f9c7 	bl	8003bdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800384e:	2100      	movs	r1, #0
 8003850:	0020      	movs	r0, r4
 8003852:	f000 f9c3 	bl	8003bdc <USBD_LL_StallEP>
}
 8003856:	bd10      	pop	{r4, pc}

08003858 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	0004      	movs	r4, r0
 800385c:	000d      	movs	r5, r1
 800385e:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8003860:	2800      	cmp	r0, #0
 8003862:	d00d      	beq.n	8003880 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003864:	f7fc fc50 	bl	8000108 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003868:	b2c3      	uxtb	r3, r0
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003870:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003872:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8003874:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003876:	706b      	strb	r3, [r5, #1]
 8003878:	3b01      	subs	r3, #1
    while (*desc != '\0')
 800387a:	7821      	ldrb	r1, [r4, #0]
 800387c:	2900      	cmp	r1, #0
 800387e:	d100      	bne.n	8003882 <USBD_GetString+0x2a>
}
 8003880:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	54e9      	strb	r1, [r5, r3]
 8003886:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003888:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 800388a:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 800388c:	b2db      	uxtb	r3, r3
 800388e:	54a8      	strb	r0, [r5, r2]
 8003890:	e7f3      	b.n	800387a <USBD_GetString+0x22>

08003892 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003892:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003894:	22a5      	movs	r2, #165	@ 0xa5
{
 8003896:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003898:	2402      	movs	r4, #2
 800389a:	0092      	lsls	r2, r2, #2
 800389c:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800389e:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 80038a0:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80038a2:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 80038a4:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80038a6:	f000 f9c7 	bl	8003c38 <USBD_LL_Transmit>

  return USBD_OK;
}
 80038aa:	2000      	movs	r0, #0
 80038ac:	bd10      	pop	{r4, pc}

080038ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80038ae:	b510      	push	{r4, lr}
 80038b0:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80038b2:	000a      	movs	r2, r1
 80038b4:	2100      	movs	r1, #0
 80038b6:	f000 f9bf 	bl	8003c38 <USBD_LL_Transmit>

  return USBD_OK;
}
 80038ba:	2000      	movs	r0, #0
 80038bc:	bd10      	pop	{r4, pc}

080038be <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80038be:	b510      	push	{r4, lr}
 80038c0:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80038c2:	000a      	movs	r2, r1
 80038c4:	2100      	movs	r1, #0
 80038c6:	f000 f9c0 	bl	8003c4a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80038ca:	2000      	movs	r0, #0
 80038cc:	bd10      	pop	{r4, pc}

080038ce <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80038ce:	23a5      	movs	r3, #165	@ 0xa5
 80038d0:	2204      	movs	r2, #4
 80038d2:	009b      	lsls	r3, r3, #2
{
 80038d4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80038d6:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80038d8:	2300      	movs	r3, #0
 80038da:	001a      	movs	r2, r3
 80038dc:	0019      	movs	r1, r3
 80038de:	f000 f9ab 	bl	8003c38 <USBD_LL_Transmit>

  return USBD_OK;
}
 80038e2:	2000      	movs	r0, #0
 80038e4:	bd10      	pop	{r4, pc}

080038e6 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80038e6:	23a5      	movs	r3, #165	@ 0xa5
 80038e8:	2205      	movs	r2, #5
 80038ea:	009b      	lsls	r3, r3, #2
{
 80038ec:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80038ee:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80038f0:	2300      	movs	r3, #0
 80038f2:	001a      	movs	r2, r3
 80038f4:	0019      	movs	r1, r3
 80038f6:	f000 f9a8 	bl	8003c4a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80038fa:	2000      	movs	r0, #0
 80038fc:	bd10      	pop	{r4, pc}
	...

08003900 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003900:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003902:	4c0d      	ldr	r4, [pc, #52]	@ (8003938 <MX_USB_DEVICE_Init+0x38>)
 8003904:	2200      	movs	r2, #0
 8003906:	0020      	movs	r0, r4
 8003908:	490c      	ldr	r1, [pc, #48]	@ (800393c <MX_USB_DEVICE_Init+0x3c>)
 800390a:	f7ff fc15 	bl	8003138 <USBD_Init>
 800390e:	2800      	cmp	r0, #0
 8003910:	d001      	beq.n	8003916 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8003912:	f7fc fee9 	bl	80006e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8003916:	0020      	movs	r0, r4
 8003918:	4909      	ldr	r1, [pc, #36]	@ (8003940 <MX_USB_DEVICE_Init+0x40>)
 800391a:	f7ff fc27 	bl	800316c <USBD_RegisterClass>
 800391e:	2800      	cmp	r0, #0
 8003920:	d001      	beq.n	8003926 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8003922:	f7fc fee1 	bl	80006e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003926:	0020      	movs	r0, r4
 8003928:	f7ff fc29 	bl	800317e <USBD_Start>
 800392c:	2800      	cmp	r0, #0
 800392e:	d001      	beq.n	8003934 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 8003930:	f7fc feda 	bl	80006e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003934:	bd10      	pop	{r4, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	200002ec 	.word	0x200002ec
 800393c:	20000160 	.word	0x20000160
 8003940:	20000090 	.word	0x20000090

08003944 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003944:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8003946:	4801      	ldr	r0, [pc, #4]	@ (800394c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003948:	800b      	strh	r3, [r1, #0]
}
 800394a:	4770      	bx	lr
 800394c:	2000014c 	.word	0x2000014c

08003950 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003950:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8003952:	4801      	ldr	r0, [pc, #4]	@ (8003958 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003954:	800b      	strh	r3, [r1, #0]
}
 8003956:	4770      	bx	lr
 8003958:	20000148 	.word	0x20000148

0800395c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800395c:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800395e:	2600      	movs	r6, #0
 8003960:	0052      	lsls	r2, r2, #1
 8003962:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 8003964:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8003966:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003968:	0023      	movs	r3, r4
 800396a:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 800396c:	2d09      	cmp	r5, #9
 800396e:	d800      	bhi.n	8003972 <IntToUnicode+0x16>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003970:	3b07      	subs	r3, #7
 8003972:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8003974:	704e      	strb	r6, [r1, #1]
  for (idx = 0; idx < len; idx++)
 8003976:	3102      	adds	r1, #2
    value = value << 4;
 8003978:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 800397a:	428a      	cmp	r2, r1
 800397c:	d1f2      	bne.n	8003964 <IntToUnicode+0x8>
  }
}
 800397e:	bd70      	pop	{r4, r5, r6, pc}

08003980 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003980:	231a      	movs	r3, #26
{
 8003982:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003984:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <USBD_FS_SerialStrDescriptor+0x30>)
 8003988:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800398a:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8003990:	2800      	cmp	r0, #0
 8003992:	d00a      	beq.n	80039aa <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003994:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <USBD_FS_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003996:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003998:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800399a:	4908      	ldr	r1, [pc, #32]	@ (80039bc <USBD_FS_SerialStrDescriptor+0x3c>)
 800399c:	f7ff ffde 	bl	800395c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80039a0:	2204      	movs	r2, #4
 80039a2:	0020      	movs	r0, r4
 80039a4:	4906      	ldr	r1, [pc, #24]	@ (80039c0 <USBD_FS_SerialStrDescriptor+0x40>)
 80039a6:	f7ff ffd9 	bl	800395c <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 80039aa:	4806      	ldr	r0, [pc, #24]	@ (80039c4 <USBD_FS_SerialStrDescriptor+0x44>)
}
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	1ffff7ac 	.word	0x1ffff7ac
 80039b4:	1ffff7b4 	.word	0x1ffff7b4
 80039b8:	1ffff7b0 	.word	0x1ffff7b0
 80039bc:	2000012e 	.word	0x2000012e
 80039c0:	2000013e 	.word	0x2000013e
 80039c4:	2000012c 	.word	0x2000012c

080039c8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80039c8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039ca:	4c04      	ldr	r4, [pc, #16]	@ (80039dc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80039cc:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039ce:	0021      	movs	r1, r4
 80039d0:	4803      	ldr	r0, [pc, #12]	@ (80039e0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80039d2:	f7ff ff41 	bl	8003858 <USBD_GetString>
}
 80039d6:	0020      	movs	r0, r4
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	200005b0 	.word	0x200005b0
 80039e0:	08004c8f 	.word	0x08004c8f

080039e4 <USBD_FS_ProductStrDescriptor>:
{
 80039e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80039e6:	4c04      	ldr	r4, [pc, #16]	@ (80039f8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80039e8:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80039ea:	0021      	movs	r1, r4
 80039ec:	4803      	ldr	r0, [pc, #12]	@ (80039fc <USBD_FS_ProductStrDescriptor+0x18>)
 80039ee:	f7ff ff33 	bl	8003858 <USBD_GetString>
}
 80039f2:	0020      	movs	r0, r4
 80039f4:	bd10      	pop	{r4, pc}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	200005b0 	.word	0x200005b0
 80039fc:	08004c94 	.word	0x08004c94

08003a00 <USBD_FS_ConfigStrDescriptor>:
{
 8003a00:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003a02:	4c04      	ldr	r4, [pc, #16]	@ (8003a14 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003a04:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003a06:	0021      	movs	r1, r4
 8003a08:	4803      	ldr	r0, [pc, #12]	@ (8003a18 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003a0a:	f7ff ff25 	bl	8003858 <USBD_GetString>
}
 8003a0e:	0020      	movs	r0, r4
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	200005b0 	.word	0x200005b0
 8003a18:	08004ca8 	.word	0x08004ca8

08003a1c <USBD_FS_InterfaceStrDescriptor>:
{
 8003a1c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a1e:	4c04      	ldr	r4, [pc, #16]	@ (8003a30 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003a20:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a22:	0021      	movs	r1, r4
 8003a24:	4803      	ldr	r0, [pc, #12]	@ (8003a34 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003a26:	f7ff ff17 	bl	8003858 <USBD_GetString>
}
 8003a2a:	0020      	movs	r0, r4
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	200005b0 	.word	0x200005b0
 8003a34:	08004cb3 	.word	0x08004cb3

08003a38 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d003      	beq.n	8003a44 <USBD_Get_USB_Status+0xc>
 8003a3c:	3802      	subs	r0, #2
 8003a3e:	1e43      	subs	r3, r0, #1
 8003a40:	4198      	sbcs	r0, r3
 8003a42:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_PCD_MspInit>:
{
 8003a48:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_PCD_MspInit+0x30>)
 8003a4c:	6802      	ldr	r2, [r0, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d111      	bne.n	8003a76 <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 8003a52:	2180      	movs	r1, #128	@ 0x80
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_PCD_MspInit+0x34>)
 8003a56:	0409      	lsls	r1, r1, #16
 8003a58:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003a5a:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003a60:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	400b      	ands	r3, r1
 8003a66:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003a68:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003a6a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003a6c:	f7fc ff6e 	bl	800094c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003a70:	201f      	movs	r0, #31
 8003a72:	f7fc ff95 	bl	80009a0 <HAL_NVIC_EnableIRQ>
}
 8003a76:	bd07      	pop	{r0, r1, r2, pc}
 8003a78:	40005c00 	.word	0x40005c00
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003a80:	23a6      	movs	r3, #166	@ 0xa6
{
 8003a82:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	18c1      	adds	r1, r0, r3
 8003a88:	3340      	adds	r3, #64	@ 0x40
 8003a8a:	58c0      	ldr	r0, [r0, r3]
 8003a8c:	f7ff fb92 	bl	80031b4 <USBD_LL_SetupStage>
}
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003a92:	2328      	movs	r3, #40	@ 0x28
 8003a94:	434b      	muls	r3, r1
 8003a96:	18c3      	adds	r3, r0, r3
 8003a98:	33fc      	adds	r3, #252	@ 0xfc
 8003a9a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a9c:	23b6      	movs	r3, #182	@ 0xb6
{
 8003a9e:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	58c0      	ldr	r0, [r0, r3]
 8003aa4:	f7ff fbb8 	bl	8003218 <USBD_LL_DataOutStage>
}
 8003aa8:	bd10      	pop	{r4, pc}

08003aaa <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003aaa:	2328      	movs	r3, #40	@ 0x28
 8003aac:	434b      	muls	r3, r1
 8003aae:	18c3      	adds	r3, r0, r3
 8003ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ab2:	23b6      	movs	r3, #182	@ 0xb6
{
 8003ab4:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	58c0      	ldr	r0, [r0, r3]
 8003aba:	f7ff fbf0 	bl	800329e <USBD_LL_DataInStage>
}
 8003abe:	bd10      	pop	{r4, pc}

08003ac0 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003ac0:	23b6      	movs	r3, #182	@ 0xb6
{
 8003ac2:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	58c0      	ldr	r0, [r0, r3]
 8003ac8:	f7ff fc92 	bl	80033f0 <USBD_LL_SOF>
}
 8003acc:	bd10      	pop	{r4, pc}

08003ace <HAL_PCD_ResetCallback>:
{
 8003ace:	b570      	push	{r4, r5, r6, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003ad0:	7943      	ldrb	r3, [r0, #5]
{
 8003ad2:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d001      	beq.n	8003adc <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003ad8:	f7fc fe06 	bl	80006e8 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003adc:	25b6      	movs	r5, #182	@ 0xb6
 8003ade:	00ad      	lsls	r5, r5, #2
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	5960      	ldr	r0, [r4, r5]
 8003ae4:	f7ff fc69 	bl	80033ba <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003ae8:	5960      	ldr	r0, [r4, r5]
 8003aea:	f7ff fc3c 	bl	8003366 <USBD_LL_Reset>
}
 8003aee:	bd70      	pop	{r4, r5, r6, pc}

08003af0 <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003af0:	23b6      	movs	r3, #182	@ 0xb6
{
 8003af2:	b510      	push	{r4, lr}
 8003af4:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	58c0      	ldr	r0, [r0, r3]
 8003afa:	f7ff fc61 	bl	80033c0 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8003afe:	7a63      	ldrb	r3, [r4, #9]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003b04:	2306      	movs	r3, #6
 8003b06:	4a02      	ldr	r2, [pc, #8]	@ (8003b10 <HAL_PCD_SuspendCallback+0x20>)
 8003b08:	6911      	ldr	r1, [r2, #16]
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6113      	str	r3, [r2, #16]
}
 8003b0e:	bd10      	pop	{r4, pc}
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <HAL_PCD_ResumeCallback>:
{
 8003b14:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 8003b16:	7a43      	ldrb	r3, [r0, #9]
{
 8003b18:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003b1e:	2106      	movs	r1, #6
 8003b20:	4a05      	ldr	r2, [pc, #20]	@ (8003b38 <HAL_PCD_ResumeCallback+0x24>)
 8003b22:	6913      	ldr	r3, [r2, #16]
 8003b24:	438b      	bics	r3, r1
 8003b26:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 8003b28:	f7fc fd1e 	bl	8000568 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003b2c:	23b6      	movs	r3, #182	@ 0xb6
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	58e0      	ldr	r0, [r4, r3]
 8003b32:	f7ff fc51 	bl	80033d8 <USBD_LL_Resume>
}
 8003b36:	bd10      	pop	{r4, pc}
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8003b3c:	23b6      	movs	r3, #182	@ 0xb6
{
 8003b3e:	b570      	push	{r4, r5, r6, lr}
 8003b40:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003b42:	4815      	ldr	r0, [pc, #84]	@ (8003b98 <USBD_LL_Init+0x5c>)
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8003b48:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_FS;
 8003b4a:	25b0      	movs	r5, #176	@ 0xb0
  hpcd_USB_FS.Instance = USB;
 8003b4c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003b4e:	2382      	movs	r3, #130	@ 0x82
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b54:	2302      	movs	r3, #2
 8003b56:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003b58:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8003b5a:	00ad      	lsls	r5, r5, #2
 8003b5c:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003b5e:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003b60:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003b62:	f7fd f91d 	bl	8000da0 <HAL_PCD_Init>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d001      	beq.n	8003b6e <USBD_LL_Init+0x32>
    Error_Handler( );
 8003b6a:	f7fc fdbd 	bl	80006e8 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	5960      	ldr	r0, [r4, r5]
 8003b72:	0011      	movs	r1, r2
 8003b74:	2318      	movs	r3, #24
 8003b76:	f7fd ff4a 	bl	8001a0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003b7a:	5960      	ldr	r0, [r4, r5]
 8003b7c:	2358      	movs	r3, #88	@ 0x58
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2180      	movs	r1, #128	@ 0x80
 8003b82:	f7fd ff44 	bl	8001a0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	5960      	ldr	r0, [r4, r5]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2181      	movs	r1, #129	@ 0x81
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	f7fd ff3d 	bl	8001a0e <HAL_PCDEx_PMAConfig>
}
 8003b94:	2000      	movs	r0, #0
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	200007c4 	.word	0x200007c4
 8003b9c:	40005c00 	.word	0x40005c00

08003ba0 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8003ba0:	23b0      	movs	r3, #176	@ 0xb0
{
 8003ba2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	58c0      	ldr	r0, [r0, r3]
 8003ba8:	f7fd f946 	bl	8000e38 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bac:	f7ff ff44 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003bb0:	bd10      	pop	{r4, pc}

08003bb2 <USBD_LL_OpenEP>:
{
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	0014      	movs	r4, r2
 8003bb6:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003bb8:	0023      	movs	r3, r4
 8003bba:	24b0      	movs	r4, #176	@ 0xb0
 8003bbc:	00a4      	lsls	r4, r4, #2
 8003bbe:	5900      	ldr	r0, [r0, r4]
 8003bc0:	f7fd fe44 	bl	800184c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bc4:	f7ff ff38 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003bc8:	bd10      	pop	{r4, pc}

08003bca <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003bca:	23b0      	movs	r3, #176	@ 0xb0
{
 8003bcc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	58c0      	ldr	r0, [r0, r3]
 8003bd2:	f7fd fe67 	bl	80018a4 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bd6:	f7ff ff2f 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003bda:	bd10      	pop	{r4, pc}

08003bdc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003bdc:	23b0      	movs	r3, #176	@ 0xb0
{
 8003bde:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	58c0      	ldr	r0, [r0, r3]
 8003be4:	f7fd feb7 	bl	8001956 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003be8:	f7ff ff26 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003bec:	bd10      	pop	{r4, pc}

08003bee <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003bee:	23b0      	movs	r3, #176	@ 0xb0
{
 8003bf0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	58c0      	ldr	r0, [r0, r3]
 8003bf6:	f7fd fedc 	bl	80019b2 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bfa:	f7ff ff1d 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003bfe:	bd10      	pop	{r4, pc}

08003c00 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003c00:	23b0      	movs	r3, #176	@ 0xb0
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8003c06:	b248      	sxtb	r0, r1
 8003c08:	2228      	movs	r2, #40	@ 0x28
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	da05      	bge.n	8003c1a <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003c0e:	207f      	movs	r0, #127	@ 0x7f
 8003c10:	4001      	ands	r1, r0
 8003c12:	434a      	muls	r2, r1
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	7c98      	ldrb	r0, [r3, #18]
}
 8003c18:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003c1a:	434a      	muls	r2, r1
 8003c1c:	189b      	adds	r3, r3, r2
 8003c1e:	3353      	adds	r3, #83	@ 0x53
 8003c20:	33ff      	adds	r3, #255	@ 0xff
 8003c22:	7818      	ldrb	r0, [r3, #0]
 8003c24:	e7f8      	b.n	8003c18 <USBD_LL_IsStallEP+0x18>

08003c26 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c26:	23b0      	movs	r3, #176	@ 0xb0
{
 8003c28:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	58c0      	ldr	r0, [r0, r3]
 8003c2e:	f7fd f916 	bl	8000e5e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c32:	f7ff ff01 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003c36:	bd10      	pop	{r4, pc}

08003c38 <USBD_LL_Transmit>:
{
 8003c38:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003c3a:	24b0      	movs	r4, #176	@ 0xb0
 8003c3c:	00a4      	lsls	r4, r4, #2
 8003c3e:	5900      	ldr	r0, [r0, r4]
 8003c40:	f7fd fe71 	bl	8001926 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c44:	f7ff fef8 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003c48:	bd10      	pop	{r4, pc}

08003c4a <USBD_LL_PrepareReceive>:
{
 8003c4a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003c4c:	24b0      	movs	r4, #176	@ 0xb0
 8003c4e:	00a4      	lsls	r4, r4, #2
 8003c50:	5900      	ldr	r0, [r0, r4]
 8003c52:	f7fd fe4d 	bl	80018f0 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c56:	f7ff feef 	bl	8003a38 <USBD_Get_USB_Status>
}
 8003c5a:	bd10      	pop	{r4, pc}

08003c5c <USBD_static_malloc>:
  return mem;
 8003c5c:	4800      	ldr	r0, [pc, #0]	@ (8003c60 <USBD_static_malloc+0x4>)
}
 8003c5e:	4770      	bx	lr
 8003c60:	200007b0 	.word	0x200007b0

08003c64 <USBD_static_free>:
}
 8003c64:	4770      	bx	lr
	...

08003c68 <std>:
 8003c68:	2300      	movs	r3, #0
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	0004      	movs	r4, r0
 8003c6e:	6003      	str	r3, [r0, #0]
 8003c70:	6043      	str	r3, [r0, #4]
 8003c72:	6083      	str	r3, [r0, #8]
 8003c74:	8181      	strh	r1, [r0, #12]
 8003c76:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c78:	81c2      	strh	r2, [r0, #14]
 8003c7a:	6103      	str	r3, [r0, #16]
 8003c7c:	6143      	str	r3, [r0, #20]
 8003c7e:	6183      	str	r3, [r0, #24]
 8003c80:	0019      	movs	r1, r3
 8003c82:	2208      	movs	r2, #8
 8003c84:	305c      	adds	r0, #92	@ 0x5c
 8003c86:	f000 fa0f 	bl	80040a8 <memset>
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <std+0x50>)
 8003c8c:	6224      	str	r4, [r4, #32]
 8003c8e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <std+0x54>)
 8003c92:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c94:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <std+0x58>)
 8003c96:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c98:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <std+0x5c>)
 8003c9a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <std+0x60>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d005      	beq.n	8003cae <std+0x46>
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <std+0x64>)
 8003ca4:	429c      	cmp	r4, r3
 8003ca6:	d002      	beq.n	8003cae <std+0x46>
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <std+0x68>)
 8003caa:	429c      	cmp	r4, r3
 8003cac:	d103      	bne.n	8003cb6 <std+0x4e>
 8003cae:	0020      	movs	r0, r4
 8003cb0:	3058      	adds	r0, #88	@ 0x58
 8003cb2:	f000 fa79 	bl	80041a8 <__retarget_lock_init_recursive>
 8003cb6:	bd10      	pop	{r4, pc}
 8003cb8:	08003ed1 	.word	0x08003ed1
 8003cbc:	08003ef9 	.word	0x08003ef9
 8003cc0:	08003f31 	.word	0x08003f31
 8003cc4:	08003f5d 	.word	0x08003f5d
 8003cc8:	20000aa0 	.word	0x20000aa0
 8003ccc:	20000b08 	.word	0x20000b08
 8003cd0:	20000b70 	.word	0x20000b70

08003cd4 <stdio_exit_handler>:
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	4a03      	ldr	r2, [pc, #12]	@ (8003ce4 <stdio_exit_handler+0x10>)
 8003cd8:	4903      	ldr	r1, [pc, #12]	@ (8003ce8 <stdio_exit_handler+0x14>)
 8003cda:	4804      	ldr	r0, [pc, #16]	@ (8003cec <stdio_exit_handler+0x18>)
 8003cdc:	f000 f86c 	bl	8003db8 <_fwalk_sglue>
 8003ce0:	bd10      	pop	{r4, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	2000017c 	.word	0x2000017c
 8003ce8:	08004a35 	.word	0x08004a35
 8003cec:	2000018c 	.word	0x2000018c

08003cf0 <cleanup_stdio>:
 8003cf0:	6841      	ldr	r1, [r0, #4]
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <cleanup_stdio+0x30>)
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	0004      	movs	r4, r0
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	d001      	beq.n	8003d00 <cleanup_stdio+0x10>
 8003cfc:	f000 fe9a 	bl	8004a34 <_fflush_r>
 8003d00:	68a1      	ldr	r1, [r4, #8]
 8003d02:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <cleanup_stdio+0x34>)
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d002      	beq.n	8003d0e <cleanup_stdio+0x1e>
 8003d08:	0020      	movs	r0, r4
 8003d0a:	f000 fe93 	bl	8004a34 <_fflush_r>
 8003d0e:	68e1      	ldr	r1, [r4, #12]
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <cleanup_stdio+0x38>)
 8003d12:	4299      	cmp	r1, r3
 8003d14:	d002      	beq.n	8003d1c <cleanup_stdio+0x2c>
 8003d16:	0020      	movs	r0, r4
 8003d18:	f000 fe8c 	bl	8004a34 <_fflush_r>
 8003d1c:	bd10      	pop	{r4, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	20000aa0 	.word	0x20000aa0
 8003d24:	20000b08 	.word	0x20000b08
 8003d28:	20000b70 	.word	0x20000b70

08003d2c <global_stdio_init.part.0>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <global_stdio_init.part.0+0x28>)
 8003d30:	4a09      	ldr	r2, [pc, #36]	@ (8003d58 <global_stdio_init.part.0+0x2c>)
 8003d32:	2104      	movs	r1, #4
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	4809      	ldr	r0, [pc, #36]	@ (8003d5c <global_stdio_init.part.0+0x30>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f7ff ff95 	bl	8003c68 <std>
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2109      	movs	r1, #9
 8003d42:	4807      	ldr	r0, [pc, #28]	@ (8003d60 <global_stdio_init.part.0+0x34>)
 8003d44:	f7ff ff90 	bl	8003c68 <std>
 8003d48:	2202      	movs	r2, #2
 8003d4a:	2112      	movs	r1, #18
 8003d4c:	4805      	ldr	r0, [pc, #20]	@ (8003d64 <global_stdio_init.part.0+0x38>)
 8003d4e:	f7ff ff8b 	bl	8003c68 <std>
 8003d52:	bd10      	pop	{r4, pc}
 8003d54:	20000bd8 	.word	0x20000bd8
 8003d58:	08003cd5 	.word	0x08003cd5
 8003d5c:	20000aa0 	.word	0x20000aa0
 8003d60:	20000b08 	.word	0x20000b08
 8003d64:	20000b70 	.word	0x20000b70

08003d68 <__sfp_lock_acquire>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4802      	ldr	r0, [pc, #8]	@ (8003d74 <__sfp_lock_acquire+0xc>)
 8003d6c:	f000 fa1d 	bl	80041aa <__retarget_lock_acquire_recursive>
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	20000be1 	.word	0x20000be1

08003d78 <__sfp_lock_release>:
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	4802      	ldr	r0, [pc, #8]	@ (8003d84 <__sfp_lock_release+0xc>)
 8003d7c:	f000 fa16 	bl	80041ac <__retarget_lock_release_recursive>
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	20000be1 	.word	0x20000be1

08003d88 <__sinit>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	0004      	movs	r4, r0
 8003d8c:	f7ff ffec 	bl	8003d68 <__sfp_lock_acquire>
 8003d90:	6a23      	ldr	r3, [r4, #32]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <__sinit+0x14>
 8003d96:	f7ff ffef 	bl	8003d78 <__sfp_lock_release>
 8003d9a:	bd10      	pop	{r4, pc}
 8003d9c:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <__sinit+0x28>)
 8003d9e:	6223      	str	r3, [r4, #32]
 8003da0:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <__sinit+0x2c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f6      	bne.n	8003d96 <__sinit+0xe>
 8003da8:	f7ff ffc0 	bl	8003d2c <global_stdio_init.part.0>
 8003dac:	e7f3      	b.n	8003d96 <__sinit+0xe>
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	08003cf1 	.word	0x08003cf1
 8003db4:	20000bd8 	.word	0x20000bd8

08003db8 <_fwalk_sglue>:
 8003db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dba:	0014      	movs	r4, r2
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	9000      	str	r0, [sp, #0]
 8003dc0:	9101      	str	r1, [sp, #4]
 8003dc2:	68a5      	ldr	r5, [r4, #8]
 8003dc4:	6867      	ldr	r7, [r4, #4]
 8003dc6:	3f01      	subs	r7, #1
 8003dc8:	d504      	bpl.n	8003dd4 <_fwalk_sglue+0x1c>
 8003dca:	6824      	ldr	r4, [r4, #0]
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	d1f8      	bne.n	8003dc2 <_fwalk_sglue+0xa>
 8003dd0:	0030      	movs	r0, r6
 8003dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dd4:	89ab      	ldrh	r3, [r5, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d908      	bls.n	8003dec <_fwalk_sglue+0x34>
 8003dda:	220e      	movs	r2, #14
 8003ddc:	5eab      	ldrsh	r3, [r5, r2]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d004      	beq.n	8003dec <_fwalk_sglue+0x34>
 8003de2:	0029      	movs	r1, r5
 8003de4:	9800      	ldr	r0, [sp, #0]
 8003de6:	9b01      	ldr	r3, [sp, #4]
 8003de8:	4798      	blx	r3
 8003dea:	4306      	orrs	r6, r0
 8003dec:	3568      	adds	r5, #104	@ 0x68
 8003dee:	e7ea      	b.n	8003dc6 <_fwalk_sglue+0xe>

08003df0 <iprintf>:
 8003df0:	b40f      	push	{r0, r1, r2, r3}
 8003df2:	b507      	push	{r0, r1, r2, lr}
 8003df4:	4905      	ldr	r1, [pc, #20]	@ (8003e0c <iprintf+0x1c>)
 8003df6:	ab04      	add	r3, sp, #16
 8003df8:	6808      	ldr	r0, [r1, #0]
 8003dfa:	cb04      	ldmia	r3!, {r2}
 8003dfc:	6881      	ldr	r1, [r0, #8]
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	f000 fafa 	bl	80043f8 <_vfiprintf_r>
 8003e04:	b003      	add	sp, #12
 8003e06:	bc08      	pop	{r3}
 8003e08:	b004      	add	sp, #16
 8003e0a:	4718      	bx	r3
 8003e0c:	20000188 	.word	0x20000188

08003e10 <_puts_r>:
 8003e10:	6a03      	ldr	r3, [r0, #32]
 8003e12:	b570      	push	{r4, r5, r6, lr}
 8003e14:	0005      	movs	r5, r0
 8003e16:	000e      	movs	r6, r1
 8003e18:	6884      	ldr	r4, [r0, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <_puts_r+0x12>
 8003e1e:	f7ff ffb3 	bl	8003d88 <__sinit>
 8003e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e24:	07db      	lsls	r3, r3, #31
 8003e26:	d405      	bmi.n	8003e34 <_puts_r+0x24>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	059b      	lsls	r3, r3, #22
 8003e2c:	d402      	bmi.n	8003e34 <_puts_r+0x24>
 8003e2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e30:	f000 f9bb 	bl	80041aa <__retarget_lock_acquire_recursive>
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	071b      	lsls	r3, r3, #28
 8003e38:	d502      	bpl.n	8003e40 <_puts_r+0x30>
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11f      	bne.n	8003e80 <_puts_r+0x70>
 8003e40:	0021      	movs	r1, r4
 8003e42:	0028      	movs	r0, r5
 8003e44:	f000 f8d2 	bl	8003fec <__swsetup_r>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d019      	beq.n	8003e80 <_puts_r+0x70>
 8003e4c:	2501      	movs	r5, #1
 8003e4e:	426d      	negs	r5, r5
 8003e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e52:	07db      	lsls	r3, r3, #31
 8003e54:	d405      	bmi.n	8003e62 <_puts_r+0x52>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	059b      	lsls	r3, r3, #22
 8003e5a:	d402      	bmi.n	8003e62 <_puts_r+0x52>
 8003e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e5e:	f000 f9a5 	bl	80041ac <__retarget_lock_release_recursive>
 8003e62:	0028      	movs	r0, r5
 8003e64:	bd70      	pop	{r4, r5, r6, pc}
 8003e66:	3601      	adds	r6, #1
 8003e68:	60a3      	str	r3, [r4, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da04      	bge.n	8003e78 <_puts_r+0x68>
 8003e6e:	69a2      	ldr	r2, [r4, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	dc16      	bgt.n	8003ea2 <_puts_r+0x92>
 8003e74:	290a      	cmp	r1, #10
 8003e76:	d014      	beq.n	8003ea2 <_puts_r+0x92>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	6022      	str	r2, [r4, #0]
 8003e7e:	7019      	strb	r1, [r3, #0]
 8003e80:	68a3      	ldr	r3, [r4, #8]
 8003e82:	7831      	ldrb	r1, [r6, #0]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	2900      	cmp	r1, #0
 8003e88:	d1ed      	bne.n	8003e66 <_puts_r+0x56>
 8003e8a:	60a3      	str	r3, [r4, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da0f      	bge.n	8003eb0 <_puts_r+0xa0>
 8003e90:	0022      	movs	r2, r4
 8003e92:	0028      	movs	r0, r5
 8003e94:	310a      	adds	r1, #10
 8003e96:	f000 f867 	bl	8003f68 <__swbuf_r>
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d0d6      	beq.n	8003e4c <_puts_r+0x3c>
 8003e9e:	250a      	movs	r5, #10
 8003ea0:	e7d6      	b.n	8003e50 <_puts_r+0x40>
 8003ea2:	0022      	movs	r2, r4
 8003ea4:	0028      	movs	r0, r5
 8003ea6:	f000 f85f 	bl	8003f68 <__swbuf_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d1e8      	bne.n	8003e80 <_puts_r+0x70>
 8003eae:	e7cd      	b.n	8003e4c <_puts_r+0x3c>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	220a      	movs	r2, #10
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e7f0      	b.n	8003e9e <_puts_r+0x8e>

08003ebc <puts>:
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4b03      	ldr	r3, [pc, #12]	@ (8003ecc <puts+0x10>)
 8003ec0:	0001      	movs	r1, r0
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	f7ff ffa4 	bl	8003e10 <_puts_r>
 8003ec8:	bd10      	pop	{r4, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	20000188 	.word	0x20000188

08003ed0 <__sread>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	000c      	movs	r4, r1
 8003ed4:	250e      	movs	r5, #14
 8003ed6:	5f49      	ldrsh	r1, [r1, r5]
 8003ed8:	f000 f914 	bl	8004104 <_read_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	db03      	blt.n	8003ee8 <__sread+0x18>
 8003ee0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ee2:	181b      	adds	r3, r3, r0
 8003ee4:	6563      	str	r3, [r4, #84]	@ 0x54
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	4a02      	ldr	r2, [pc, #8]	@ (8003ef4 <__sread+0x24>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	e7f9      	b.n	8003ee6 <__sread+0x16>
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	ffffefff 	.word	0xffffefff

08003ef8 <__swrite>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	001f      	movs	r7, r3
 8003efc:	898b      	ldrh	r3, [r1, #12]
 8003efe:	0005      	movs	r5, r0
 8003f00:	000c      	movs	r4, r1
 8003f02:	0016      	movs	r6, r2
 8003f04:	05db      	lsls	r3, r3, #23
 8003f06:	d505      	bpl.n	8003f14 <__swrite+0x1c>
 8003f08:	230e      	movs	r3, #14
 8003f0a:	5ec9      	ldrsh	r1, [r1, r3]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2302      	movs	r3, #2
 8003f10:	f000 f8e4 	bl	80040dc <_lseek_r>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	4a05      	ldr	r2, [pc, #20]	@ (8003f2c <__swrite+0x34>)
 8003f18:	0028      	movs	r0, r5
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	0032      	movs	r2, r6
 8003f20:	230e      	movs	r3, #14
 8003f22:	5ee1      	ldrsh	r1, [r4, r3]
 8003f24:	003b      	movs	r3, r7
 8003f26:	f000 f901 	bl	800412c <_write_r>
 8003f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f2c:	ffffefff 	.word	0xffffefff

08003f30 <__sseek>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	000c      	movs	r4, r1
 8003f34:	250e      	movs	r5, #14
 8003f36:	5f49      	ldrsh	r1, [r1, r5]
 8003f38:	f000 f8d0 	bl	80040dc <_lseek_r>
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	1c42      	adds	r2, r0, #1
 8003f40:	d103      	bne.n	8003f4a <__sseek+0x1a>
 8003f42:	4a05      	ldr	r2, [pc, #20]	@ (8003f58 <__sseek+0x28>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	bd70      	pop	{r4, r5, r6, pc}
 8003f4a:	2280      	movs	r2, #128	@ 0x80
 8003f4c:	0152      	lsls	r2, r2, #5
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f54:	e7f8      	b.n	8003f48 <__sseek+0x18>
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	ffffefff 	.word	0xffffefff

08003f5c <__sclose>:
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	230e      	movs	r3, #14
 8003f60:	5ec9      	ldrsh	r1, [r1, r3]
 8003f62:	f000 f8a9 	bl	80040b8 <_close_r>
 8003f66:	bd10      	pop	{r4, pc}

08003f68 <__swbuf_r>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	0006      	movs	r6, r0
 8003f6c:	000d      	movs	r5, r1
 8003f6e:	0014      	movs	r4, r2
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d004      	beq.n	8003f7e <__swbuf_r+0x16>
 8003f74:	6a03      	ldr	r3, [r0, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <__swbuf_r+0x16>
 8003f7a:	f7ff ff05 	bl	8003d88 <__sinit>
 8003f7e:	69a3      	ldr	r3, [r4, #24]
 8003f80:	60a3      	str	r3, [r4, #8]
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	071b      	lsls	r3, r3, #28
 8003f86:	d502      	bpl.n	8003f8e <__swbuf_r+0x26>
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <__swbuf_r+0x3a>
 8003f8e:	0021      	movs	r1, r4
 8003f90:	0030      	movs	r0, r6
 8003f92:	f000 f82b 	bl	8003fec <__swsetup_r>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d003      	beq.n	8003fa2 <__swbuf_r+0x3a>
 8003f9a:	2501      	movs	r5, #1
 8003f9c:	426d      	negs	r5, r5
 8003f9e:	0028      	movs	r0, r5
 8003fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa2:	6923      	ldr	r3, [r4, #16]
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	b2ef      	uxtb	r7, r5
 8003fa8:	1ac0      	subs	r0, r0, r3
 8003faa:	6963      	ldr	r3, [r4, #20]
 8003fac:	b2ed      	uxtb	r5, r5
 8003fae:	4283      	cmp	r3, r0
 8003fb0:	dc05      	bgt.n	8003fbe <__swbuf_r+0x56>
 8003fb2:	0021      	movs	r1, r4
 8003fb4:	0030      	movs	r0, r6
 8003fb6:	f000 fd3d 	bl	8004a34 <_fflush_r>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d1ed      	bne.n	8003f9a <__swbuf_r+0x32>
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	60a3      	str	r3, [r4, #8]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	6022      	str	r2, [r4, #0]
 8003fcc:	701f      	strb	r7, [r3, #0]
 8003fce:	6963      	ldr	r3, [r4, #20]
 8003fd0:	4283      	cmp	r3, r0
 8003fd2:	d004      	beq.n	8003fde <__swbuf_r+0x76>
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	07db      	lsls	r3, r3, #31
 8003fd8:	d5e1      	bpl.n	8003f9e <__swbuf_r+0x36>
 8003fda:	2d0a      	cmp	r5, #10
 8003fdc:	d1df      	bne.n	8003f9e <__swbuf_r+0x36>
 8003fde:	0021      	movs	r1, r4
 8003fe0:	0030      	movs	r0, r6
 8003fe2:	f000 fd27 	bl	8004a34 <_fflush_r>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d0d9      	beq.n	8003f9e <__swbuf_r+0x36>
 8003fea:	e7d6      	b.n	8003f9a <__swbuf_r+0x32>

08003fec <__swsetup_r>:
 8003fec:	4b2d      	ldr	r3, [pc, #180]	@ (80040a4 <__swsetup_r+0xb8>)
 8003fee:	b570      	push	{r4, r5, r6, lr}
 8003ff0:	0005      	movs	r5, r0
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	000c      	movs	r4, r1
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d004      	beq.n	8004004 <__swsetup_r+0x18>
 8003ffa:	6a03      	ldr	r3, [r0, #32]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <__swsetup_r+0x18>
 8004000:	f7ff fec2 	bl	8003d88 <__sinit>
 8004004:	220c      	movs	r2, #12
 8004006:	5ea3      	ldrsh	r3, [r4, r2]
 8004008:	071a      	lsls	r2, r3, #28
 800400a:	d423      	bmi.n	8004054 <__swsetup_r+0x68>
 800400c:	06da      	lsls	r2, r3, #27
 800400e:	d407      	bmi.n	8004020 <__swsetup_r+0x34>
 8004010:	2209      	movs	r2, #9
 8004012:	602a      	str	r2, [r5, #0]
 8004014:	2240      	movs	r2, #64	@ 0x40
 8004016:	2001      	movs	r0, #1
 8004018:	4313      	orrs	r3, r2
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	4240      	negs	r0, r0
 800401e:	e03a      	b.n	8004096 <__swsetup_r+0xaa>
 8004020:	075b      	lsls	r3, r3, #29
 8004022:	d513      	bpl.n	800404c <__swsetup_r+0x60>
 8004024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004026:	2900      	cmp	r1, #0
 8004028:	d008      	beq.n	800403c <__swsetup_r+0x50>
 800402a:	0023      	movs	r3, r4
 800402c:	3344      	adds	r3, #68	@ 0x44
 800402e:	4299      	cmp	r1, r3
 8004030:	d002      	beq.n	8004038 <__swsetup_r+0x4c>
 8004032:	0028      	movs	r0, r5
 8004034:	f000 f8bc 	bl	80041b0 <_free_r>
 8004038:	2300      	movs	r3, #0
 800403a:	6363      	str	r3, [r4, #52]	@ 0x34
 800403c:	2224      	movs	r2, #36	@ 0x24
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	4393      	bics	r3, r2
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	2300      	movs	r3, #0
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	2308      	movs	r3, #8
 800404e:	89a2      	ldrh	r2, [r4, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <__swsetup_r+0x86>
 800405a:	21a0      	movs	r1, #160	@ 0xa0
 800405c:	2280      	movs	r2, #128	@ 0x80
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	0089      	lsls	r1, r1, #2
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	400b      	ands	r3, r1
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <__swsetup_r+0x86>
 800406a:	0021      	movs	r1, r4
 800406c:	0028      	movs	r0, r5
 800406e:	f000 fd37 	bl	8004ae0 <__smakebuf_r>
 8004072:	220c      	movs	r2, #12
 8004074:	5ea3      	ldrsh	r3, [r4, r2]
 8004076:	2101      	movs	r1, #1
 8004078:	001a      	movs	r2, r3
 800407a:	400a      	ands	r2, r1
 800407c:	420b      	tst	r3, r1
 800407e:	d00b      	beq.n	8004098 <__swsetup_r+0xac>
 8004080:	2200      	movs	r2, #0
 8004082:	60a2      	str	r2, [r4, #8]
 8004084:	6962      	ldr	r2, [r4, #20]
 8004086:	4252      	negs	r2, r2
 8004088:	61a2      	str	r2, [r4, #24]
 800408a:	2000      	movs	r0, #0
 800408c:	6922      	ldr	r2, [r4, #16]
 800408e:	4282      	cmp	r2, r0
 8004090:	d101      	bne.n	8004096 <__swsetup_r+0xaa>
 8004092:	061a      	lsls	r2, r3, #24
 8004094:	d4be      	bmi.n	8004014 <__swsetup_r+0x28>
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	0799      	lsls	r1, r3, #30
 800409a:	d400      	bmi.n	800409e <__swsetup_r+0xb2>
 800409c:	6962      	ldr	r2, [r4, #20]
 800409e:	60a2      	str	r2, [r4, #8]
 80040a0:	e7f3      	b.n	800408a <__swsetup_r+0x9e>
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	20000188 	.word	0x20000188

080040a8 <memset>:
 80040a8:	0003      	movs	r3, r0
 80040aa:	1882      	adds	r2, r0, r2
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d100      	bne.n	80040b2 <memset+0xa>
 80040b0:	4770      	bx	lr
 80040b2:	7019      	strb	r1, [r3, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e7f9      	b.n	80040ac <memset+0x4>

080040b8 <_close_r>:
 80040b8:	2300      	movs	r3, #0
 80040ba:	b570      	push	{r4, r5, r6, lr}
 80040bc:	4d06      	ldr	r5, [pc, #24]	@ (80040d8 <_close_r+0x20>)
 80040be:	0004      	movs	r4, r0
 80040c0:	0008      	movs	r0, r1
 80040c2:	602b      	str	r3, [r5, #0]
 80040c4:	f7fc fb79 	bl	80007ba <_close>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d103      	bne.n	80040d4 <_close_r+0x1c>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d000      	beq.n	80040d4 <_close_r+0x1c>
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	20000bdc 	.word	0x20000bdc

080040dc <_lseek_r>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	0004      	movs	r4, r0
 80040e0:	0008      	movs	r0, r1
 80040e2:	0011      	movs	r1, r2
 80040e4:	001a      	movs	r2, r3
 80040e6:	2300      	movs	r3, #0
 80040e8:	4d05      	ldr	r5, [pc, #20]	@ (8004100 <_lseek_r+0x24>)
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7fc fb6f 	bl	80007ce <_lseek>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d103      	bne.n	80040fc <_lseek_r+0x20>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d000      	beq.n	80040fc <_lseek_r+0x20>
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	20000bdc 	.word	0x20000bdc

08004104 <_read_r>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	0004      	movs	r4, r0
 8004108:	0008      	movs	r0, r1
 800410a:	0011      	movs	r1, r2
 800410c:	001a      	movs	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	4d05      	ldr	r5, [pc, #20]	@ (8004128 <_read_r+0x24>)
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	f7fc fb44 	bl	80007a0 <_read>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d103      	bne.n	8004124 <_read_r+0x20>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d000      	beq.n	8004124 <_read_r+0x20>
 8004122:	6023      	str	r3, [r4, #0]
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	20000bdc 	.word	0x20000bdc

0800412c <_write_r>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	0004      	movs	r4, r0
 8004130:	0008      	movs	r0, r1
 8004132:	0011      	movs	r1, r2
 8004134:	001a      	movs	r2, r3
 8004136:	2300      	movs	r3, #0
 8004138:	4d05      	ldr	r5, [pc, #20]	@ (8004150 <_write_r+0x24>)
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	f7fc fa08 	bl	8000550 <_write>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d103      	bne.n	800414c <_write_r+0x20>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <_write_r+0x20>
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	bd70      	pop	{r4, r5, r6, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	20000bdc 	.word	0x20000bdc

08004154 <__errno>:
 8004154:	4b01      	ldr	r3, [pc, #4]	@ (800415c <__errno+0x8>)
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	4770      	bx	lr
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	20000188 	.word	0x20000188

08004160 <__libc_init_array>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	2600      	movs	r6, #0
 8004164:	4c0c      	ldr	r4, [pc, #48]	@ (8004198 <__libc_init_array+0x38>)
 8004166:	4d0d      	ldr	r5, [pc, #52]	@ (800419c <__libc_init_array+0x3c>)
 8004168:	1b64      	subs	r4, r4, r5
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	42a6      	cmp	r6, r4
 800416e:	d109      	bne.n	8004184 <__libc_init_array+0x24>
 8004170:	2600      	movs	r6, #0
 8004172:	f000 fd39 	bl	8004be8 <_init>
 8004176:	4c0a      	ldr	r4, [pc, #40]	@ (80041a0 <__libc_init_array+0x40>)
 8004178:	4d0a      	ldr	r5, [pc, #40]	@ (80041a4 <__libc_init_array+0x44>)
 800417a:	1b64      	subs	r4, r4, r5
 800417c:	10a4      	asrs	r4, r4, #2
 800417e:	42a6      	cmp	r6, r4
 8004180:	d105      	bne.n	800418e <__libc_init_array+0x2e>
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	00b3      	lsls	r3, r6, #2
 8004186:	58eb      	ldr	r3, [r5, r3]
 8004188:	4798      	blx	r3
 800418a:	3601      	adds	r6, #1
 800418c:	e7ee      	b.n	800416c <__libc_init_array+0xc>
 800418e:	00b3      	lsls	r3, r6, #2
 8004190:	58eb      	ldr	r3, [r5, r3]
 8004192:	4798      	blx	r3
 8004194:	3601      	adds	r6, #1
 8004196:	e7f2      	b.n	800417e <__libc_init_array+0x1e>
 8004198:	08004d30 	.word	0x08004d30
 800419c:	08004d30 	.word	0x08004d30
 80041a0:	08004d34 	.word	0x08004d34
 80041a4:	08004d30 	.word	0x08004d30

080041a8 <__retarget_lock_init_recursive>:
 80041a8:	4770      	bx	lr

080041aa <__retarget_lock_acquire_recursive>:
 80041aa:	4770      	bx	lr

080041ac <__retarget_lock_release_recursive>:
 80041ac:	4770      	bx	lr
	...

080041b0 <_free_r>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	0005      	movs	r5, r0
 80041b4:	1e0c      	subs	r4, r1, #0
 80041b6:	d010      	beq.n	80041da <_free_r+0x2a>
 80041b8:	3c04      	subs	r4, #4
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <_free_r+0x12>
 80041c0:	18e4      	adds	r4, r4, r3
 80041c2:	0028      	movs	r0, r5
 80041c4:	f000 f8e0 	bl	8004388 <__malloc_lock>
 80041c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004240 <_free_r+0x90>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <_free_r+0x2c>
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	6014      	str	r4, [r2, #0]
 80041d4:	0028      	movs	r0, r5
 80041d6:	f000 f8df 	bl	8004398 <__malloc_unlock>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d908      	bls.n	80041f2 <_free_r+0x42>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	1821      	adds	r1, r4, r0
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d1f3      	bne.n	80041d0 <_free_r+0x20>
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	1809      	adds	r1, r1, r0
 80041ee:	6021      	str	r1, [r4, #0]
 80041f0:	e7ee      	b.n	80041d0 <_free_r+0x20>
 80041f2:	001a      	movs	r2, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <_free_r+0x4e>
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	d9f9      	bls.n	80041f2 <_free_r+0x42>
 80041fe:	6811      	ldr	r1, [r2, #0]
 8004200:	1850      	adds	r0, r2, r1
 8004202:	42a0      	cmp	r0, r4
 8004204:	d10b      	bne.n	800421e <_free_r+0x6e>
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	1809      	adds	r1, r1, r0
 800420a:	1850      	adds	r0, r2, r1
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	4283      	cmp	r3, r0
 8004210:	d1e0      	bne.n	80041d4 <_free_r+0x24>
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	1841      	adds	r1, r0, r1
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	6053      	str	r3, [r2, #4]
 800421c:	e7da      	b.n	80041d4 <_free_r+0x24>
 800421e:	42a0      	cmp	r0, r4
 8004220:	d902      	bls.n	8004228 <_free_r+0x78>
 8004222:	230c      	movs	r3, #12
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	e7d5      	b.n	80041d4 <_free_r+0x24>
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	1821      	adds	r1, r4, r0
 800422c:	428b      	cmp	r3, r1
 800422e:	d103      	bne.n	8004238 <_free_r+0x88>
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	1809      	adds	r1, r1, r0
 8004236:	6021      	str	r1, [r4, #0]
 8004238:	6063      	str	r3, [r4, #4]
 800423a:	6054      	str	r4, [r2, #4]
 800423c:	e7ca      	b.n	80041d4 <_free_r+0x24>
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	20000be8 	.word	0x20000be8

08004244 <sbrk_aligned>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4e0f      	ldr	r6, [pc, #60]	@ (8004284 <sbrk_aligned+0x40>)
 8004248:	000d      	movs	r5, r1
 800424a:	6831      	ldr	r1, [r6, #0]
 800424c:	0004      	movs	r4, r0
 800424e:	2900      	cmp	r1, #0
 8004250:	d102      	bne.n	8004258 <sbrk_aligned+0x14>
 8004252:	f000 fcab 	bl	8004bac <_sbrk_r>
 8004256:	6030      	str	r0, [r6, #0]
 8004258:	0029      	movs	r1, r5
 800425a:	0020      	movs	r0, r4
 800425c:	f000 fca6 	bl	8004bac <_sbrk_r>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d103      	bne.n	800426c <sbrk_aligned+0x28>
 8004264:	2501      	movs	r5, #1
 8004266:	426d      	negs	r5, r5
 8004268:	0028      	movs	r0, r5
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	2303      	movs	r3, #3
 800426e:	1cc5      	adds	r5, r0, #3
 8004270:	439d      	bics	r5, r3
 8004272:	42a8      	cmp	r0, r5
 8004274:	d0f8      	beq.n	8004268 <sbrk_aligned+0x24>
 8004276:	1a29      	subs	r1, r5, r0
 8004278:	0020      	movs	r0, r4
 800427a:	f000 fc97 	bl	8004bac <_sbrk_r>
 800427e:	3001      	adds	r0, #1
 8004280:	d1f2      	bne.n	8004268 <sbrk_aligned+0x24>
 8004282:	e7ef      	b.n	8004264 <sbrk_aligned+0x20>
 8004284:	20000be4 	.word	0x20000be4

08004288 <_malloc_r>:
 8004288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800428a:	2203      	movs	r2, #3
 800428c:	1ccb      	adds	r3, r1, #3
 800428e:	4393      	bics	r3, r2
 8004290:	3308      	adds	r3, #8
 8004292:	0005      	movs	r5, r0
 8004294:	001f      	movs	r7, r3
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d234      	bcs.n	8004304 <_malloc_r+0x7c>
 800429a:	270c      	movs	r7, #12
 800429c:	42b9      	cmp	r1, r7
 800429e:	d833      	bhi.n	8004308 <_malloc_r+0x80>
 80042a0:	0028      	movs	r0, r5
 80042a2:	f000 f871 	bl	8004388 <__malloc_lock>
 80042a6:	4e37      	ldr	r6, [pc, #220]	@ (8004384 <_malloc_r+0xfc>)
 80042a8:	6833      	ldr	r3, [r6, #0]
 80042aa:	001c      	movs	r4, r3
 80042ac:	2c00      	cmp	r4, #0
 80042ae:	d12f      	bne.n	8004310 <_malloc_r+0x88>
 80042b0:	0039      	movs	r1, r7
 80042b2:	0028      	movs	r0, r5
 80042b4:	f7ff ffc6 	bl	8004244 <sbrk_aligned>
 80042b8:	0004      	movs	r4, r0
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	d15f      	bne.n	800437e <_malloc_r+0xf6>
 80042be:	6834      	ldr	r4, [r6, #0]
 80042c0:	9400      	str	r4, [sp, #0]
 80042c2:	9b00      	ldr	r3, [sp, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d14a      	bne.n	800435e <_malloc_r+0xd6>
 80042c8:	2c00      	cmp	r4, #0
 80042ca:	d052      	beq.n	8004372 <_malloc_r+0xea>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	0028      	movs	r0, r5
 80042d0:	18e3      	adds	r3, r4, r3
 80042d2:	9900      	ldr	r1, [sp, #0]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	f000 fc69 	bl	8004bac <_sbrk_r>
 80042da:	9b01      	ldr	r3, [sp, #4]
 80042dc:	4283      	cmp	r3, r0
 80042de:	d148      	bne.n	8004372 <_malloc_r+0xea>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	0028      	movs	r0, r5
 80042e4:	1aff      	subs	r7, r7, r3
 80042e6:	0039      	movs	r1, r7
 80042e8:	f7ff ffac 	bl	8004244 <sbrk_aligned>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d040      	beq.n	8004372 <_malloc_r+0xea>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	19db      	adds	r3, r3, r7
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	6833      	ldr	r3, [r6, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	d133      	bne.n	8004366 <_malloc_r+0xde>
 80042fe:	9b00      	ldr	r3, [sp, #0]
 8004300:	6033      	str	r3, [r6, #0]
 8004302:	e019      	b.n	8004338 <_malloc_r+0xb0>
 8004304:	2b00      	cmp	r3, #0
 8004306:	dac9      	bge.n	800429c <_malloc_r+0x14>
 8004308:	230c      	movs	r3, #12
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	2000      	movs	r0, #0
 800430e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004310:	6821      	ldr	r1, [r4, #0]
 8004312:	1bc9      	subs	r1, r1, r7
 8004314:	d420      	bmi.n	8004358 <_malloc_r+0xd0>
 8004316:	290b      	cmp	r1, #11
 8004318:	d90a      	bls.n	8004330 <_malloc_r+0xa8>
 800431a:	19e2      	adds	r2, r4, r7
 800431c:	6027      	str	r7, [r4, #0]
 800431e:	42a3      	cmp	r3, r4
 8004320:	d104      	bne.n	800432c <_malloc_r+0xa4>
 8004322:	6032      	str	r2, [r6, #0]
 8004324:	6863      	ldr	r3, [r4, #4]
 8004326:	6011      	str	r1, [r2, #0]
 8004328:	6053      	str	r3, [r2, #4]
 800432a:	e005      	b.n	8004338 <_malloc_r+0xb0>
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	e7f9      	b.n	8004324 <_malloc_r+0x9c>
 8004330:	6862      	ldr	r2, [r4, #4]
 8004332:	42a3      	cmp	r3, r4
 8004334:	d10e      	bne.n	8004354 <_malloc_r+0xcc>
 8004336:	6032      	str	r2, [r6, #0]
 8004338:	0028      	movs	r0, r5
 800433a:	f000 f82d 	bl	8004398 <__malloc_unlock>
 800433e:	0020      	movs	r0, r4
 8004340:	2207      	movs	r2, #7
 8004342:	300b      	adds	r0, #11
 8004344:	1d23      	adds	r3, r4, #4
 8004346:	4390      	bics	r0, r2
 8004348:	1ac2      	subs	r2, r0, r3
 800434a:	4298      	cmp	r0, r3
 800434c:	d0df      	beq.n	800430e <_malloc_r+0x86>
 800434e:	1a1b      	subs	r3, r3, r0
 8004350:	50a3      	str	r3, [r4, r2]
 8004352:	e7dc      	b.n	800430e <_malloc_r+0x86>
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	e7ef      	b.n	8004338 <_malloc_r+0xb0>
 8004358:	0023      	movs	r3, r4
 800435a:	6864      	ldr	r4, [r4, #4]
 800435c:	e7a6      	b.n	80042ac <_malloc_r+0x24>
 800435e:	9c00      	ldr	r4, [sp, #0]
 8004360:	6863      	ldr	r3, [r4, #4]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	e7ad      	b.n	80042c2 <_malloc_r+0x3a>
 8004366:	001a      	movs	r2, r3
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	42a3      	cmp	r3, r4
 800436c:	d1fb      	bne.n	8004366 <_malloc_r+0xde>
 800436e:	2300      	movs	r3, #0
 8004370:	e7da      	b.n	8004328 <_malloc_r+0xa0>
 8004372:	230c      	movs	r3, #12
 8004374:	0028      	movs	r0, r5
 8004376:	602b      	str	r3, [r5, #0]
 8004378:	f000 f80e 	bl	8004398 <__malloc_unlock>
 800437c:	e7c6      	b.n	800430c <_malloc_r+0x84>
 800437e:	6007      	str	r7, [r0, #0]
 8004380:	e7da      	b.n	8004338 <_malloc_r+0xb0>
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	20000be8 	.word	0x20000be8

08004388 <__malloc_lock>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4802      	ldr	r0, [pc, #8]	@ (8004394 <__malloc_lock+0xc>)
 800438c:	f7ff ff0d 	bl	80041aa <__retarget_lock_acquire_recursive>
 8004390:	bd10      	pop	{r4, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	20000be0 	.word	0x20000be0

08004398 <__malloc_unlock>:
 8004398:	b510      	push	{r4, lr}
 800439a:	4802      	ldr	r0, [pc, #8]	@ (80043a4 <__malloc_unlock+0xc>)
 800439c:	f7ff ff06 	bl	80041ac <__retarget_lock_release_recursive>
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	20000be0 	.word	0x20000be0

080043a8 <__sfputc_r>:
 80043a8:	6893      	ldr	r3, [r2, #8]
 80043aa:	b510      	push	{r4, lr}
 80043ac:	3b01      	subs	r3, #1
 80043ae:	6093      	str	r3, [r2, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da04      	bge.n	80043be <__sfputc_r+0x16>
 80043b4:	6994      	ldr	r4, [r2, #24]
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	db07      	blt.n	80043ca <__sfputc_r+0x22>
 80043ba:	290a      	cmp	r1, #10
 80043bc:	d005      	beq.n	80043ca <__sfputc_r+0x22>
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	1c58      	adds	r0, r3, #1
 80043c2:	6010      	str	r0, [r2, #0]
 80043c4:	7019      	strb	r1, [r3, #0]
 80043c6:	0008      	movs	r0, r1
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	f7ff fdcd 	bl	8003f68 <__swbuf_r>
 80043ce:	0001      	movs	r1, r0
 80043d0:	e7f9      	b.n	80043c6 <__sfputc_r+0x1e>

080043d2 <__sfputs_r>:
 80043d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d4:	0006      	movs	r6, r0
 80043d6:	000f      	movs	r7, r1
 80043d8:	0014      	movs	r4, r2
 80043da:	18d5      	adds	r5, r2, r3
 80043dc:	42ac      	cmp	r4, r5
 80043de:	d101      	bne.n	80043e4 <__sfputs_r+0x12>
 80043e0:	2000      	movs	r0, #0
 80043e2:	e007      	b.n	80043f4 <__sfputs_r+0x22>
 80043e4:	7821      	ldrb	r1, [r4, #0]
 80043e6:	003a      	movs	r2, r7
 80043e8:	0030      	movs	r0, r6
 80043ea:	f7ff ffdd 	bl	80043a8 <__sfputc_r>
 80043ee:	3401      	adds	r4, #1
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d1f3      	bne.n	80043dc <__sfputs_r+0xa>
 80043f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043f8 <_vfiprintf_r>:
 80043f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fa:	b0a1      	sub	sp, #132	@ 0x84
 80043fc:	000f      	movs	r7, r1
 80043fe:	0015      	movs	r5, r2
 8004400:	001e      	movs	r6, r3
 8004402:	9003      	str	r0, [sp, #12]
 8004404:	2800      	cmp	r0, #0
 8004406:	d004      	beq.n	8004412 <_vfiprintf_r+0x1a>
 8004408:	6a03      	ldr	r3, [r0, #32]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <_vfiprintf_r+0x1a>
 800440e:	f7ff fcbb 	bl	8003d88 <__sinit>
 8004412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004414:	07db      	lsls	r3, r3, #31
 8004416:	d405      	bmi.n	8004424 <_vfiprintf_r+0x2c>
 8004418:	89bb      	ldrh	r3, [r7, #12]
 800441a:	059b      	lsls	r3, r3, #22
 800441c:	d402      	bmi.n	8004424 <_vfiprintf_r+0x2c>
 800441e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004420:	f7ff fec3 	bl	80041aa <__retarget_lock_acquire_recursive>
 8004424:	89bb      	ldrh	r3, [r7, #12]
 8004426:	071b      	lsls	r3, r3, #28
 8004428:	d502      	bpl.n	8004430 <_vfiprintf_r+0x38>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d113      	bne.n	8004458 <_vfiprintf_r+0x60>
 8004430:	0039      	movs	r1, r7
 8004432:	9803      	ldr	r0, [sp, #12]
 8004434:	f7ff fdda 	bl	8003fec <__swsetup_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	d00d      	beq.n	8004458 <_vfiprintf_r+0x60>
 800443c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800443e:	07db      	lsls	r3, r3, #31
 8004440:	d503      	bpl.n	800444a <_vfiprintf_r+0x52>
 8004442:	2001      	movs	r0, #1
 8004444:	4240      	negs	r0, r0
 8004446:	b021      	add	sp, #132	@ 0x84
 8004448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444a:	89bb      	ldrh	r3, [r7, #12]
 800444c:	059b      	lsls	r3, r3, #22
 800444e:	d4f8      	bmi.n	8004442 <_vfiprintf_r+0x4a>
 8004450:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004452:	f7ff feab 	bl	80041ac <__retarget_lock_release_recursive>
 8004456:	e7f4      	b.n	8004442 <_vfiprintf_r+0x4a>
 8004458:	2300      	movs	r3, #0
 800445a:	ac08      	add	r4, sp, #32
 800445c:	6163      	str	r3, [r4, #20]
 800445e:	3320      	adds	r3, #32
 8004460:	7663      	strb	r3, [r4, #25]
 8004462:	3310      	adds	r3, #16
 8004464:	76a3      	strb	r3, [r4, #26]
 8004466:	9607      	str	r6, [sp, #28]
 8004468:	002e      	movs	r6, r5
 800446a:	7833      	ldrb	r3, [r6, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <_vfiprintf_r+0x7c>
 8004470:	2b25      	cmp	r3, #37	@ 0x25
 8004472:	d148      	bne.n	8004506 <_vfiprintf_r+0x10e>
 8004474:	1b73      	subs	r3, r6, r5
 8004476:	9305      	str	r3, [sp, #20]
 8004478:	42ae      	cmp	r6, r5
 800447a:	d00b      	beq.n	8004494 <_vfiprintf_r+0x9c>
 800447c:	002a      	movs	r2, r5
 800447e:	0039      	movs	r1, r7
 8004480:	9803      	ldr	r0, [sp, #12]
 8004482:	f7ff ffa6 	bl	80043d2 <__sfputs_r>
 8004486:	3001      	adds	r0, #1
 8004488:	d100      	bne.n	800448c <_vfiprintf_r+0x94>
 800448a:	e0ae      	b.n	80045ea <_vfiprintf_r+0x1f2>
 800448c:	6963      	ldr	r3, [r4, #20]
 800448e:	9a05      	ldr	r2, [sp, #20]
 8004490:	189b      	adds	r3, r3, r2
 8004492:	6163      	str	r3, [r4, #20]
 8004494:	7833      	ldrb	r3, [r6, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d100      	bne.n	800449c <_vfiprintf_r+0xa4>
 800449a:	e0a6      	b.n	80045ea <_vfiprintf_r+0x1f2>
 800449c:	2201      	movs	r2, #1
 800449e:	2300      	movs	r3, #0
 80044a0:	4252      	negs	r2, r2
 80044a2:	6062      	str	r2, [r4, #4]
 80044a4:	a904      	add	r1, sp, #16
 80044a6:	3254      	adds	r2, #84	@ 0x54
 80044a8:	1852      	adds	r2, r2, r1
 80044aa:	1c75      	adds	r5, r6, #1
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	60e3      	str	r3, [r4, #12]
 80044b0:	60a3      	str	r3, [r4, #8]
 80044b2:	7013      	strb	r3, [r2, #0]
 80044b4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80044b6:	4b59      	ldr	r3, [pc, #356]	@ (800461c <_vfiprintf_r+0x224>)
 80044b8:	2205      	movs	r2, #5
 80044ba:	0018      	movs	r0, r3
 80044bc:	7829      	ldrb	r1, [r5, #0]
 80044be:	9305      	str	r3, [sp, #20]
 80044c0:	f000 fb86 	bl	8004bd0 <memchr>
 80044c4:	1c6e      	adds	r6, r5, #1
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d11f      	bne.n	800450a <_vfiprintf_r+0x112>
 80044ca:	6822      	ldr	r2, [r4, #0]
 80044cc:	06d3      	lsls	r3, r2, #27
 80044ce:	d504      	bpl.n	80044da <_vfiprintf_r+0xe2>
 80044d0:	2353      	movs	r3, #83	@ 0x53
 80044d2:	a904      	add	r1, sp, #16
 80044d4:	185b      	adds	r3, r3, r1
 80044d6:	2120      	movs	r1, #32
 80044d8:	7019      	strb	r1, [r3, #0]
 80044da:	0713      	lsls	r3, r2, #28
 80044dc:	d504      	bpl.n	80044e8 <_vfiprintf_r+0xf0>
 80044de:	2353      	movs	r3, #83	@ 0x53
 80044e0:	a904      	add	r1, sp, #16
 80044e2:	185b      	adds	r3, r3, r1
 80044e4:	212b      	movs	r1, #43	@ 0x2b
 80044e6:	7019      	strb	r1, [r3, #0]
 80044e8:	782b      	ldrb	r3, [r5, #0]
 80044ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ec:	d016      	beq.n	800451c <_vfiprintf_r+0x124>
 80044ee:	002e      	movs	r6, r5
 80044f0:	2100      	movs	r1, #0
 80044f2:	200a      	movs	r0, #10
 80044f4:	68e3      	ldr	r3, [r4, #12]
 80044f6:	7832      	ldrb	r2, [r6, #0]
 80044f8:	1c75      	adds	r5, r6, #1
 80044fa:	3a30      	subs	r2, #48	@ 0x30
 80044fc:	2a09      	cmp	r2, #9
 80044fe:	d950      	bls.n	80045a2 <_vfiprintf_r+0x1aa>
 8004500:	2900      	cmp	r1, #0
 8004502:	d111      	bne.n	8004528 <_vfiprintf_r+0x130>
 8004504:	e017      	b.n	8004536 <_vfiprintf_r+0x13e>
 8004506:	3601      	adds	r6, #1
 8004508:	e7af      	b.n	800446a <_vfiprintf_r+0x72>
 800450a:	9b05      	ldr	r3, [sp, #20]
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	1ac0      	subs	r0, r0, r3
 8004510:	2301      	movs	r3, #1
 8004512:	4083      	lsls	r3, r0
 8004514:	4313      	orrs	r3, r2
 8004516:	0035      	movs	r5, r6
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	e7cc      	b.n	80044b6 <_vfiprintf_r+0xbe>
 800451c:	9b07      	ldr	r3, [sp, #28]
 800451e:	1d19      	adds	r1, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	9107      	str	r1, [sp, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db01      	blt.n	800452c <_vfiprintf_r+0x134>
 8004528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800452a:	e004      	b.n	8004536 <_vfiprintf_r+0x13e>
 800452c:	425b      	negs	r3, r3
 800452e:	60e3      	str	r3, [r4, #12]
 8004530:	2302      	movs	r3, #2
 8004532:	4313      	orrs	r3, r2
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	7833      	ldrb	r3, [r6, #0]
 8004538:	2b2e      	cmp	r3, #46	@ 0x2e
 800453a:	d10c      	bne.n	8004556 <_vfiprintf_r+0x15e>
 800453c:	7873      	ldrb	r3, [r6, #1]
 800453e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004540:	d134      	bne.n	80045ac <_vfiprintf_r+0x1b4>
 8004542:	9b07      	ldr	r3, [sp, #28]
 8004544:	3602      	adds	r6, #2
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	9207      	str	r2, [sp, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	da01      	bge.n	8004554 <_vfiprintf_r+0x15c>
 8004550:	2301      	movs	r3, #1
 8004552:	425b      	negs	r3, r3
 8004554:	9309      	str	r3, [sp, #36]	@ 0x24
 8004556:	4d32      	ldr	r5, [pc, #200]	@ (8004620 <_vfiprintf_r+0x228>)
 8004558:	2203      	movs	r2, #3
 800455a:	0028      	movs	r0, r5
 800455c:	7831      	ldrb	r1, [r6, #0]
 800455e:	f000 fb37 	bl	8004bd0 <memchr>
 8004562:	2800      	cmp	r0, #0
 8004564:	d006      	beq.n	8004574 <_vfiprintf_r+0x17c>
 8004566:	2340      	movs	r3, #64	@ 0x40
 8004568:	1b40      	subs	r0, r0, r5
 800456a:	4083      	lsls	r3, r0
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	3601      	adds	r6, #1
 8004570:	4313      	orrs	r3, r2
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	7831      	ldrb	r1, [r6, #0]
 8004576:	2206      	movs	r2, #6
 8004578:	482a      	ldr	r0, [pc, #168]	@ (8004624 <_vfiprintf_r+0x22c>)
 800457a:	1c75      	adds	r5, r6, #1
 800457c:	7621      	strb	r1, [r4, #24]
 800457e:	f000 fb27 	bl	8004bd0 <memchr>
 8004582:	2800      	cmp	r0, #0
 8004584:	d040      	beq.n	8004608 <_vfiprintf_r+0x210>
 8004586:	4b28      	ldr	r3, [pc, #160]	@ (8004628 <_vfiprintf_r+0x230>)
 8004588:	2b00      	cmp	r3, #0
 800458a:	d122      	bne.n	80045d2 <_vfiprintf_r+0x1da>
 800458c:	2207      	movs	r2, #7
 800458e:	9b07      	ldr	r3, [sp, #28]
 8004590:	3307      	adds	r3, #7
 8004592:	4393      	bics	r3, r2
 8004594:	3308      	adds	r3, #8
 8004596:	9307      	str	r3, [sp, #28]
 8004598:	6963      	ldr	r3, [r4, #20]
 800459a:	9a04      	ldr	r2, [sp, #16]
 800459c:	189b      	adds	r3, r3, r2
 800459e:	6163      	str	r3, [r4, #20]
 80045a0:	e762      	b.n	8004468 <_vfiprintf_r+0x70>
 80045a2:	4343      	muls	r3, r0
 80045a4:	002e      	movs	r6, r5
 80045a6:	2101      	movs	r1, #1
 80045a8:	189b      	adds	r3, r3, r2
 80045aa:	e7a4      	b.n	80044f6 <_vfiprintf_r+0xfe>
 80045ac:	2300      	movs	r3, #0
 80045ae:	200a      	movs	r0, #10
 80045b0:	0019      	movs	r1, r3
 80045b2:	3601      	adds	r6, #1
 80045b4:	6063      	str	r3, [r4, #4]
 80045b6:	7832      	ldrb	r2, [r6, #0]
 80045b8:	1c75      	adds	r5, r6, #1
 80045ba:	3a30      	subs	r2, #48	@ 0x30
 80045bc:	2a09      	cmp	r2, #9
 80045be:	d903      	bls.n	80045c8 <_vfiprintf_r+0x1d0>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0c8      	beq.n	8004556 <_vfiprintf_r+0x15e>
 80045c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80045c6:	e7c6      	b.n	8004556 <_vfiprintf_r+0x15e>
 80045c8:	4341      	muls	r1, r0
 80045ca:	002e      	movs	r6, r5
 80045cc:	2301      	movs	r3, #1
 80045ce:	1889      	adds	r1, r1, r2
 80045d0:	e7f1      	b.n	80045b6 <_vfiprintf_r+0x1be>
 80045d2:	aa07      	add	r2, sp, #28
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	0021      	movs	r1, r4
 80045d8:	003a      	movs	r2, r7
 80045da:	4b14      	ldr	r3, [pc, #80]	@ (800462c <_vfiprintf_r+0x234>)
 80045dc:	9803      	ldr	r0, [sp, #12]
 80045de:	e000      	b.n	80045e2 <_vfiprintf_r+0x1ea>
 80045e0:	bf00      	nop
 80045e2:	9004      	str	r0, [sp, #16]
 80045e4:	9b04      	ldr	r3, [sp, #16]
 80045e6:	3301      	adds	r3, #1
 80045e8:	d1d6      	bne.n	8004598 <_vfiprintf_r+0x1a0>
 80045ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ec:	07db      	lsls	r3, r3, #31
 80045ee:	d405      	bmi.n	80045fc <_vfiprintf_r+0x204>
 80045f0:	89bb      	ldrh	r3, [r7, #12]
 80045f2:	059b      	lsls	r3, r3, #22
 80045f4:	d402      	bmi.n	80045fc <_vfiprintf_r+0x204>
 80045f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80045f8:	f7ff fdd8 	bl	80041ac <__retarget_lock_release_recursive>
 80045fc:	89bb      	ldrh	r3, [r7, #12]
 80045fe:	065b      	lsls	r3, r3, #25
 8004600:	d500      	bpl.n	8004604 <_vfiprintf_r+0x20c>
 8004602:	e71e      	b.n	8004442 <_vfiprintf_r+0x4a>
 8004604:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004606:	e71e      	b.n	8004446 <_vfiprintf_r+0x4e>
 8004608:	aa07      	add	r2, sp, #28
 800460a:	9200      	str	r2, [sp, #0]
 800460c:	0021      	movs	r1, r4
 800460e:	003a      	movs	r2, r7
 8004610:	4b06      	ldr	r3, [pc, #24]	@ (800462c <_vfiprintf_r+0x234>)
 8004612:	9803      	ldr	r0, [sp, #12]
 8004614:	f000 f87c 	bl	8004710 <_printf_i>
 8004618:	e7e3      	b.n	80045e2 <_vfiprintf_r+0x1ea>
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	08004cc1 	.word	0x08004cc1
 8004620:	08004cc7 	.word	0x08004cc7
 8004624:	08004ccb 	.word	0x08004ccb
 8004628:	00000000 	.word	0x00000000
 800462c:	080043d3 	.word	0x080043d3

08004630 <_printf_common>:
 8004630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004632:	0016      	movs	r6, r2
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	688a      	ldr	r2, [r1, #8]
 8004638:	690b      	ldr	r3, [r1, #16]
 800463a:	000c      	movs	r4, r1
 800463c:	9000      	str	r0, [sp, #0]
 800463e:	4293      	cmp	r3, r2
 8004640:	da00      	bge.n	8004644 <_printf_common+0x14>
 8004642:	0013      	movs	r3, r2
 8004644:	0022      	movs	r2, r4
 8004646:	6033      	str	r3, [r6, #0]
 8004648:	3243      	adds	r2, #67	@ 0x43
 800464a:	7812      	ldrb	r2, [r2, #0]
 800464c:	2a00      	cmp	r2, #0
 800464e:	d001      	beq.n	8004654 <_printf_common+0x24>
 8004650:	3301      	adds	r3, #1
 8004652:	6033      	str	r3, [r6, #0]
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	069b      	lsls	r3, r3, #26
 8004658:	d502      	bpl.n	8004660 <_printf_common+0x30>
 800465a:	6833      	ldr	r3, [r6, #0]
 800465c:	3302      	adds	r3, #2
 800465e:	6033      	str	r3, [r6, #0]
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	2306      	movs	r3, #6
 8004664:	0015      	movs	r5, r2
 8004666:	401d      	ands	r5, r3
 8004668:	421a      	tst	r2, r3
 800466a:	d027      	beq.n	80046bc <_printf_common+0x8c>
 800466c:	0023      	movs	r3, r4
 800466e:	3343      	adds	r3, #67	@ 0x43
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	4193      	sbcs	r3, r2
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	0692      	lsls	r2, r2, #26
 800467a:	d430      	bmi.n	80046de <_printf_common+0xae>
 800467c:	0022      	movs	r2, r4
 800467e:	9901      	ldr	r1, [sp, #4]
 8004680:	9800      	ldr	r0, [sp, #0]
 8004682:	9d08      	ldr	r5, [sp, #32]
 8004684:	3243      	adds	r2, #67	@ 0x43
 8004686:	47a8      	blx	r5
 8004688:	3001      	adds	r0, #1
 800468a:	d025      	beq.n	80046d8 <_printf_common+0xa8>
 800468c:	2206      	movs	r2, #6
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	2500      	movs	r5, #0
 8004692:	4013      	ands	r3, r2
 8004694:	2b04      	cmp	r3, #4
 8004696:	d105      	bne.n	80046a4 <_printf_common+0x74>
 8004698:	6833      	ldr	r3, [r6, #0]
 800469a:	68e5      	ldr	r5, [r4, #12]
 800469c:	1aed      	subs	r5, r5, r3
 800469e:	43eb      	mvns	r3, r5
 80046a0:	17db      	asrs	r3, r3, #31
 80046a2:	401d      	ands	r5, r3
 80046a4:	68a3      	ldr	r3, [r4, #8]
 80046a6:	6922      	ldr	r2, [r4, #16]
 80046a8:	4293      	cmp	r3, r2
 80046aa:	dd01      	ble.n	80046b0 <_printf_common+0x80>
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	18ed      	adds	r5, r5, r3
 80046b0:	2600      	movs	r6, #0
 80046b2:	42b5      	cmp	r5, r6
 80046b4:	d120      	bne.n	80046f8 <_printf_common+0xc8>
 80046b6:	2000      	movs	r0, #0
 80046b8:	e010      	b.n	80046dc <_printf_common+0xac>
 80046ba:	3501      	adds	r5, #1
 80046bc:	68e3      	ldr	r3, [r4, #12]
 80046be:	6832      	ldr	r2, [r6, #0]
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	42ab      	cmp	r3, r5
 80046c4:	ddd2      	ble.n	800466c <_printf_common+0x3c>
 80046c6:	0022      	movs	r2, r4
 80046c8:	2301      	movs	r3, #1
 80046ca:	9901      	ldr	r1, [sp, #4]
 80046cc:	9800      	ldr	r0, [sp, #0]
 80046ce:	9f08      	ldr	r7, [sp, #32]
 80046d0:	3219      	adds	r2, #25
 80046d2:	47b8      	blx	r7
 80046d4:	3001      	adds	r0, #1
 80046d6:	d1f0      	bne.n	80046ba <_printf_common+0x8a>
 80046d8:	2001      	movs	r0, #1
 80046da:	4240      	negs	r0, r0
 80046dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046de:	2030      	movs	r0, #48	@ 0x30
 80046e0:	18e1      	adds	r1, r4, r3
 80046e2:	3143      	adds	r1, #67	@ 0x43
 80046e4:	7008      	strb	r0, [r1, #0]
 80046e6:	0021      	movs	r1, r4
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	3145      	adds	r1, #69	@ 0x45
 80046ec:	7809      	ldrb	r1, [r1, #0]
 80046ee:	18a2      	adds	r2, r4, r2
 80046f0:	3243      	adds	r2, #67	@ 0x43
 80046f2:	3302      	adds	r3, #2
 80046f4:	7011      	strb	r1, [r2, #0]
 80046f6:	e7c1      	b.n	800467c <_printf_common+0x4c>
 80046f8:	0022      	movs	r2, r4
 80046fa:	2301      	movs	r3, #1
 80046fc:	9901      	ldr	r1, [sp, #4]
 80046fe:	9800      	ldr	r0, [sp, #0]
 8004700:	9f08      	ldr	r7, [sp, #32]
 8004702:	321a      	adds	r2, #26
 8004704:	47b8      	blx	r7
 8004706:	3001      	adds	r0, #1
 8004708:	d0e6      	beq.n	80046d8 <_printf_common+0xa8>
 800470a:	3601      	adds	r6, #1
 800470c:	e7d1      	b.n	80046b2 <_printf_common+0x82>
	...

08004710 <_printf_i>:
 8004710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004712:	b08b      	sub	sp, #44	@ 0x2c
 8004714:	9206      	str	r2, [sp, #24]
 8004716:	000a      	movs	r2, r1
 8004718:	3243      	adds	r2, #67	@ 0x43
 800471a:	9307      	str	r3, [sp, #28]
 800471c:	9005      	str	r0, [sp, #20]
 800471e:	9203      	str	r2, [sp, #12]
 8004720:	7e0a      	ldrb	r2, [r1, #24]
 8004722:	000c      	movs	r4, r1
 8004724:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004726:	2a78      	cmp	r2, #120	@ 0x78
 8004728:	d809      	bhi.n	800473e <_printf_i+0x2e>
 800472a:	2a62      	cmp	r2, #98	@ 0x62
 800472c:	d80b      	bhi.n	8004746 <_printf_i+0x36>
 800472e:	2a00      	cmp	r2, #0
 8004730:	d100      	bne.n	8004734 <_printf_i+0x24>
 8004732:	e0ba      	b.n	80048aa <_printf_i+0x19a>
 8004734:	497a      	ldr	r1, [pc, #488]	@ (8004920 <_printf_i+0x210>)
 8004736:	9104      	str	r1, [sp, #16]
 8004738:	2a58      	cmp	r2, #88	@ 0x58
 800473a:	d100      	bne.n	800473e <_printf_i+0x2e>
 800473c:	e08e      	b.n	800485c <_printf_i+0x14c>
 800473e:	0025      	movs	r5, r4
 8004740:	3542      	adds	r5, #66	@ 0x42
 8004742:	702a      	strb	r2, [r5, #0]
 8004744:	e022      	b.n	800478c <_printf_i+0x7c>
 8004746:	0010      	movs	r0, r2
 8004748:	3863      	subs	r0, #99	@ 0x63
 800474a:	2815      	cmp	r0, #21
 800474c:	d8f7      	bhi.n	800473e <_printf_i+0x2e>
 800474e:	f7fb fcf7 	bl	8000140 <__gnu_thumb1_case_shi>
 8004752:	0016      	.short	0x0016
 8004754:	fff6001f 	.word	0xfff6001f
 8004758:	fff6fff6 	.word	0xfff6fff6
 800475c:	001ffff6 	.word	0x001ffff6
 8004760:	fff6fff6 	.word	0xfff6fff6
 8004764:	fff6fff6 	.word	0xfff6fff6
 8004768:	0036009f 	.word	0x0036009f
 800476c:	fff6007e 	.word	0xfff6007e
 8004770:	00b0fff6 	.word	0x00b0fff6
 8004774:	0036fff6 	.word	0x0036fff6
 8004778:	fff6fff6 	.word	0xfff6fff6
 800477c:	0082      	.short	0x0082
 800477e:	0025      	movs	r5, r4
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	3542      	adds	r5, #66	@ 0x42
 8004784:	1d11      	adds	r1, r2, #4
 8004786:	6019      	str	r1, [r3, #0]
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	702b      	strb	r3, [r5, #0]
 800478c:	2301      	movs	r3, #1
 800478e:	e09e      	b.n	80048ce <_printf_i+0x1be>
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	6809      	ldr	r1, [r1, #0]
 8004794:	1d02      	adds	r2, r0, #4
 8004796:	060d      	lsls	r5, r1, #24
 8004798:	d50b      	bpl.n	80047b2 <_printf_i+0xa2>
 800479a:	6806      	ldr	r6, [r0, #0]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	2e00      	cmp	r6, #0
 80047a0:	da03      	bge.n	80047aa <_printf_i+0x9a>
 80047a2:	232d      	movs	r3, #45	@ 0x2d
 80047a4:	9a03      	ldr	r2, [sp, #12]
 80047a6:	4276      	negs	r6, r6
 80047a8:	7013      	strb	r3, [r2, #0]
 80047aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004920 <_printf_i+0x210>)
 80047ac:	270a      	movs	r7, #10
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	e018      	b.n	80047e4 <_printf_i+0xd4>
 80047b2:	6806      	ldr	r6, [r0, #0]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	0649      	lsls	r1, r1, #25
 80047b8:	d5f1      	bpl.n	800479e <_printf_i+0x8e>
 80047ba:	b236      	sxth	r6, r6
 80047bc:	e7ef      	b.n	800479e <_printf_i+0x8e>
 80047be:	6808      	ldr	r0, [r1, #0]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	c940      	ldmia	r1!, {r6}
 80047c4:	0605      	lsls	r5, r0, #24
 80047c6:	d402      	bmi.n	80047ce <_printf_i+0xbe>
 80047c8:	0640      	lsls	r0, r0, #25
 80047ca:	d500      	bpl.n	80047ce <_printf_i+0xbe>
 80047cc:	b2b6      	uxth	r6, r6
 80047ce:	6019      	str	r1, [r3, #0]
 80047d0:	4b53      	ldr	r3, [pc, #332]	@ (8004920 <_printf_i+0x210>)
 80047d2:	270a      	movs	r7, #10
 80047d4:	9304      	str	r3, [sp, #16]
 80047d6:	2a6f      	cmp	r2, #111	@ 0x6f
 80047d8:	d100      	bne.n	80047dc <_printf_i+0xcc>
 80047da:	3f02      	subs	r7, #2
 80047dc:	0023      	movs	r3, r4
 80047de:	2200      	movs	r2, #0
 80047e0:	3343      	adds	r3, #67	@ 0x43
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	6863      	ldr	r3, [r4, #4]
 80047e6:	60a3      	str	r3, [r4, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	db06      	blt.n	80047fa <_printf_i+0xea>
 80047ec:	2104      	movs	r1, #4
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	9d03      	ldr	r5, [sp, #12]
 80047f2:	438a      	bics	r2, r1
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	4333      	orrs	r3, r6
 80047f8:	d00c      	beq.n	8004814 <_printf_i+0x104>
 80047fa:	9d03      	ldr	r5, [sp, #12]
 80047fc:	0030      	movs	r0, r6
 80047fe:	0039      	movs	r1, r7
 8004800:	f7fb fd2e 	bl	8000260 <__aeabi_uidivmod>
 8004804:	9b04      	ldr	r3, [sp, #16]
 8004806:	3d01      	subs	r5, #1
 8004808:	5c5b      	ldrb	r3, [r3, r1]
 800480a:	702b      	strb	r3, [r5, #0]
 800480c:	0033      	movs	r3, r6
 800480e:	0006      	movs	r6, r0
 8004810:	429f      	cmp	r7, r3
 8004812:	d9f3      	bls.n	80047fc <_printf_i+0xec>
 8004814:	2f08      	cmp	r7, #8
 8004816:	d109      	bne.n	800482c <_printf_i+0x11c>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	07db      	lsls	r3, r3, #31
 800481c:	d506      	bpl.n	800482c <_printf_i+0x11c>
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	6923      	ldr	r3, [r4, #16]
 8004822:	429a      	cmp	r2, r3
 8004824:	dc02      	bgt.n	800482c <_printf_i+0x11c>
 8004826:	2330      	movs	r3, #48	@ 0x30
 8004828:	3d01      	subs	r5, #1
 800482a:	702b      	strb	r3, [r5, #0]
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	1b5b      	subs	r3, r3, r5
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	9b07      	ldr	r3, [sp, #28]
 8004834:	0021      	movs	r1, r4
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	9805      	ldr	r0, [sp, #20]
 800483a:	9b06      	ldr	r3, [sp, #24]
 800483c:	aa09      	add	r2, sp, #36	@ 0x24
 800483e:	f7ff fef7 	bl	8004630 <_printf_common>
 8004842:	3001      	adds	r0, #1
 8004844:	d148      	bne.n	80048d8 <_printf_i+0x1c8>
 8004846:	2001      	movs	r0, #1
 8004848:	4240      	negs	r0, r0
 800484a:	b00b      	add	sp, #44	@ 0x2c
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484e:	2220      	movs	r2, #32
 8004850:	6809      	ldr	r1, [r1, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	2278      	movs	r2, #120	@ 0x78
 8004858:	4932      	ldr	r1, [pc, #200]	@ (8004924 <_printf_i+0x214>)
 800485a:	9104      	str	r1, [sp, #16]
 800485c:	0021      	movs	r1, r4
 800485e:	3145      	adds	r1, #69	@ 0x45
 8004860:	700a      	strb	r2, [r1, #0]
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	c940      	ldmia	r1!, {r6}
 8004868:	0610      	lsls	r0, r2, #24
 800486a:	d402      	bmi.n	8004872 <_printf_i+0x162>
 800486c:	0650      	lsls	r0, r2, #25
 800486e:	d500      	bpl.n	8004872 <_printf_i+0x162>
 8004870:	b2b6      	uxth	r6, r6
 8004872:	6019      	str	r1, [r3, #0]
 8004874:	07d3      	lsls	r3, r2, #31
 8004876:	d502      	bpl.n	800487e <_printf_i+0x16e>
 8004878:	2320      	movs	r3, #32
 800487a:	4313      	orrs	r3, r2
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	2e00      	cmp	r6, #0
 8004880:	d001      	beq.n	8004886 <_printf_i+0x176>
 8004882:	2710      	movs	r7, #16
 8004884:	e7aa      	b.n	80047dc <_printf_i+0xcc>
 8004886:	2220      	movs	r2, #32
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	4393      	bics	r3, r2
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	e7f8      	b.n	8004882 <_printf_i+0x172>
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	680d      	ldr	r5, [r1, #0]
 8004894:	1d10      	adds	r0, r2, #4
 8004896:	6949      	ldr	r1, [r1, #20]
 8004898:	6018      	str	r0, [r3, #0]
 800489a:	6813      	ldr	r3, [r2, #0]
 800489c:	062e      	lsls	r6, r5, #24
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0x194>
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	e002      	b.n	80048aa <_printf_i+0x19a>
 80048a4:	066d      	lsls	r5, r5, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0x190>
 80048a8:	8019      	strh	r1, [r3, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	9d03      	ldr	r5, [sp, #12]
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	e7bf      	b.n	8004832 <_printf_i+0x122>
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	1d11      	adds	r1, r2, #4
 80048b6:	6019      	str	r1, [r3, #0]
 80048b8:	6815      	ldr	r5, [r2, #0]
 80048ba:	2100      	movs	r1, #0
 80048bc:	0028      	movs	r0, r5
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	f000 f986 	bl	8004bd0 <memchr>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d001      	beq.n	80048cc <_printf_i+0x1bc>
 80048c8:	1b40      	subs	r0, r0, r5
 80048ca:	6060      	str	r0, [r4, #4]
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	6123      	str	r3, [r4, #16]
 80048d0:	2300      	movs	r3, #0
 80048d2:	9a03      	ldr	r2, [sp, #12]
 80048d4:	7013      	strb	r3, [r2, #0]
 80048d6:	e7ac      	b.n	8004832 <_printf_i+0x122>
 80048d8:	002a      	movs	r2, r5
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	9906      	ldr	r1, [sp, #24]
 80048de:	9805      	ldr	r0, [sp, #20]
 80048e0:	9d07      	ldr	r5, [sp, #28]
 80048e2:	47a8      	blx	r5
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0ae      	beq.n	8004846 <_printf_i+0x136>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	079b      	lsls	r3, r3, #30
 80048ec:	d415      	bmi.n	800491a <_printf_i+0x20a>
 80048ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048f0:	68e0      	ldr	r0, [r4, #12]
 80048f2:	4298      	cmp	r0, r3
 80048f4:	daa9      	bge.n	800484a <_printf_i+0x13a>
 80048f6:	0018      	movs	r0, r3
 80048f8:	e7a7      	b.n	800484a <_printf_i+0x13a>
 80048fa:	0022      	movs	r2, r4
 80048fc:	2301      	movs	r3, #1
 80048fe:	9906      	ldr	r1, [sp, #24]
 8004900:	9805      	ldr	r0, [sp, #20]
 8004902:	9e07      	ldr	r6, [sp, #28]
 8004904:	3219      	adds	r2, #25
 8004906:	47b0      	blx	r6
 8004908:	3001      	adds	r0, #1
 800490a:	d09c      	beq.n	8004846 <_printf_i+0x136>
 800490c:	3501      	adds	r5, #1
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	42ab      	cmp	r3, r5
 8004916:	dcf0      	bgt.n	80048fa <_printf_i+0x1ea>
 8004918:	e7e9      	b.n	80048ee <_printf_i+0x1de>
 800491a:	2500      	movs	r5, #0
 800491c:	e7f7      	b.n	800490e <_printf_i+0x1fe>
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	08004cd2 	.word	0x08004cd2
 8004924:	08004ce3 	.word	0x08004ce3

08004928 <__sflush_r>:
 8004928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800492a:	220c      	movs	r2, #12
 800492c:	5e8b      	ldrsh	r3, [r1, r2]
 800492e:	0005      	movs	r5, r0
 8004930:	000c      	movs	r4, r1
 8004932:	071a      	lsls	r2, r3, #28
 8004934:	d456      	bmi.n	80049e4 <__sflush_r+0xbc>
 8004936:	684a      	ldr	r2, [r1, #4]
 8004938:	2a00      	cmp	r2, #0
 800493a:	dc02      	bgt.n	8004942 <__sflush_r+0x1a>
 800493c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800493e:	2a00      	cmp	r2, #0
 8004940:	dd4e      	ble.n	80049e0 <__sflush_r+0xb8>
 8004942:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004944:	2f00      	cmp	r7, #0
 8004946:	d04b      	beq.n	80049e0 <__sflush_r+0xb8>
 8004948:	2200      	movs	r2, #0
 800494a:	2080      	movs	r0, #128	@ 0x80
 800494c:	682e      	ldr	r6, [r5, #0]
 800494e:	602a      	str	r2, [r5, #0]
 8004950:	001a      	movs	r2, r3
 8004952:	0140      	lsls	r0, r0, #5
 8004954:	6a21      	ldr	r1, [r4, #32]
 8004956:	4002      	ands	r2, r0
 8004958:	4203      	tst	r3, r0
 800495a:	d033      	beq.n	80049c4 <__sflush_r+0x9c>
 800495c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800495e:	89a3      	ldrh	r3, [r4, #12]
 8004960:	075b      	lsls	r3, r3, #29
 8004962:	d506      	bpl.n	8004972 <__sflush_r+0x4a>
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <__sflush_r+0x4a>
 800496e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004970:	1ad2      	subs	r2, r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	0028      	movs	r0, r5
 8004976:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	47b8      	blx	r7
 800497c:	89a2      	ldrh	r2, [r4, #12]
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	d106      	bne.n	8004990 <__sflush_r+0x68>
 8004982:	6829      	ldr	r1, [r5, #0]
 8004984:	291d      	cmp	r1, #29
 8004986:	d846      	bhi.n	8004a16 <__sflush_r+0xee>
 8004988:	4b29      	ldr	r3, [pc, #164]	@ (8004a30 <__sflush_r+0x108>)
 800498a:	40cb      	lsrs	r3, r1
 800498c:	07db      	lsls	r3, r3, #31
 800498e:	d542      	bpl.n	8004a16 <__sflush_r+0xee>
 8004990:	2300      	movs	r3, #0
 8004992:	6063      	str	r3, [r4, #4]
 8004994:	6923      	ldr	r3, [r4, #16]
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	04d2      	lsls	r2, r2, #19
 800499a:	d505      	bpl.n	80049a8 <__sflush_r+0x80>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <__sflush_r+0x7e>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d100      	bne.n	80049a8 <__sflush_r+0x80>
 80049a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80049a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049aa:	602e      	str	r6, [r5, #0]
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d017      	beq.n	80049e0 <__sflush_r+0xb8>
 80049b0:	0023      	movs	r3, r4
 80049b2:	3344      	adds	r3, #68	@ 0x44
 80049b4:	4299      	cmp	r1, r3
 80049b6:	d002      	beq.n	80049be <__sflush_r+0x96>
 80049b8:	0028      	movs	r0, r5
 80049ba:	f7ff fbf9 	bl	80041b0 <_free_r>
 80049be:	2300      	movs	r3, #0
 80049c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80049c2:	e00d      	b.n	80049e0 <__sflush_r+0xb8>
 80049c4:	2301      	movs	r3, #1
 80049c6:	0028      	movs	r0, r5
 80049c8:	47b8      	blx	r7
 80049ca:	0002      	movs	r2, r0
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d1c6      	bne.n	800495e <__sflush_r+0x36>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0c3      	beq.n	800495e <__sflush_r+0x36>
 80049d6:	2b1d      	cmp	r3, #29
 80049d8:	d001      	beq.n	80049de <__sflush_r+0xb6>
 80049da:	2b16      	cmp	r3, #22
 80049dc:	d11a      	bne.n	8004a14 <__sflush_r+0xec>
 80049de:	602e      	str	r6, [r5, #0]
 80049e0:	2000      	movs	r0, #0
 80049e2:	e01e      	b.n	8004a22 <__sflush_r+0xfa>
 80049e4:	690e      	ldr	r6, [r1, #16]
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	d0fa      	beq.n	80049e0 <__sflush_r+0xb8>
 80049ea:	680f      	ldr	r7, [r1, #0]
 80049ec:	600e      	str	r6, [r1, #0]
 80049ee:	1bba      	subs	r2, r7, r6
 80049f0:	9201      	str	r2, [sp, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	079b      	lsls	r3, r3, #30
 80049f6:	d100      	bne.n	80049fa <__sflush_r+0xd2>
 80049f8:	694a      	ldr	r2, [r1, #20]
 80049fa:	60a2      	str	r2, [r4, #8]
 80049fc:	9b01      	ldr	r3, [sp, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	ddee      	ble.n	80049e0 <__sflush_r+0xb8>
 8004a02:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a04:	0032      	movs	r2, r6
 8004a06:	001f      	movs	r7, r3
 8004a08:	0028      	movs	r0, r5
 8004a0a:	9b01      	ldr	r3, [sp, #4]
 8004a0c:	6a21      	ldr	r1, [r4, #32]
 8004a0e:	47b8      	blx	r7
 8004a10:	2800      	cmp	r0, #0
 8004a12:	dc07      	bgt.n	8004a24 <__sflush_r+0xfc>
 8004a14:	89a2      	ldrh	r2, [r4, #12]
 8004a16:	2340      	movs	r3, #64	@ 0x40
 8004a18:	2001      	movs	r0, #1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	4240      	negs	r0, r0
 8004a22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a24:	9b01      	ldr	r3, [sp, #4]
 8004a26:	1836      	adds	r6, r6, r0
 8004a28:	1a1b      	subs	r3, r3, r0
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	e7e6      	b.n	80049fc <__sflush_r+0xd4>
 8004a2e:	46c0      	nop			@ (mov r8, r8)
 8004a30:	20400001 	.word	0x20400001

08004a34 <_fflush_r>:
 8004a34:	690b      	ldr	r3, [r1, #16]
 8004a36:	b570      	push	{r4, r5, r6, lr}
 8004a38:	0005      	movs	r5, r0
 8004a3a:	000c      	movs	r4, r1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <_fflush_r+0x12>
 8004a40:	2500      	movs	r5, #0
 8004a42:	0028      	movs	r0, r5
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d004      	beq.n	8004a54 <_fflush_r+0x20>
 8004a4a:	6a03      	ldr	r3, [r0, #32]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <_fflush_r+0x20>
 8004a50:	f7ff f99a 	bl	8003d88 <__sinit>
 8004a54:	220c      	movs	r2, #12
 8004a56:	5ea3      	ldrsh	r3, [r4, r2]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f1      	beq.n	8004a40 <_fflush_r+0xc>
 8004a5c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a5e:	07d2      	lsls	r2, r2, #31
 8004a60:	d404      	bmi.n	8004a6c <_fflush_r+0x38>
 8004a62:	059b      	lsls	r3, r3, #22
 8004a64:	d402      	bmi.n	8004a6c <_fflush_r+0x38>
 8004a66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a68:	f7ff fb9f 	bl	80041aa <__retarget_lock_acquire_recursive>
 8004a6c:	0028      	movs	r0, r5
 8004a6e:	0021      	movs	r1, r4
 8004a70:	f7ff ff5a 	bl	8004928 <__sflush_r>
 8004a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a76:	0005      	movs	r5, r0
 8004a78:	07db      	lsls	r3, r3, #31
 8004a7a:	d4e2      	bmi.n	8004a42 <_fflush_r+0xe>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	059b      	lsls	r3, r3, #22
 8004a80:	d4df      	bmi.n	8004a42 <_fflush_r+0xe>
 8004a82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a84:	f7ff fb92 	bl	80041ac <__retarget_lock_release_recursive>
 8004a88:	e7db      	b.n	8004a42 <_fflush_r+0xe>
	...

08004a8c <__swhatbuf_r>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	000e      	movs	r6, r1
 8004a90:	001d      	movs	r5, r3
 8004a92:	230e      	movs	r3, #14
 8004a94:	5ec9      	ldrsh	r1, [r1, r3]
 8004a96:	0014      	movs	r4, r2
 8004a98:	b096      	sub	sp, #88	@ 0x58
 8004a9a:	2900      	cmp	r1, #0
 8004a9c:	da0c      	bge.n	8004ab8 <__swhatbuf_r+0x2c>
 8004a9e:	89b2      	ldrh	r2, [r6, #12]
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	4019      	ands	r1, r3
 8004aa6:	421a      	tst	r2, r3
 8004aa8:	d114      	bne.n	8004ad4 <__swhatbuf_r+0x48>
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	2000      	movs	r0, #0
 8004ab0:	6029      	str	r1, [r5, #0]
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	b016      	add	sp, #88	@ 0x58
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	466a      	mov	r2, sp
 8004aba:	f000 f853 	bl	8004b64 <_fstat_r>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	dbed      	blt.n	8004a9e <__swhatbuf_r+0x12>
 8004ac2:	23f0      	movs	r3, #240	@ 0xf0
 8004ac4:	9901      	ldr	r1, [sp, #4]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	4019      	ands	r1, r3
 8004aca:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <__swhatbuf_r+0x50>)
 8004acc:	18c9      	adds	r1, r1, r3
 8004ace:	424b      	negs	r3, r1
 8004ad0:	4159      	adcs	r1, r3
 8004ad2:	e7ea      	b.n	8004aaa <__swhatbuf_r+0x1e>
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	2340      	movs	r3, #64	@ 0x40
 8004ad8:	e7e9      	b.n	8004aae <__swhatbuf_r+0x22>
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	ffffe000 	.word	0xffffe000

08004ae0 <__smakebuf_r>:
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae2:	2602      	movs	r6, #2
 8004ae4:	898b      	ldrh	r3, [r1, #12]
 8004ae6:	0005      	movs	r5, r0
 8004ae8:	000c      	movs	r4, r1
 8004aea:	b085      	sub	sp, #20
 8004aec:	4233      	tst	r3, r6
 8004aee:	d007      	beq.n	8004b00 <__smakebuf_r+0x20>
 8004af0:	0023      	movs	r3, r4
 8004af2:	3347      	adds	r3, #71	@ 0x47
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	2301      	movs	r3, #1
 8004afa:	6163      	str	r3, [r4, #20]
 8004afc:	b005      	add	sp, #20
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b00:	ab03      	add	r3, sp, #12
 8004b02:	aa02      	add	r2, sp, #8
 8004b04:	f7ff ffc2 	bl	8004a8c <__swhatbuf_r>
 8004b08:	9f02      	ldr	r7, [sp, #8]
 8004b0a:	9001      	str	r0, [sp, #4]
 8004b0c:	0039      	movs	r1, r7
 8004b0e:	0028      	movs	r0, r5
 8004b10:	f7ff fbba 	bl	8004288 <_malloc_r>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d108      	bne.n	8004b2a <__smakebuf_r+0x4a>
 8004b18:	220c      	movs	r2, #12
 8004b1a:	5ea3      	ldrsh	r3, [r4, r2]
 8004b1c:	059a      	lsls	r2, r3, #22
 8004b1e:	d4ed      	bmi.n	8004afc <__smakebuf_r+0x1c>
 8004b20:	2203      	movs	r2, #3
 8004b22:	4393      	bics	r3, r2
 8004b24:	431e      	orrs	r6, r3
 8004b26:	81a6      	strh	r6, [r4, #12]
 8004b28:	e7e2      	b.n	8004af0 <__smakebuf_r+0x10>
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	89a2      	ldrh	r2, [r4, #12]
 8004b2e:	6020      	str	r0, [r4, #0]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	6120      	str	r0, [r4, #16]
 8004b38:	6167      	str	r7, [r4, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00c      	beq.n	8004b58 <__smakebuf_r+0x78>
 8004b3e:	0028      	movs	r0, r5
 8004b40:	230e      	movs	r3, #14
 8004b42:	5ee1      	ldrsh	r1, [r4, r3]
 8004b44:	f000 f820 	bl	8004b88 <_isatty_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d005      	beq.n	8004b58 <__smakebuf_r+0x78>
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	89a2      	ldrh	r2, [r4, #12]
 8004b50:	439a      	bics	r2, r3
 8004b52:	3b02      	subs	r3, #2
 8004b54:	4313      	orrs	r3, r2
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	9a01      	ldr	r2, [sp, #4]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	81a3      	strh	r3, [r4, #12]
 8004b60:	e7cc      	b.n	8004afc <__smakebuf_r+0x1c>
	...

08004b64 <_fstat_r>:
 8004b64:	2300      	movs	r3, #0
 8004b66:	b570      	push	{r4, r5, r6, lr}
 8004b68:	4d06      	ldr	r5, [pc, #24]	@ (8004b84 <_fstat_r+0x20>)
 8004b6a:	0004      	movs	r4, r0
 8004b6c:	0008      	movs	r0, r1
 8004b6e:	0011      	movs	r1, r2
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	f7fb fe25 	bl	80007c0 <_fstat>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d103      	bne.n	8004b82 <_fstat_r+0x1e>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d000      	beq.n	8004b82 <_fstat_r+0x1e>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	20000bdc 	.word	0x20000bdc

08004b88 <_isatty_r>:
 8004b88:	2300      	movs	r3, #0
 8004b8a:	b570      	push	{r4, r5, r6, lr}
 8004b8c:	4d06      	ldr	r5, [pc, #24]	@ (8004ba8 <_isatty_r+0x20>)
 8004b8e:	0004      	movs	r4, r0
 8004b90:	0008      	movs	r0, r1
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	f7fb fe19 	bl	80007ca <_isatty>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d103      	bne.n	8004ba4 <_isatty_r+0x1c>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d000      	beq.n	8004ba4 <_isatty_r+0x1c>
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	bd70      	pop	{r4, r5, r6, pc}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	20000bdc 	.word	0x20000bdc

08004bac <_sbrk_r>:
 8004bac:	2300      	movs	r3, #0
 8004bae:	b570      	push	{r4, r5, r6, lr}
 8004bb0:	4d06      	ldr	r5, [pc, #24]	@ (8004bcc <_sbrk_r+0x20>)
 8004bb2:	0004      	movs	r4, r0
 8004bb4:	0008      	movs	r0, r1
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	f7fb fe0c 	bl	80007d4 <_sbrk>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d103      	bne.n	8004bc8 <_sbrk_r+0x1c>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d000      	beq.n	8004bc8 <_sbrk_r+0x1c>
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	20000bdc 	.word	0x20000bdc

08004bd0 <memchr>:
 8004bd0:	b2c9      	uxtb	r1, r1
 8004bd2:	1882      	adds	r2, r0, r2
 8004bd4:	4290      	cmp	r0, r2
 8004bd6:	d101      	bne.n	8004bdc <memchr+0xc>
 8004bd8:	2000      	movs	r0, #0
 8004bda:	4770      	bx	lr
 8004bdc:	7803      	ldrb	r3, [r0, #0]
 8004bde:	428b      	cmp	r3, r1
 8004be0:	d0fb      	beq.n	8004bda <memchr+0xa>
 8004be2:	3001      	adds	r0, #1
 8004be4:	e7f6      	b.n	8004bd4 <memchr+0x4>
	...

08004be8 <_init>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr

08004bf4 <_fini>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr
