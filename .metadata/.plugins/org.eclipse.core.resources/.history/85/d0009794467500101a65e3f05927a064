/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"
#include "usbd_hid.h"
#include <stdio.h>
#include "eeprom_emulation.h"
extern USBD_HandleTypeDef hUsbDeviceFS;

/* EEPROM Emulation -----------------------------------------------*/
#define FLASH_END_ADDRESS       0x08007FFFU
#define FLASH_STORAGE_ADDRESS   (FLASH_END_ADDRESS - FLASH_PAGE_SIZE + 1U)

///* Device HID Mode -----------------------------------------------*/
//typedef enum {
//  MODE_KEYBOARD = 0,
//  MODE_GAMEPAD = 1,
//  MODE_DS5 = 2
//} DeviceMode_t;

DeviceMode_t g_current_mode;

/* Private variables -----------------------------------------------*/
UART_HandleTypeDef huart2;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
extern USBD_HandleTypeDef hUsbDeviceFS;


static uint8_t gamepad_report[2] = {0x00, 0x00};

typedef struct __attribute__((packed)) {
    uint8_t reportId;       // Always 0x01
    uint8_t axes[6];        // Axes: X, Y, Z, Rz, Rx, Ry
    uint8_t vendorByte1;    // Unused
    uint8_t hatSwitch;      // Hat (0â€“7, 0x0F = neutral)
    uint16_t buttons;       // 15 buttons, LSB first
    uint8_t vendorData[53]; // Padding/vendor-defined
} GAMEPAD_Report_t;


void SendGamepadReport(void) {
     GAMEPAD_Report_t report = {0};

     report.reportId = 0x01;
     report.axes[0] = 128; // X
     report.axes[1] = 128; // Y
     report.axes[2] = 128; // Z
     report.axes[3] = 128; // Rz
     report.axes[4] = 128; // Rx
     report.axes[5] = 128; // Ry

     report.vendorByte1 = 0x00;

     report.hatSwitch = 0x0F; // neutral

     report.buttons = 0x0000; // no buttons pressed

     // Optional: fill vendorData[0~52] if needed

     USBD_HID_SendReport(&hUsbDeviceFS, &report, sizeof(report));
 }


// For UART debugging. Critical for mystery reason(s)
int _write(int file, char *ptr, int len)
{
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
  return len;
}

int main(void)
{
	// System initializations
	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_USB_DEVICE_Init();

	// HID mode initialization
	g_current_mode = (DeviceMode_t)Flash_ReadLastValue();

	// Main loop

  static GAMEPAD_Report_t report;

  uint16_t last = Flash_ReadLastValue();

  printf("Got here \r\n");

  report.reportId = 0x01;
  report.axes[0] = 128;
  report.axes[1] = 128;
  report.axes[2] = 128;
  report.axes[3] = 128;
  report.axes[4] = 128;
  report.axes[5] = 128;
  report.vendorByte1 = 0x00;
  report.hatSwitch = 0x0F;  // Neutral
  memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional

  while (1)
   {
//     /* --- Press all 15 buttons --- */
//     // 0x7FFF is a bitmask with the first 15 bits set to 1.
//     report.buttons = 0x7FFF;
//     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
//     HAL_Delay(200); // Wait 0.2 seconds
//
//     /* --- Release all buttons --- */
//     report.buttons = 0x0000;
//     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
//     HAL_Delay(200); // Wait 0.2 seconds


      uint16_t last = Flash_ReadLastValue();

	 printf("Last value \r\n");

     // EEPROM Stuff
	 char msg[32];
//	 printf(msg, "Last value: %u\r\n", last);

	 uint16_t next = (last == 0xFFFF) ? 0 : last + 1;

	 if (Flash_Append(next) != 0) {
		 printf("Flash append failed!\r\n");
	 } else {
		 printf("Value written.\r\n");
	 }

	 HAL_Delay(1000);
   }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
