/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  *
  * This is the main code of the retro-controller
  *
  * Structure:
  * 1. Initialize the system
  * 2. Read flash and initialize corresponding HID profile
  * 3. Enter main loop
  * 	a. If mode switch interrupt pressed, cycle mode and reset
  * 	b. Read buttons
  * 	c. Send HID reports
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"
#include "usbd_hid.h"

/* USER CODE BEGIN ... */
#include <stdio.h>
#include "eeprom_emulation.h"
#include "hid_modes.h"
extern USBD_HandleTypeDef hUsbDeviceFS;
DeviceMode_t g_current_mode;
/* USER CODE END ... */

/* Private variables -----------------------------------------------*/
UART_HandleTypeDef huart2;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
extern USBD_HandleTypeDef hUsbDeviceFS;

/* USER CODE BEGIN ... */
static uint8_t gamepad_report2[2] = {0x00};
static uint8_t ds5_report[2] = {0x00, 0x00};

typedef struct __attribute__((packed)) {
    uint8_t reportId;       // Always 0x01
    uint8_t axes[6];        // Axes: X, Y, Z, Rz, Rx, Ry
    uint8_t vendorByte1;    // Unused
    uint8_t hatSwitch;      // Hat (0â€“7, 0x0F = neutral)
    uint16_t buttons;       // 15 buttons, LSB first
    uint8_t vendorData[53]; // Padding/vendor-defined
} DS5_Report_t;


void SendGamepadReport(void) {
     DS5_Report_t report = {0};

     report.reportId = 0x01;
     report.axes[0] = 128; // X (unused)
     report.axes[1] = 128; // Y (unused)
     report.axes[2] = 128; // Z (unused)
     report.axes[3] = 128; // Rz (unused)
     report.axes[4] = 128; // Rx (unused)
     report.axes[5] = 128; // Ry (unused)

     report.vendorByte1 = 0x00; // for padding structure only

     report.hatSwitch = 0x0F; // neutral d-pad

     report.buttons = 0x0000; // neutral action buttons

     USBD_HID_SendReport(&hUsbDeviceFS, &report, sizeof(report));
 }


// For UART debugging. Critical for mystery reason(s).
int _write(int file, char *ptr, int len)
{
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
  return len;
}

/* USER CODE END ... */

int main(void)
{
	// 1. System initializations
	HAL_Init();
	SystemClock_Config();
	MX_USART2_UART_Init();
	MX_GPIO_Init();

	/* USER CODE BEGIN ... */
	// 2. HID mode initialization
//	g_current_mode = (DeviceMode_t)Flash_ReadLastValue();
	g_current_mode = MODE_DS5;
//	g_current_mode = MODE_GAMEPAD;

	// The HID arrays are statically allocated
	// Overwrite certain parameters manually based on HID profile
//	USBD_HID_UpdateDescriptors();
	MX_USB_DEVICE_Init();

	static DS5_Report_t report;

	report.reportId = 0x01;
	report.axes[0] = 128;
	report.axes[1] = 128;
	report.axes[2] = 128;
	report.axes[3] = 128;
	report.axes[4] = 128;
	report.axes[5] = 128;
	report.vendorByte1 = 0x00;
	report.hatSwitch = 0x0F;  // Neutral
	memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional

//	uint16_t last = Flash_ReadLastValue();

	// 3. Main loop

	while (1)
	{

			printf("Printing GPIO 0: \r\n");
			printf("Printing GPIO 0: %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
	     /* --- Press all 15 buttons --- */
	     // 0x7FFF is a bitmask with the first 15 bits set to 1.
//	     report.buttons = 0x7FFF;
	     report.buttons = 0x7F01;
	     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
	     HAL_Delay(50); // Wait 0.2 seconds

	     /* --- Release all buttons --- */
	     report.buttons = 0x0000;
	     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
	     HAL_Delay(50); // Wait 0.2 seconds


//		uint16_t last = Flash_ReadLastValue();

		printf("Main Loop is Looping \r\n");

	// EEPROM Stuff
	//	 char msg[32];
	//	 printf(msg, "Last value: %u\r\n", last);


	//	 cycle_state_and_reset();

	//	 uint16_t next = (last == 0xFFFF) ? 0 : last + 1;
	//	 if (Flash_Append(next) != 0) {
	//		 printf("Flash append failed!\r\n");
	//	 } else {
	//		 printf("Value written.\r\n");
	//	 }

		HAL_Delay(50);
	}

  /* USER CODE END ... */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Configure GPIO pin : PA0 (Button Input) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
  GPIO_InitStruct.Pull = GPIO_PULLUP;           // Enable internal pull-up (button active low)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);

//  // Disable EXTI IRQ temporarily
//  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
//
//  // Clear any pending IRQ
//  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
//  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
//  NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
//  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
//
//  // Configure EXTI for falling edge only
//  EXTI->FTSR |= EXTI_FTSR_TR0;  // Falling trigger enabled for line 0
//  EXTI->RTSR &= ~EXTI_RTSR_TR0; // Rising trigger disabled for line 0
//
//  // Enable EXTI IRQ
//  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
//  printf("UART initialized!\r\n");
//  printf("EXTI FTSR: 0x%08lX\n", EXTI->FTSR);
//  printf("EXTI RTSR: 0x%08lX\n", EXTI->RTSR);

}

volatile uint32_t last_button_press_time = 0;
volatile uint8_t button_pressed_flag = 0;
#define DEBOUNCE_INTERVAL_MS 200

void EXTI0_1_IRQHandler(void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);  // Clear interrupt flag

		uint32_t now = HAL_GetTick();

		if (now - last_button_press_time > DEBOUNCE_INTERVAL_MS) {
			HAL_Delay(5);
			 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
			      {
				printf("Printing GPIO 0: %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
				printf("EXTI FTSR: 0x%08lX\n", EXTI->FTSR);
				printf("EXTI RTSR: 0x%08lX\n", EXTI->RTSR);
				printf("GPIO PA0 hit.\r\n");
	//		   cycle_state_and_reset();
			   last_button_press_time = now;
			      }
		}
    }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
