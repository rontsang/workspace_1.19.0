/*
 * hid_profiles.c
 *
 *  Created on: Aug 9, 2025
 *      Author: rntsang
 */

#include "hid_profiles.h"

//extern uint8_t USBD_HID_CfgFSDesc[USB_HID_CONFIG_DESC_SIZ];

__ALIGN_BEGIN const uint8_t DS5_HID_ReportDesc[] __ALIGN_END = {
    0x05, 0x01,       // Usage Page (Generic Desktop)
    0x09, 0x05,       // Usage (Gamepad)
    0xA1, 0x01,       // Collection (Application)
    0x85, 0x01,       // Report ID (1)

    // Axes (6 x 8-bit)
    0x09, 0x30, 0x09, 0x31, 0x09, 0x32,
    0x09, 0x35, 0x09, 0x33, 0x09, 0x34,
    0x15, 0x00,
    0x26, 0xFF, 0x00,
    0x75, 0x08,
    0x95, 0x06,
    0x81, 0x02,

    // Vendor-defined byte
    0x06, 0x00, 0xFF,
    0x09, 0x20,
    0x75, 0x08,
    0x95, 0x01,
    0x81, 0x02,

    // Hat switch
    0x05, 0x01,
    0x09, 0x39,
    0x15, 0x00,
    0x25, 0x07,
    0x35, 0x00,
    0x46, 0x3B, 0x01,
    0x65, 0x14,
    0x75, 0x08,
    0x95, 0x01,
    0x81, 0x42,
    0x65, 0x00,

    // Buttons 1–15
    0x05, 0x09,
    0x19, 0x01,
    0x29, 0x0F,
    0x15, 0x00,
    0x25, 0x01,
    0x75, 0x01,
    0x95, 0x0F,
    0x81, 0x02,

//     Padding
    0x75, 0x01,
    0x95, 0x01,
    0x81, 0x03,

    // Vendor-defined 53 bytes
    0x06, 0x00, 0xFF,
    0x09, 0x21,
    0x75, 0x08,
    0x95, 0x35,
    0x81, 0x02,

    0xC0
};


__ALIGN_BEGIN const uint8_t GAMEPAD_HID_ReportDesc[] __ALIGN_END = {
	0x05, 0x01,        // Usage Page (Generic Desktop)
	0x09, 0x05,        // Usage (Game Pad)
	0xA1, 0x01,        // Collection (Application)

	0x05, 0x09,        //   Usage Page (Button)
	0x19, 0x01,        //   Usage Minimum (Button 1)
	0x29, 0x0A,        //   Usage Maximum (Button 10)
	0x15, 0x00,        //   Logical Minimum (0)
	0x25, 0x01,        //   Logical Maximum (1)
	0x95, 0x0A,        //   Report Count (10 buttons)
	0x75, 0x01,        //   Report Size (1 bit per button)
	0x81, 0x02,        //   Input (Data, Variable, Absolute)

	// Padding to align to full byte (6 bits)
	0x95, 0x01,        //   Report Count (1)
	0x75, 0x06,        //   Report Size (6 bits)
	0x81, 0x03,        //   Input (Constant, Variable, Absolute) — padding

	0xC0               // End Collection
};

// New HID Report Descriptor for a standard 8-byte keyboard report
__ALIGN_BEGIN static uint8_t HID_KEYBOARD_ReportDesc[KEYBOARD_HID_REPORT_DESC_SIZE] __ALIGN_END =
{
  0x05, 0x01,       // Usage Page (Generic Desktop)
  0x09, 0x06,       // Usage (Keyboard)
  0xA1, 0x01,       // Collection (Application)
  0x05, 0x07,       //   Usage Page (Keyboard)
  0x19, 0xE0,       //   Usage Minimum (224)
  0x29, 0xE7,       //   Usage Maximum (231)
  0x15, 0x00,       //   Logical Minimum (0)
  0x25, 0x01,       //   Logical Maximum (1)
  0x75, 0x01,       //   Report Size (1)
  0x95, 0x08,       //   Report Count (8)
  0x81, 0x02,       //   Input (Data, Variable, Absolute)
  0x95, 0x01,       //   Report Count (1)
  0x75, 0x08,       //   Report Size (8)
  0x81, 0x01,       //   Input (Constant)
  0x95, 0x05,       //   Report Count (5)
  0x75, 0x01,       //   Report Size (1)
  0x05, 0x08,       //   Usage Page (LEDs)
  0x19, 0x01,       //   Usage Minimum (1)
  0x29, 0x05,       //   Usage Maximum (5)
  0x91, 0x02,       //   Output (Data, Variable, Absolute)
  0x95, 0x01,       //   Report Count (1)
  0x75, 0x03,       //   Report Size (3)
  0x91, 0x01,       //   Output (Constant)
  0x95, 0x06,       //   Report Count (6)
  0x75, 0x08,       //   Report Size (8)
  0x15, 0x00,       //   Logical Minimum (0)
  0x25, 0x65,       //   Logical Maximum (101)
  0x05, 0x07,       //   Usage Page (Keyboard)
  0x19, 0x00,       //   Usage Minimum (0)
  0x29, 0x65,       //   Usage Maximum (101)
  0x81, 0x00,       //   Input (Data, Array)
  0xC0              // End Collection
};

void USBD_HID_UpdateDescriptors(DeviceMode_t mode)
{
//  uint8_t *pCfg = USBD_HID_CfgFSDesc;
//
//  switch (mode)
//  {
//    case MODE_DS5:
//      pCfg[25] = (uint8_t)(DS5_HID_REPORT_DESC_SIZE);      // Report Descriptor size
//      pCfg[29] = DS5_HID_EPIN_ADDR;                        // Endpoint Address
//      pCfg[31] = (uint8_t)(DS5_HID_EPIN_SIZE);             // Endpoint Size
//      pCfg[33] = DS5_HID_FS_BINTERVAL;                     // Polling Interval
//      break;
//
//    case MODE_GAMEPAD:
//      pCfg[25] = (uint8_t)(GAMEPAD_HID_REPORT_DESC_SIZE); // Report Descriptor size
//      pCfg[29] = GAMEPAD_HID_EPIN_ADDR;                   // Endpoint Address
//      pCfg[31] = (uint8_t)(GAMEPAD_HID_EPIN_SIZE);        // Endpoint Size
//      pCfg[33] = GAMEPAD_HID_FS_BINTERVAL;                // Polling Interval
//      break;
//
//    default:
//      // Default to one mode for safety
//      break;
//  }
  // IMPORTANT: You must also patch USBD_HID_CfgHSDesc and
  // USBD_HID_OtherSpeedCfgDesc here in the same way to ensure they are consistent.
}


