
usb_hid_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004ac8  08004ac8  00005ac8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf0  08004bf0  000061d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004bf0  08004bf0  000061d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004bf0  08004bf0  000061d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00005bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08004bf8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  200001d8  08004dd0  000061d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  08004dd0  00006bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153f8  00000000  00000000  00006200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000400f  00000000  00000000  0001b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000079b2  00000000  00000000  0001f607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00026fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9e  00000000  00000000  00027ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdbb  00000000  00000000  00028c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018560  00000000  00000000  00044a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000906ba  00000000  00000000  0005cfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ed65b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002784  00000000  00000000  000ed6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000efe24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ab0 	.word	0x08004ab0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08004ab0 	.word	0x08004ab0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f806 	bl	8000268 <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__aeabi_idiv0>:
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_llsr>:
 800026c:	40d0      	lsrs	r0, r2
 800026e:	000b      	movs	r3, r1
 8000270:	40d1      	lsrs	r1, r2
 8000272:	469c      	mov	ip, r3
 8000274:	3a20      	subs	r2, #32
 8000276:	40d3      	lsrs	r3, r2
 8000278:	4318      	orrs	r0, r3
 800027a:	4252      	negs	r2, r2
 800027c:	4663      	mov	r3, ip
 800027e:	4093      	lsls	r3, r2
 8000280:	4318      	orrs	r0, r3
 8000282:	4770      	bx	lr

08000284 <Flash_Append>:

static uint32_t find_last_written_address(void);
static void erase_storage_page(void);

uint8_t Flash_Append(uint16_t data)
{
 8000284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return (result == HAL_OK) ? 0 : 1;
}

static uint32_t find_last_written_address(void)
{
    uint32_t address = FLASH_STORAGE_ADDRESS;
 8000286:	4c14      	ldr	r4, [pc, #80]	@ (80002d8 <Flash_Append+0x54>)
{
 8000288:	0005      	movs	r5, r0
 800028a:	0026      	movs	r6, r4
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
    {
        uint16_t value = *(volatile uint16_t*)address;
        if (value == 0xFFFF)
 800028c:	4a13      	ldr	r2, [pc, #76]	@ (80002dc <Flash_Append+0x58>)
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 800028e:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <Flash_Append+0x5c>)
        uint16_t value = *(volatile uint16_t*)address;
 8000290:	8821      	ldrh	r1, [r4, #0]
        if (value == 0xFFFF)
 8000292:	4291      	cmp	r1, r2
 8000294:	d010      	beq.n	80002b8 <Flash_Append+0x34>
            break;
        address += 2;
 8000296:	3402      	adds	r4, #2
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 8000298:	429c      	cmp	r4, r3
 800029a:	d1f9      	bne.n	8000290 <Flash_Append+0xc>
    return 0;
}

static void erase_storage_page(void)
{
    HAL_FLASH_Unlock();
 800029c:	f000 fb02 	bl	80008a4 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error;

    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80002a0:	2300      	movs	r3, #0
    erase.PageAddress = FLASH_STORAGE_ADDRESS;
    erase.NbPages = 1;

    HAL_FLASHEx_Erase(&erase, &page_error);
 80002a2:	4669      	mov	r1, sp
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80002a4:	9301      	str	r3, [sp, #4]
    HAL_FLASHEx_Erase(&erase, &page_error);
 80002a6:	a801      	add	r0, sp, #4
    erase.NbPages = 1;
 80002a8:	3301      	adds	r3, #1
 80002aa:	9303      	str	r3, [sp, #12]
    erase.PageAddress = FLASH_STORAGE_ADDRESS;
 80002ac:	9602      	str	r6, [sp, #8]
    HAL_FLASHEx_Erase(&erase, &page_error);
 80002ae:	f000 fbab 	bl	8000a08 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 80002b2:	f000 fb0b 	bl	80008cc <HAL_FLASH_Lock>
        address = FLASH_STORAGE_ADDRESS;
 80002b6:	4c08      	ldr	r4, [pc, #32]	@ (80002d8 <Flash_Append+0x54>)
    HAL_FLASH_Unlock();
 80002b8:	f000 faf4 	bl	80008a4 <HAL_FLASH_Unlock>
    HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 80002bc:	2300      	movs	r3, #0
 80002be:	0021      	movs	r1, r4
 80002c0:	002a      	movs	r2, r5
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 fb36 	bl	8000934 <HAL_FLASH_Program>
 80002c8:	0004      	movs	r4, r0
    return (result == HAL_OK) ? 0 : 1;
 80002ca:	1e63      	subs	r3, r4, #1
 80002cc:	419c      	sbcs	r4, r3
    HAL_FLASH_Lock();
 80002ce:	f000 fafd 	bl	80008cc <HAL_FLASH_Lock>
    return (result == HAL_OK) ? 0 : 1;
 80002d2:	b2e0      	uxtb	r0, r4
}
 80002d4:	b004      	add	sp, #16
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	08007c00 	.word	0x08007c00
 80002dc:	0000ffff 	.word	0x0000ffff
 80002e0:	08008000 	.word	0x08008000

080002e4 <Flash_ReadLastValue>:
    uint32_t address = FLASH_STORAGE_ADDRESS;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <Flash_ReadLastValue+0x34>)
{
 80002e6:	b570      	push	{r4, r5, r6, lr}
 80002e8:	0019      	movs	r1, r3
        if (value == 0xFFFF)
 80002ea:	4d0c      	ldr	r5, [pc, #48]	@ (800031c <Flash_ReadLastValue+0x38>)
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 80002ec:	4c0c      	ldr	r4, [pc, #48]	@ (8000320 <Flash_ReadLastValue+0x3c>)
        uint16_t value = *(volatile uint16_t*)address;
 80002ee:	881a      	ldrh	r2, [r3, #0]
 80002f0:	b290      	uxth	r0, r2
        if (value == 0xFFFF)
 80002f2:	42aa      	cmp	r2, r5
 80002f4:	d00c      	beq.n	8000310 <Flash_ReadLastValue+0x2c>
        address += 2;
 80002f6:	3302      	adds	r3, #2
    while (address < (FLASH_STORAGE_ADDRESS + FLASH_PAGE_SIZE))
 80002f8:	42a3      	cmp	r3, r4
 80002fa:	d1f8      	bne.n	80002ee <Flash_ReadLastValue+0xa>
    uint16_t last_value = *(volatile uint16_t*)(address - 2);
 80002fc:	3b02      	subs	r3, #2
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	b298      	uxth	r0, r3
    if (last_value == 0 || last_value == 1 || last_value == 2)
 8000302:	2b02      	cmp	r3, #2
 8000304:	d906      	bls.n	8000314 <Flash_ReadLastValue+0x30>
        Flash_Append(0); // corrupt
 8000306:	2000      	movs	r0, #0
 8000308:	f7ff ffbc 	bl	8000284 <Flash_Append>
    return 0;
 800030c:	2000      	movs	r0, #0
 800030e:	e001      	b.n	8000314 <Flash_ReadLastValue+0x30>
    if (address == FLASH_STORAGE_ADDRESS)
 8000310:	428b      	cmp	r3, r1
 8000312:	d1f3      	bne.n	80002fc <Flash_ReadLastValue+0x18>
}
 8000314:	bd70      	pop	{r4, r5, r6, pc}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	08007c00 	.word	0x08007c00
 800031c:	0000ffff 	.word	0x0000ffff
 8000320:	08008000 	.word	0x08008000

08000324 <_write>:


// For UART debugging. Critical for mystery reason(s).
int _write(int file, char *ptr, int len)
{
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000324:	2301      	movs	r3, #1
{
 8000326:	b510      	push	{r4, lr}
 8000328:	0014      	movs	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800032a:	b292      	uxth	r2, r2
 800032c:	425b      	negs	r3, r3
 800032e:	4802      	ldr	r0, [pc, #8]	@ (8000338 <_write+0x14>)
 8000330:	f001 fffe 	bl	8002330 <HAL_UART_Transmit>
  return len;
}
 8000334:	0020      	movs	r0, r4
 8000336:	bd10      	pop	{r4, pc}
 8000338:	20000238 	.word	0x20000238

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b510      	push	{r4, lr}
 800033e:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000340:	2230      	movs	r2, #48	@ 0x30
 8000342:	2100      	movs	r1, #0
 8000344:	a80c      	add	r0, sp, #48	@ 0x30
 8000346:	f003 fe13 	bl	8003f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	2210      	movs	r2, #16
 800034c:	2100      	movs	r1, #0
 800034e:	a801      	add	r0, sp, #4
 8000350:	f003 fe0e 	bl	8003f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	2218      	movs	r2, #24
 8000356:	2100      	movs	r1, #0
 8000358:	a805      	add	r0, sp, #20
 800035a:	f003 fe09 	bl	8003f70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800035e:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000360:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000364:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000366:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f001 fab4 	bl	80018d4 <HAL_RCC_OscConfig>
 800036c:	2800      	cmp	r0, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000370:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000372:	e7fe      	b.n	8000372 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000378:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800037c:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800037e:	0021      	movs	r1, r4
 8000380:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000382:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000384:	f001 fd2c 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000388:	2800      	cmp	r0, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x54>
 800038c:	b672      	cpsid	i
  while (1)
 800038e:	e7fe      	b.n	800038e <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000390:	2380      	movs	r3, #128	@ 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000392:	900a      	str	r0, [sp, #40]	@ 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000394:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000396:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000398:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039a:	f001 fdbb 	bl	8001f14 <HAL_RCCEx_PeriphCLKConfig>
 800039e:	2800      	cmp	r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x6a>
 80003a2:	b672      	cpsid	i
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <SystemClock_Config+0x68>
}
 80003a6:	b018      	add	sp, #96	@ 0x60
 80003a8:	bd10      	pop	{r4, pc}
	...

080003ac <main>:
{
 80003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ae:	b089      	sub	sp, #36	@ 0x24
	HAL_Init();
 80003b0:	f000 f9d6 	bl	8000760 <HAL_Init>
	SystemClock_Config();
 80003b4:	f7ff ffc2 	bl	800033c <SystemClock_Config>
  huart2.Instance = USART2;
 80003b8:	4842      	ldr	r0, [pc, #264]	@ (80004c4 <main+0x118>)
 80003ba:	4b43      	ldr	r3, [pc, #268]	@ (80004c8 <main+0x11c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003bc:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 80003be:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 80003c0:	2396      	movs	r3, #150	@ 0x96
 80003c2:	021b      	lsls	r3, r3, #8
 80003c4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003cc:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ce:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d0:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d2:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d4:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d6:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d8:	f002 f870 	bl	80024bc <HAL_UART_Init>
 80003dc:	1e05      	subs	r5, r0, #0
 80003de:	d001      	beq.n	80003e4 <main+0x38>
 80003e0:	b672      	cpsid	i
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0x36>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003e4:	2180      	movs	r1, #128	@ 0x80
 80003e6:	4b39      	ldr	r3, [pc, #228]	@ (80004cc <main+0x120>)
 80003e8:	03c9      	lsls	r1, r1, #15
 80003ea:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003ec:	2601      	movs	r6, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ee:	430a      	orrs	r2, r1
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f8:	9201      	str	r2, [sp, #4]
 80003fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	0289      	lsls	r1, r1, #10
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	2208      	movs	r2, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	400b      	ands	r3, r1
 800040a:	9302      	str	r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	0001      	movs	r1, r0
 800040e:	a806      	add	r0, sp, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000410:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f003 fdad 	bl	8003f70 <memset>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 8000416:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000418:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 800041a:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041c:	a903      	add	r1, sp, #12
 800041e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge (button press)
 8000420:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000422:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;           // Enable internal pull-up (button active low)
 8000424:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f000 fb39 	bl	8000a9c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 800042a:	002a      	movs	r2, r5
 800042c:	2102      	movs	r1, #2
 800042e:	2005      	movs	r0, #5
 8000430:	f000 f9ca 	bl	80007c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000434:	2005      	movs	r0, #5
 8000436:	f000 f9f1 	bl	800081c <HAL_NVIC_EnableIRQ>
	g_current_mode = (DeviceMode_t)Flash_ReadLastValue();
 800043a:	f7ff ff53 	bl	80002e4 <Flash_ReadLastValue>
 800043e:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <main+0x124>)
 8000440:	7018      	strb	r0, [r3, #0]
	MX_USB_DEVICE_Init();
 8000442:	f003 f9a9 	bl	8003798 <MX_USB_DEVICE_Init>
	report.axes[0] = 128;
 8000446:	2380      	movs	r3, #128	@ 0x80
	report.reportId = 0x01;
 8000448:	4c22      	ldr	r4, [pc, #136]	@ (80004d4 <main+0x128>)
	memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional
 800044a:	2235      	movs	r2, #53	@ 0x35
	report.axes[0] = 128;
 800044c:	7063      	strb	r3, [r4, #1]
	report.axes[1] = 128;
 800044e:	70a3      	strb	r3, [r4, #2]
	report.axes[2] = 128;
 8000450:	70e3      	strb	r3, [r4, #3]
	report.axes[3] = 128;
 8000452:	7123      	strb	r3, [r4, #4]
	report.axes[4] = 128;
 8000454:	7163      	strb	r3, [r4, #5]
	report.axes[5] = 128;
 8000456:	71a3      	strb	r3, [r4, #6]
	memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional
 8000458:	0029      	movs	r1, r5
	report.hatSwitch = 0x0F;  // Neutral
 800045a:	3b71      	subs	r3, #113	@ 0x71
	memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional
 800045c:	481e      	ldr	r0, [pc, #120]	@ (80004d8 <main+0x12c>)
	report.reportId = 0x01;
 800045e:	7026      	strb	r6, [r4, #0]
	report.vendorByte1 = 0x00;
 8000460:	71e5      	strb	r5, [r4, #7]
	report.hatSwitch = 0x0F;  // Neutral
 8000462:	7223      	strb	r3, [r4, #8]
	memset(report.vendorData, 0, sizeof(report.vendorData));  // Optional
 8000464:	f003 fd84 	bl	8003f70 <memset>
			printf("Printing GPIO 0: \r\n");
 8000468:	481c      	ldr	r0, [pc, #112]	@ (80004dc <main+0x130>)
 800046a:	f003 fc8b 	bl	8003d84 <puts>
			printf("Printing GPIO 0: %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 800046e:	2090      	movs	r0, #144	@ 0x90
 8000470:	2101      	movs	r1, #1
 8000472:	05c0      	lsls	r0, r0, #23
 8000474:	f000 fbc4 	bl	8000c00 <HAL_GPIO_ReadPin>
 8000478:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <main+0x134>)
 800047a:	0001      	movs	r1, r0
 800047c:	0018      	movs	r0, r3
 800047e:	f003 fc1b 	bl	8003cb8 <iprintf>
	     report.buttons = 0x7FFF;
 8000482:	23ff      	movs	r3, #255	@ 0xff
 8000484:	2700      	movs	r7, #0
	     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
 8000486:	4d17      	ldr	r5, [pc, #92]	@ (80004e4 <main+0x138>)
 8000488:	0021      	movs	r1, r4
 800048a:	2240      	movs	r2, #64	@ 0x40
	     report.buttons = 0x7FFF;
 800048c:	7263      	strb	r3, [r4, #9]
	     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
 800048e:	0028      	movs	r0, r5
	     report.buttons = 0x7FFF;
 8000490:	3b80      	subs	r3, #128	@ 0x80
 8000492:	72a3      	strb	r3, [r4, #10]
	     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
 8000494:	f002 fd86 	bl	8002fa4 <USBD_HID_SendReport>
	     HAL_Delay(200); // Wait 0.2 seconds
 8000498:	20c8      	movs	r0, #200	@ 0xc8
 800049a:	f000 f983 	bl	80007a4 <HAL_Delay>
	     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
 800049e:	2240      	movs	r2, #64	@ 0x40
 80004a0:	0021      	movs	r1, r4
 80004a2:	0028      	movs	r0, r5
	     report.buttons = 0x0000;
 80004a4:	7267      	strb	r7, [r4, #9]
 80004a6:	72a7      	strb	r7, [r4, #10]
	     USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
 80004a8:	f002 fd7c 	bl	8002fa4 <USBD_HID_SendReport>
	     HAL_Delay(200); // Wait 0.2 seconds
 80004ac:	20c8      	movs	r0, #200	@ 0xc8
 80004ae:	f000 f979 	bl	80007a4 <HAL_Delay>
		printf("Main Loop is Looping \r\n");
 80004b2:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <main+0x13c>)
 80004b4:	f003 fc66 	bl	8003d84 <puts>
		HAL_Delay(1000);
 80004b8:	20fa      	movs	r0, #250	@ 0xfa
 80004ba:	0080      	lsls	r0, r0, #2
 80004bc:	f000 f972 	bl	80007a4 <HAL_Delay>
	while (1)
 80004c0:	e7d2      	b.n	8000468 <main+0xbc>
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	20000238 	.word	0x20000238
 80004c8:	40004400 	.word	0x40004400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	200002c0 	.word	0x200002c0
 80004d4:	200001f4 	.word	0x200001f4
 80004d8:	200001ff 	.word	0x200001ff
 80004dc:	08004ac8 	.word	0x08004ac8
 80004e0:	08004adb 	.word	0x08004adb
 80004e4:	200002f4 	.word	0x200002f4
 80004e8:	08004af1 	.word	0x08004af1

080004ec <EXTI0_1_IRQHandler>:
{
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80004ee:	2601      	movs	r6, #1
 80004f0:	4d16      	ldr	r5, [pc, #88]	@ (800054c <EXTI0_1_IRQHandler+0x60>)
 80004f2:	696b      	ldr	r3, [r5, #20]
 80004f4:	4233      	tst	r3, r6
 80004f6:	d028      	beq.n	800054a <EXTI0_1_IRQHandler+0x5e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);  // Clear interrupt flag
 80004f8:	616e      	str	r6, [r5, #20]
		uint32_t now = HAL_GetTick();
 80004fa:	f000 f94d 	bl	8000798 <HAL_GetTick>
		if (now - last_button_press_time > DEBOUNCE_INTERVAL_MS) {
 80004fe:	4f14      	ldr	r7, [pc, #80]	@ (8000550 <EXTI0_1_IRQHandler+0x64>)
		uint32_t now = HAL_GetTick();
 8000500:	0004      	movs	r4, r0
		if (now - last_button_press_time > DEBOUNCE_INTERVAL_MS) {
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	1ac3      	subs	r3, r0, r3
 8000506:	2bc8      	cmp	r3, #200	@ 0xc8
 8000508:	d91f      	bls.n	800054a <EXTI0_1_IRQHandler+0x5e>
			HAL_Delay(5);
 800050a:	2005      	movs	r0, #5
 800050c:	f000 f94a 	bl	80007a4 <HAL_Delay>
			 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000510:	2090      	movs	r0, #144	@ 0x90
 8000512:	0031      	movs	r1, r6
 8000514:	05c0      	lsls	r0, r0, #23
 8000516:	f000 fb73 	bl	8000c00 <HAL_GPIO_ReadPin>
 800051a:	2800      	cmp	r0, #0
 800051c:	d115      	bne.n	800054a <EXTI0_1_IRQHandler+0x5e>
				printf("Printing GPIO 0: %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 800051e:	2090      	movs	r0, #144	@ 0x90
 8000520:	0031      	movs	r1, r6
 8000522:	05c0      	lsls	r0, r0, #23
 8000524:	f000 fb6c 	bl	8000c00 <HAL_GPIO_ReadPin>
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <EXTI0_1_IRQHandler+0x68>)
 800052a:	0001      	movs	r1, r0
 800052c:	0018      	movs	r0, r3
 800052e:	f003 fbc3 	bl	8003cb8 <iprintf>
				printf("EXTI FTSR: 0x%08lX\n", EXTI->FTSR);
 8000532:	68e9      	ldr	r1, [r5, #12]
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <EXTI0_1_IRQHandler+0x6c>)
 8000536:	f003 fbbf 	bl	8003cb8 <iprintf>
				printf("EXTI RTSR: 0x%08lX\n", EXTI->RTSR);
 800053a:	68a9      	ldr	r1, [r5, #8]
 800053c:	4807      	ldr	r0, [pc, #28]	@ (800055c <EXTI0_1_IRQHandler+0x70>)
 800053e:	f003 fbbb 	bl	8003cb8 <iprintf>
				printf("GPIO PA0 hit.\r\n");
 8000542:	4807      	ldr	r0, [pc, #28]	@ (8000560 <EXTI0_1_IRQHandler+0x74>)
 8000544:	f003 fc1e 	bl	8003d84 <puts>
			   last_button_press_time = now;
 8000548:	603c      	str	r4, [r7, #0]
}
 800054a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800054c:	40010400 	.word	0x40010400
 8000550:	20000234 	.word	0x20000234
 8000554:	08004adb 	.word	0x08004adb
 8000558:	08004b08 	.word	0x08004b08
 800055c:	08004b1c 	.word	0x08004b1c
 8000560:	08004b30 	.word	0x08004b30

08000564 <Error_Handler>:
 8000564:	b672      	cpsid	i
  while (1)
 8000566:	e7fe      	b.n	8000566 <Error_Handler+0x2>

08000568 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000568:	2101      	movs	r1, #1
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <HAL_MspInit+0x2c>)
{
 800056c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	430a      	orrs	r2, r1
 8000572:	619a      	str	r2, [r3, #24]
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	69da      	ldr	r2, [r3, #28]
 8000580:	0549      	lsls	r1, r1, #21
 8000582:	430a      	orrs	r2, r1
 8000584:	61da      	str	r2, [r3, #28]
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	400b      	ands	r3, r1
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	b002      	add	sp, #8
 8000590:	4770      	bx	lr
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000598:	b510      	push	{r4, lr}
 800059a:	0004      	movs	r4, r0
 800059c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	2214      	movs	r2, #20
 80005a0:	2100      	movs	r1, #0
 80005a2:	a803      	add	r0, sp, #12
 80005a4:	f003 fce4 	bl	8003f70 <memset>
  if(huart->Instance==USART2)
 80005a8:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <HAL_UART_MspInit+0x58>)
 80005aa:	6822      	ldr	r2, [r4, #0]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d11d      	bne.n	80005ec <HAL_UART_MspInit+0x54>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <HAL_UART_MspInit+0x5c>)
 80005b4:	0292      	lsls	r2, r2, #10
 80005b6:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ba:	4311      	orrs	r1, r2
 80005bc:	61d9      	str	r1, [r3, #28]
 80005be:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c2:	4011      	ands	r1, r2
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	6959      	ldr	r1, [r3, #20]
 80005ca:	4311      	orrs	r1, r2
 80005cc:	6159      	str	r1, [r3, #20]
 80005ce:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4013      	ands	r3, r2
 80005d4:	9302      	str	r3, [sp, #8]
 80005d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <HAL_UART_MspInit+0x60>)
 80005da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	3301      	adds	r3, #1
 80005e2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005e4:	3b02      	subs	r3, #2
 80005e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f000 fa58 	bl	8000a9c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005ec:	b008      	add	sp, #32
 80005ee:	bd10      	pop	{r4, pc}
 80005f0:	40004400 	.word	0x40004400
 80005f4:	40021000 	.word	0x40021000
 80005f8:	00008004 	.word	0x00008004

080005fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler>

080005fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler>

08000600 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000600:	4770      	bx	lr

08000602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000606:	f000 f8bb 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060a:	bd10      	pop	{r4, pc}

0800060c <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800060c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800060e:	4802      	ldr	r0, [pc, #8]	@ (8000618 <USB_IRQHandler+0xc>)
 8000610:	f000 fb6c 	bl	8000cec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	200007cc 	.word	0x200007cc

0800061c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	000e      	movs	r6, r1
 8000620:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	2500      	movs	r5, #0
 8000624:	42a5      	cmp	r5, r4
 8000626:	db01      	blt.n	800062c <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000628:	0020      	movs	r0, r4
 800062a:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800062c:	e000      	b.n	8000630 <_read+0x14>
 800062e:	bf00      	nop
 8000630:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000632:	3501      	adds	r5, #1
 8000634:	e7f6      	b.n	8000624 <_read+0x8>

08000636 <_close>:
}

int _close(int file)
{
  (void)file;
  return -1;
 8000636:	2001      	movs	r0, #1
}
 8000638:	4240      	negs	r0, r0
 800063a:	4770      	bx	lr

0800063c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	019b      	lsls	r3, r3, #6
  return 0;
}
 8000640:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000642:	604b      	str	r3, [r1, #4]
}
 8000644:	4770      	bx	lr

08000646 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000646:	2001      	movs	r0, #1
 8000648:	4770      	bx	lr

0800064a <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800064a:	2000      	movs	r0, #0
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	490b      	ldr	r1, [pc, #44]	@ (8000680 <_sbrk+0x30>)
 8000652:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <_sbrk+0x34>)
{
 8000654:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000656:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000658:	490b      	ldr	r1, [pc, #44]	@ (8000688 <_sbrk+0x38>)
{
 800065a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800065c:	6808      	ldr	r0, [r1, #0]
 800065e:	2800      	cmp	r0, #0
 8000660:	d101      	bne.n	8000666 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000662:	480a      	ldr	r0, [pc, #40]	@ (800068c <_sbrk+0x3c>)
 8000664:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000666:	6808      	ldr	r0, [r1, #0]
 8000668:	18c3      	adds	r3, r0, r3
 800066a:	4293      	cmp	r3, r2
 800066c:	d906      	bls.n	800067c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800066e:	f003 fcd5 	bl	800401c <__errno>
 8000672:	230c      	movs	r3, #12
 8000674:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000676:	2001      	movs	r0, #1
 8000678:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800067a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800067c:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800067e:	e7fc      	b.n	800067a <_sbrk+0x2a>
 8000680:	00000400 	.word	0x00000400
 8000684:	20001800 	.word	0x20001800
 8000688:	200002c4 	.word	0x200002c4
 800068c:	20000bf8 	.word	0x20000bf8

08000690 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000690:	4770      	bx	lr
	...

08000694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000694:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000698:	f7ff fffa 	bl	8000690 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <LoopForever+0x6>)
    LDR R1, [R0]
 800069e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006a0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <LoopForever+0xa>)
    CMP R1, R2
 80006a4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006a6:	d105      	bne.n	80006b4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80006a8:	4811      	ldr	r0, [pc, #68]	@ (80006f0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006aa:	4912      	ldr	r1, [pc, #72]	@ (80006f4 <LoopForever+0x12>)
    STR R1, [R0]
 80006ac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006ae:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80006b0:	4912      	ldr	r1, [pc, #72]	@ (80006fc <LoopForever+0x1a>)
    STR R1, [R0]
 80006b2:	6001      	str	r1, [r0, #0]

080006b4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	4812      	ldr	r0, [pc, #72]	@ (8000700 <LoopForever+0x1e>)
  ldr r1, =_edata
 80006b6:	4913      	ldr	r1, [pc, #76]	@ (8000704 <LoopForever+0x22>)
  ldr r2, =_sidata
 80006b8:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <LoopForever+0x26>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a10      	ldr	r2, [pc, #64]	@ (800070c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80006cc:	4c10      	ldr	r4, [pc, #64]	@ (8000710 <LoopForever+0x2e>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f003 fca5 	bl	8004028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fe65 	bl	80003ac <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80006e8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80006ec:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80006f0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80006f4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80006f8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80006fc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000708:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 800070c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000710:	20000bf4 	.word	0x20000bf4

08000714 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_IRQHandler>
	...

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	20fa      	movs	r0, #250	@ 0xfa
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <HAL_InitTick+0x3c>)
 8000720:	0080      	lsls	r0, r0, #2
 8000722:	7819      	ldrb	r1, [r3, #0]
 8000724:	f7ff fd16 	bl	8000154 <__udivsi3>
 8000728:	4c0b      	ldr	r4, [pc, #44]	@ (8000758 <HAL_InitTick+0x40>)
 800072a:	0001      	movs	r1, r0
 800072c:	6820      	ldr	r0, [r4, #0]
 800072e:	f7ff fd11 	bl	8000154 <__udivsi3>
 8000732:	f000 f87f 	bl	8000834 <HAL_SYSTICK_Config>
 8000736:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000738:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800073a:	2c00      	cmp	r4, #0
 800073c:	d109      	bne.n	8000752 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	2d03      	cmp	r5, #3
 8000740:	d807      	bhi.n	8000752 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000742:	3802      	subs	r0, #2
 8000744:	0022      	movs	r2, r4
 8000746:	0029      	movs	r1, r5
 8000748:	f000 f83e 	bl	80007c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	0020      	movs	r0, r4
 800074e:	4b03      	ldr	r3, [pc, #12]	@ (800075c <HAL_InitTick+0x44>)
 8000750:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	20000004 	.word	0x20000004
 8000758:	20000000 	.word	0x20000000
 800075c:	20000008 	.word	0x20000008

08000760 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	2310      	movs	r3, #16
 8000762:	4a06      	ldr	r2, [pc, #24]	@ (800077c <HAL_Init+0x1c>)
{
 8000764:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000766:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000768:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076a:	430b      	orrs	r3, r1
 800076c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800076e:	f7ff ffd3 	bl	8000718 <HAL_InitTick>
  HAL_MspInit();
 8000772:	f7ff fef9 	bl	8000568 <HAL_MspInit>
}
 8000776:	2000      	movs	r0, #0
 8000778:	bd10      	pop	{r4, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <HAL_IncTick+0x10>)
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <HAL_IncTick+0x14>)
 8000784:	6811      	ldr	r1, [r2, #0]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	185b      	adds	r3, r3, r1
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	4770      	bx	lr
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	200002c8 	.word	0x200002c8
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000798:	4b01      	ldr	r3, [pc, #4]	@ (80007a0 <HAL_GetTick+0x8>)
 800079a:	6818      	ldr	r0, [r3, #0]
}
 800079c:	4770      	bx	lr
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	200002c8 	.word	0x200002c8

080007a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f7ff fff6 	bl	8000798 <HAL_GetTick>
 80007ac:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ae:	1c63      	adds	r3, r4, #1
 80007b0:	d002      	beq.n	80007b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80007b2:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <HAL_Delay+0x20>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007b8:	f7ff ffee 	bl	8000798 <HAL_GetTick>
 80007bc:	1b40      	subs	r0, r0, r5
 80007be:	42a0      	cmp	r0, r4
 80007c0:	d3fa      	bcc.n	80007b8 <HAL_Delay+0x14>
  {
  }
}
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ca:	24ff      	movs	r4, #255	@ 0xff
 80007cc:	2203      	movs	r2, #3
 80007ce:	000b      	movs	r3, r1
 80007d0:	0021      	movs	r1, r4
 80007d2:	4002      	ands	r2, r0
 80007d4:	00d2      	lsls	r2, r2, #3
 80007d6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007dc:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007de:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80007e0:	2800      	cmp	r0, #0
 80007e2:	db0a      	blt.n	80007fa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e4:	24c0      	movs	r4, #192	@ 0xc0
 80007e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <HAL_NVIC_SetPriority+0x4c>)
 80007e8:	0880      	lsrs	r0, r0, #2
 80007ea:	0080      	lsls	r0, r0, #2
 80007ec:	1880      	adds	r0, r0, r2
 80007ee:	00a4      	lsls	r4, r4, #2
 80007f0:	5902      	ldr	r2, [r0, r4]
 80007f2:	400a      	ands	r2, r1
 80007f4:	4313      	orrs	r3, r2
 80007f6:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80007f8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fa:	220f      	movs	r2, #15
 80007fc:	4010      	ands	r0, r2
 80007fe:	3808      	subs	r0, #8
 8000800:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <HAL_NVIC_SetPriority+0x50>)
 8000802:	0880      	lsrs	r0, r0, #2
 8000804:	0080      	lsls	r0, r0, #2
 8000806:	1880      	adds	r0, r0, r2
 8000808:	69c2      	ldr	r2, [r0, #28]
 800080a:	4011      	ands	r1, r2
 800080c:	4319      	orrs	r1, r3
 800080e:	61c1      	str	r1, [r0, #28]
 8000810:	e7f2      	b.n	80007f8 <HAL_NVIC_SetPriority+0x30>
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800081c:	2800      	cmp	r0, #0
 800081e:	db05      	blt.n	800082c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000820:	231f      	movs	r3, #31
 8000822:	4018      	ands	r0, r3
 8000824:	3b1e      	subs	r3, #30
 8000826:	4083      	lsls	r3, r0
 8000828:	4a01      	ldr	r2, [pc, #4]	@ (8000830 <HAL_NVIC_EnableIRQ+0x14>)
 800082a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800082c:	4770      	bx	lr
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	e000e100 	.word	0xe000e100

08000834 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	2280      	movs	r2, #128	@ 0x80
 8000836:	1e43      	subs	r3, r0, #1
 8000838:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	4293      	cmp	r3, r2
 800083e:	d20d      	bcs.n	800085c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	4807      	ldr	r0, [pc, #28]	@ (8000864 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000848:	6a03      	ldr	r3, [r0, #32]
 800084a:	0609      	lsls	r1, r1, #24
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	430b      	orrs	r3, r1
 8000852:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800085c:	4770      	bx	lr
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	e000e010 	.word	0xe000e010
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000868:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <FLASH_SetErrorCode+0x34>)
 800086a:	2110      	movs	r1, #16
 800086c:	68d0      	ldr	r0, [r2, #12]
{
 800086e:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000870:	0003      	movs	r3, r0
 8000872:	400b      	ands	r3, r1
 8000874:	4208      	tst	r0, r1
 8000876:	d005      	beq.n	8000884 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000878:	2302      	movs	r3, #2
 800087a:	4809      	ldr	r0, [pc, #36]	@ (80008a0 <FLASH_SetErrorCode+0x38>)
 800087c:	69c4      	ldr	r4, [r0, #28]
 800087e:	4323      	orrs	r3, r4
 8000880:	61c3      	str	r3, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000882:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000884:	2004      	movs	r0, #4
 8000886:	68d1      	ldr	r1, [r2, #12]
 8000888:	4201      	tst	r1, r0
 800088a:	d005      	beq.n	8000898 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800088c:	2101      	movs	r1, #1
 800088e:	4c04      	ldr	r4, [pc, #16]	@ (80008a0 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8000890:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000892:	69e5      	ldr	r5, [r4, #28]
 8000894:	4329      	orrs	r1, r5
 8000896:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000898:	60d3      	str	r3, [r2, #12]
}  
 800089a:	bd30      	pop	{r4, r5, pc}
 800089c:	40022000 	.word	0x40022000
 80008a0:	200002d0 	.word	0x200002d0

080008a4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 80008a6:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	0612      	lsls	r2, r2, #24
 80008ac:	d506      	bpl.n	80008bc <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80008ae:	4a05      	ldr	r2, [pc, #20]	@ (80008c4 <HAL_FLASH_Unlock+0x20>)
 80008b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80008b2:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <HAL_FLASH_Unlock+0x24>)
 80008b4:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008b6:	6918      	ldr	r0, [r3, #16]
 80008b8:	0600      	lsls	r0, r0, #24
 80008ba:	0fc0      	lsrs	r0, r0, #31
}
 80008bc:	4770      	bx	lr
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	40022000 	.word	0x40022000
 80008c4:	45670123 	.word	0x45670123
 80008c8:	cdef89ab 	.word	0xcdef89ab

080008cc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <HAL_FLASH_Lock+0x10>)
}
 80008d0:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80008d2:	6911      	ldr	r1, [r2, #16]
 80008d4:	430b      	orrs	r3, r1
 80008d6:	6113      	str	r3, [r2, #16]
}
 80008d8:	4770      	bx	lr
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	40022000 	.word	0x40022000

080008e0 <FLASH_WaitForLastOperation>:
{
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff ff58 	bl	8000798 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80008e8:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80008ea:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <FLASH_WaitForLastOperation+0x50>)
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	4232      	tst	r2, r6
 80008f2:	d111      	bne.n	8000918 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80008f4:	2220      	movs	r2, #32
 80008f6:	68d9      	ldr	r1, [r3, #12]
 80008f8:	4211      	tst	r1, r2
 80008fa:	d000      	beq.n	80008fe <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80008fc:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80008fe:	68d9      	ldr	r1, [r3, #12]
 8000900:	2210      	movs	r2, #16
 8000902:	0008      	movs	r0, r1
 8000904:	4010      	ands	r0, r2
 8000906:	4211      	tst	r1, r2
 8000908:	d102      	bne.n	8000910 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800090a:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800090c:	075b      	lsls	r3, r3, #29
 800090e:	d508      	bpl.n	8000922 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8000910:	f7ff ffaa 	bl	8000868 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000914:	2001      	movs	r0, #1
 8000916:	e004      	b.n	8000922 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8000918:	1c62      	adds	r2, r4, #1
 800091a:	d0e8      	beq.n	80008ee <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800091c:	2c00      	cmp	r4, #0
 800091e:	d101      	bne.n	8000924 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8000920:	2003      	movs	r0, #3
}
 8000922:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000924:	f7ff ff38 	bl	8000798 <HAL_GetTick>
 8000928:	1b40      	subs	r0, r0, r5
 800092a:	42a0      	cmp	r0, r4
 800092c:	d9de      	bls.n	80008ec <FLASH_WaitForLastOperation+0xc>
 800092e:	e7f7      	b.n	8000920 <FLASH_WaitForLastOperation+0x40>
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_FLASH_Program>:
{
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <HAL_FLASH_Program+0x80>)
{
 800093c:	9100      	str	r1, [sp, #0]
 800093e:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 8000940:	7e1a      	ldrb	r2, [r3, #24]
{
 8000942:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8000944:	2002      	movs	r0, #2
 8000946:	2a01      	cmp	r2, #1
 8000948:	d031      	beq.n	80009ae <HAL_FLASH_Program+0x7a>
 800094a:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800094c:	481a      	ldr	r0, [pc, #104]	@ (80009b8 <HAL_FLASH_Program+0x84>)
  __HAL_LOCK(&pFlash);
 800094e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000950:	f7ff ffc6 	bl	80008e0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000954:	2800      	cmp	r0, #0
 8000956:	d127      	bne.n	80009a8 <HAL_FLASH_Program+0x74>
      nbiterations = 1U;
 8000958:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800095a:	2c01      	cmp	r4, #1
 800095c:	d003      	beq.n	8000966 <HAL_FLASH_Program+0x32>
      nbiterations = 4U;
 800095e:	2604      	movs	r6, #4
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000960:	2c02      	cmp	r4, #2
 8000962:	d100      	bne.n	8000966 <HAL_FLASH_Program+0x32>
      nbiterations = 2U;
 8000964:	0026      	movs	r6, r4
      nbiterations = 4U;
 8000966:	2400      	movs	r4, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_FLASH_Program+0x80>)
 800096a:	9301      	str	r3, [sp, #4]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800096c:	9802      	ldr	r0, [sp, #8]
 800096e:	9903      	ldr	r1, [sp, #12]
 8000970:	0122      	lsls	r2, r4, #4
 8000972:	f7ff fc7b 	bl	800026c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000976:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000978:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800097a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800097c:	4d0f      	ldr	r5, [pc, #60]	@ (80009bc <HAL_FLASH_Program+0x88>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800097e:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000980:	692b      	ldr	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8000982:	9a00      	ldr	r2, [sp, #0]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000984:	433b      	orrs	r3, r7
 8000986:	612b      	str	r3, [r5, #16]
  *(__IO uint16_t*)Address = Data;
 8000988:	0063      	lsls	r3, r4, #1
 800098a:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800098c:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 800098e:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <HAL_FLASH_Program+0x84>)
 8000992:	f7ff ffa5 	bl	80008e0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000996:	692b      	ldr	r3, [r5, #16]
 8000998:	43bb      	bics	r3, r7
 800099a:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 800099c:	2800      	cmp	r0, #0
 800099e:	d103      	bne.n	80009a8 <HAL_FLASH_Program+0x74>
    for (index = 0U; index < nbiterations; index++)
 80009a0:	19e4      	adds	r4, r4, r7
 80009a2:	b2e3      	uxtb	r3, r4
 80009a4:	429e      	cmp	r6, r3
 80009a6:	d8e1      	bhi.n	800096c <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 80009a8:	2200      	movs	r2, #0
 80009aa:	4b02      	ldr	r3, [pc, #8]	@ (80009b4 <HAL_FLASH_Program+0x80>)
 80009ac:	761a      	strb	r2, [r3, #24]
}
 80009ae:	b005      	add	sp, #20
 80009b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	200002d0 	.word	0x200002d0
 80009b8:	0000c350 	.word	0x0000c350
 80009bc:	40022000 	.word	0x40022000

080009c0 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009c0:	2200      	movs	r2, #0
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <FLASH_MassErase+0x1c>)
 80009c4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <FLASH_MassErase+0x20>)
 80009c8:	3204      	adds	r2, #4
 80009ca:	6919      	ldr	r1, [r3, #16]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80009d0:	2240      	movs	r2, #64	@ 0x40
 80009d2:	6919      	ldr	r1, [r3, #16]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	611a      	str	r2, [r3, #16]
}
 80009d8:	4770      	bx	lr
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	200002d0 	.word	0x200002d0
 80009e0:	40022000 	.word	0x40022000

080009e4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009e4:	2200      	movs	r2, #0
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <FLASH_PageErase+0x1c>)
 80009e8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <FLASH_PageErase+0x20>)
 80009ec:	3202      	adds	r2, #2
 80009ee:	6919      	ldr	r1, [r3, #16]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80009f4:	2240      	movs	r2, #64	@ 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 80009f6:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80009f8:	6919      	ldr	r1, [r3, #16]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	611a      	str	r2, [r3, #16]
}
 80009fe:	4770      	bx	lr
 8000a00:	200002d0 	.word	0x200002d0
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_FLASHEx_Erase>:
{
 8000a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000a0a:	4f21      	ldr	r7, [pc, #132]	@ (8000a90 <HAL_FLASHEx_Erase+0x88>)
{
 8000a0c:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8000a0e:	7e3b      	ldrb	r3, [r7, #24]
{
 8000a10:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8000a12:	2002      	movs	r0, #2
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d00c      	beq.n	8000a32 <HAL_FLASHEx_Erase+0x2a>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000a1c:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a1e:	481d      	ldr	r0, [pc, #116]	@ (8000a94 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d112      	bne.n	8000a4a <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a24:	f7ff ff5c 	bl	80008e0 <FLASH_WaitForLastOperation>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a2c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	763b      	strb	r3, [r7, #24]
}
 8000a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8000a34:	f7ff ffc4 	bl	80009c0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a38:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <HAL_FLASHEx_Erase+0x8c>)
 8000a3a:	f7ff ff51 	bl	80008e0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4a15      	ldr	r2, [pc, #84]	@ (8000a98 <HAL_FLASHEx_Erase+0x90>)
 8000a42:	6913      	ldr	r3, [r2, #16]
 8000a44:	438b      	bics	r3, r1
 8000a46:	6113      	str	r3, [r2, #16]
 8000a48:	e7f1      	b.n	8000a2e <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000a4a:	f7ff ff49 	bl	80008e0 <FLASH_WaitForLastOperation>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d1ec      	bne.n	8000a2c <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000a52:	2301      	movs	r3, #1
 8000a54:	425b      	negs	r3, r3
 8000a56:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000a58:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a5a:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000a5c:	68a3      	ldr	r3, [r4, #8]
 8000a5e:	6862      	ldr	r2, [r4, #4]
 8000a60:	029b      	lsls	r3, r3, #10
 8000a62:	189b      	adds	r3, r3, r2
 8000a64:	42ab      	cmp	r3, r5
 8000a66:	d9e2      	bls.n	8000a2e <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000a68:	0028      	movs	r0, r5
 8000a6a:	f7ff ffbb 	bl	80009e4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a6e:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <HAL_FLASHEx_Erase+0x8c>)
 8000a70:	f7ff ff36 	bl	80008e0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000a74:	2102      	movs	r1, #2
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <HAL_FLASHEx_Erase+0x90>)
 8000a78:	6913      	ldr	r3, [r2, #16]
 8000a7a:	438b      	bics	r3, r1
 8000a7c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8000a82:	6035      	str	r5, [r6, #0]
            break;
 8000a84:	e7d3      	b.n	8000a2e <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000a86:	2380      	movs	r3, #128	@ 0x80
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	18ed      	adds	r5, r5, r3
 8000a8c:	e7e6      	b.n	8000a5c <HAL_FLASHEx_Erase+0x54>
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	200002d0 	.word	0x200002d0
 8000a94:	0000c350 	.word	0x0000c350
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000a9c:	2300      	movs	r3, #0
{
 8000a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	0014      	movs	r4, r2
 8000aa6:	40dc      	lsrs	r4, r3
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000aaa:	b007      	add	sp, #28
 8000aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aae:	2501      	movs	r5, #1
 8000ab0:	0014      	movs	r4, r2
 8000ab2:	409d      	lsls	r5, r3
 8000ab4:	402c      	ands	r4, r5
 8000ab6:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000ab8:	422a      	tst	r2, r5
 8000aba:	d100      	bne.n	8000abe <HAL_GPIO_Init+0x22>
 8000abc:	e094      	b.n	8000be8 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000abe:	684a      	ldr	r2, [r1, #4]
 8000ac0:	005f      	lsls	r7, r3, #1
 8000ac2:	4694      	mov	ip, r2
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	4664      	mov	r4, ip
 8000ac8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aca:	2403      	movs	r4, #3
 8000acc:	40bc      	lsls	r4, r7
 8000ace:	43e4      	mvns	r4, r4
 8000ad0:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ad2:	1e54      	subs	r4, r2, #1
 8000ad4:	2c01      	cmp	r4, #1
 8000ad6:	d82e      	bhi.n	8000b36 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000ad8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ada:	9c01      	ldr	r4, [sp, #4]
 8000adc:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ade:	68cc      	ldr	r4, [r1, #12]
 8000ae0:	40bc      	lsls	r4, r7
 8000ae2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000ae4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ae6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae8:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	43ac      	bics	r4, r5
 8000aec:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aee:	4664      	mov	r4, ip
 8000af0:	0924      	lsrs	r4, r4, #4
 8000af2:	4034      	ands	r4, r6
 8000af4:	409c      	lsls	r4, r3
 8000af6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000af8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000afa:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000afc:	9c01      	ldr	r4, [sp, #4]
 8000afe:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b00:	688c      	ldr	r4, [r1, #8]
 8000b02:	40bc      	lsls	r4, r7
 8000b04:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000b06:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b08:	2a02      	cmp	r2, #2
 8000b0a:	d116      	bne.n	8000b3a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b0c:	2507      	movs	r5, #7
 8000b0e:	260f      	movs	r6, #15
 8000b10:	401d      	ands	r5, r3
 8000b12:	00ad      	lsls	r5, r5, #2
 8000b14:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000b16:	08dc      	lsrs	r4, r3, #3
 8000b18:	00a4      	lsls	r4, r4, #2
 8000b1a:	1904      	adds	r4, r0, r4
 8000b1c:	9402      	str	r4, [sp, #8]
 8000b1e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b20:	9603      	str	r6, [sp, #12]
 8000b22:	0026      	movs	r6, r4
 8000b24:	9c03      	ldr	r4, [sp, #12]
 8000b26:	43a6      	bics	r6, r4
 8000b28:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2a:	690e      	ldr	r6, [r1, #16]
 8000b2c:	40ae      	lsls	r6, r5
 8000b2e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000b30:	9c02      	ldr	r4, [sp, #8]
 8000b32:	6226      	str	r6, [r4, #32]
 8000b34:	e001      	b.n	8000b3a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b36:	2a03      	cmp	r2, #3
 8000b38:	d1df      	bne.n	8000afa <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000b3c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b3e:	9d01      	ldr	r5, [sp, #4]
 8000b40:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b42:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b44:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000b46:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b48:	4662      	mov	r2, ip
 8000b4a:	02a4      	lsls	r4, r4, #10
 8000b4c:	4222      	tst	r2, r4
 8000b4e:	d04b      	beq.n	8000be8 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	2501      	movs	r5, #1
 8000b52:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b54:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b58:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	432c      	orrs	r4, r5
 8000b5c:	6194      	str	r4, [r2, #24]
 8000b5e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b60:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	402a      	ands	r2, r5
 8000b64:	9205      	str	r2, [sp, #20]
 8000b66:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <HAL_GPIO_Init+0x154>)
 8000b6a:	00a4      	lsls	r4, r4, #2
 8000b6c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6e:	220f      	movs	r2, #15
 8000b70:	3502      	adds	r5, #2
 8000b72:	401d      	ands	r5, r3
 8000b74:	00ad      	lsls	r5, r5, #2
 8000b76:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b78:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	42b8      	cmp	r0, r7
 8000b80:	d008      	beq.n	8000b94 <HAL_GPIO_Init+0xf8>
 8000b82:	4f1c      	ldr	r7, [pc, #112]	@ (8000bf4 <HAL_GPIO_Init+0x158>)
 8000b84:	3201      	adds	r2, #1
 8000b86:	42b8      	cmp	r0, r7
 8000b88:	d004      	beq.n	8000b94 <HAL_GPIO_Init+0xf8>
 8000b8a:	4f1b      	ldr	r7, [pc, #108]	@ (8000bf8 <HAL_GPIO_Init+0x15c>)
 8000b8c:	3204      	adds	r2, #4
 8000b8e:	42b8      	cmp	r0, r7
 8000b90:	d100      	bne.n	8000b94 <HAL_GPIO_Init+0xf8>
 8000b92:	3a03      	subs	r2, #3
 8000b94:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b96:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b98:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b9a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000b9c:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8000b9e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000ba0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000ba2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000ba4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000ba6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ba8:	02ff      	lsls	r7, r7, #11
 8000baa:	d401      	bmi.n	8000bb0 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8000bac:	0035      	movs	r5, r6
 8000bae:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000bb2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000bb4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000bb6:	9d00      	ldr	r5, [sp, #0]
 8000bb8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bba:	02bf      	lsls	r7, r7, #10
 8000bbc:	d401      	bmi.n	8000bc2 <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8000bbe:	0035      	movs	r5, r6
 8000bc0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bc2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000bc4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000bc6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000bc8:	9d00      	ldr	r5, [sp, #0]
 8000bca:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bcc:	03bf      	lsls	r7, r7, #14
 8000bce:	d401      	bmi.n	8000bd4 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000bd0:	0035      	movs	r5, r6
 8000bd2:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bd4:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000bd6:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000bd8:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000bda:	9e00      	ldr	r6, [sp, #0]
 8000bdc:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bde:	03ff      	lsls	r7, r7, #15
 8000be0:	d401      	bmi.n	8000be6 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8000be2:	4025      	ands	r5, r4
 8000be4:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000be6:	6016      	str	r6, [r2, #0]
    position++;
 8000be8:	3301      	adds	r3, #1
 8000bea:	e75a      	b.n	8000aa2 <HAL_GPIO_Init+0x6>
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c00:	6900      	ldr	r0, [r0, #16]
 8000c02:	4008      	ands	r0, r1
 8000c04:	1e43      	subs	r3, r0, #1
 8000c06:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000c08:	b2c0      	uxtb	r0, r0
  }
 8000c0a:	4770      	bx	lr

08000c0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000c10:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d02b      	beq.n	8000c6e <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c16:	4d22      	ldr	r5, [pc, #136]	@ (8000ca0 <HAL_PCD_Init+0x94>)
 8000c18:	5d63      	ldrb	r3, [r4, r5]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c20:	23a4      	movs	r3, #164	@ 0xa4
 8000c22:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c24:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8000c26:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 8000c28:	f002 fe72 	bl	8003910 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c30:	6820      	ldr	r0, [r4, #0]
 8000c32:	f001 fc7f 	bl	8002534 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	0022      	movs	r2, r4
 8000c3a:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c3c:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c3e:	7920      	ldrb	r0, [r4, #4]
 8000c40:	3210      	adds	r2, #16
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d114      	bne.n	8000c70 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c46:	2100      	movs	r1, #0
 8000c48:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c4a:	0008      	movs	r0, r1
 8000c4c:	3251      	adds	r2, #81	@ 0x51
 8000c4e:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d117      	bne.n	8000c84 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000c54:	6861      	ldr	r1, [r4, #4]
 8000c56:	68a2      	ldr	r2, [r4, #8]
 8000c58:	6820      	ldr	r0, [r4, #0]
 8000c5a:	f001 fc75 	bl	8002548 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c62:	3301      	adds	r3, #1
 8000c64:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000c66:	7aa3      	ldrb	r3, [r4, #10]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d015      	beq.n	8000c98 <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000c6c:	2000      	movs	r0, #0
}
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 8000c70:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c72:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 8000c74:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c76:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c78:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c7a:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c7c:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	3228      	adds	r2, #40	@ 0x28
 8000c82:	e7de      	b.n	8000c42 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 8000c84:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c86:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8000c88:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c8a:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c8c:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c8e:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c90:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c92:	b2c9      	uxtb	r1, r1
 8000c94:	3228      	adds	r2, #40	@ 0x28
 8000c96:	e7db      	b.n	8000c50 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000c98:	0020      	movs	r0, r4
 8000c9a:	f000 fe06 	bl	80018aa <HAL_PCDEx_ActivateLPM>
 8000c9e:	e7e5      	b.n	8000c6c <HAL_PCD_Init+0x60>
 8000ca0:	00000291 	.word	0x00000291

08000ca4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000ca6:	25a4      	movs	r5, #164	@ 0xa4
 8000ca8:	00ad      	lsls	r5, r5, #2
 8000caa:	5d43      	ldrb	r3, [r0, r5]
{
 8000cac:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d009      	beq.n	8000cc8 <HAL_PCD_Start+0x24>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8000cb8:	6820      	ldr	r0, [r4, #0]
 8000cba:	f001 fc31 	bl	8002520 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000cbe:	6820      	ldr	r0, [r4, #0]
 8000cc0:	f001 fe3d 	bl	800293e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}

08000cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000cca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000ccc:	25a4      	movs	r5, #164	@ 0xa4
 8000cce:	00ad      	lsls	r5, r5, #2
 8000cd0:	5d43      	ldrb	r3, [r0, r5]
{
 8000cd2:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d007      	beq.n	8000cea <HAL_PCD_SetAddress+0x20>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000cde:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8000ce0:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ce2:	f001 fe25 	bl	8002930 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000cea:	bd70      	pop	{r4, r5, r6, pc}

08000cec <HAL_PCD_IRQHandler>:
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	0004      	movs	r4, r0
 8000cf0:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000cf2:	6800      	ldr	r0, [r0, #0]
 8000cf4:	f001 fe2b 	bl	800294e <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	0005      	movs	r5, r0
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	401d      	ands	r5, r3
 8000d00:	4218      	tst	r0, r3
 8000d02:	d101      	bne.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
 8000d04:	f000 fc27 	bl	8001556 <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000d08:	6820      	ldr	r0, [r4, #0]
 8000d0a:	1d82      	adds	r2, r0, #6
 8000d0c:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db01      	blt.n	8000d18 <HAL_PCD_IRQHandler+0x2c>
}
 8000d14:	b005      	add	sp, #20
 8000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000d18:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000d1a:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000d1c:	4019      	ands	r1, r3
 8000d1e:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 8000d20:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000d22:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8000d24:	420b      	tst	r3, r1
 8000d26:	d000      	beq.n	8000d2a <HAL_PCD_IRQHandler+0x3e>
 8000d28:	e0c0      	b.n	8000eac <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	4019      	ands	r1, r3
 8000d30:	421a      	tst	r2, r3
 8000d32:	d127      	bne.n	8000d84 <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d34:	8803      	ldrh	r3, [r0, #0]
 8000d36:	4aca      	ldr	r2, [pc, #808]	@ (8001060 <HAL_PCD_IRQHandler+0x374>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2280      	movs	r2, #128	@ 0x80
 8000d3c:	0212      	lsls	r2, r2, #8
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d42:	0003      	movs	r3, r0
 8000d44:	3350      	adds	r3, #80	@ 0x50
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	7c23      	ldrb	r3, [r4, #16]
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	18c3      	adds	r3, r0, r3
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	4ac4      	ldr	r2, [pc, #784]	@ (8001064 <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d52:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8000d58:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d5a:	059b      	lsls	r3, r3, #22
 8000d5c:	0d9b      	lsrs	r3, r3, #22
 8000d5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d64:	f002 fe05 	bl	8003972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000d68:	7b23      	ldrb	r3, [r4, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0cc      	beq.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
 8000d6e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000d70:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d1c8      	bne.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000d76:	2080      	movs	r0, #128	@ 0x80
 8000d78:	7b22      	ldrb	r2, [r4, #12]
 8000d7a:	334c      	adds	r3, #76	@ 0x4c
 8000d7c:	4302      	orrs	r2, r0
 8000d7e:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 8000d80:	7321      	strb	r1, [r4, #12]
 8000d82:	e7c1      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d84:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d86:	2180      	movs	r1, #128	@ 0x80
 8000d88:	0016      	movs	r6, r2
 8000d8a:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d8c:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d8e:	400e      	ands	r6, r1
 8000d90:	420a      	tst	r2, r1
 8000d92:	d022      	beq.n	8000dda <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d94:	0003      	movs	r3, r0
 8000d96:	3350      	adds	r3, #80	@ 0x50
 8000d98:	881a      	ldrh	r2, [r3, #0]
 8000d9a:	23a8      	movs	r3, #168	@ 0xa8
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000da0:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	18c3      	adds	r3, r0, r3
 8000da6:	189b      	adds	r3, r3, r2
 8000da8:	4aaf      	ldr	r2, [pc, #700]	@ (8001068 <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000daa:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	0022      	movs	r2, r4
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3251      	adds	r2, #81	@ 0x51
 8000db4:	059b      	lsls	r3, r3, #22
 8000db6:	0d9b      	lsrs	r3, r3, #22
 8000db8:	32ff      	adds	r2, #255	@ 0xff
 8000dba:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000dbc:	1861      	adds	r1, r4, r1
 8000dbe:	88d2      	ldrh	r2, [r2, #6]
 8000dc0:	f002 f810 	bl	8002de4 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dc4:	6821      	ldr	r1, [r4, #0]
 8000dc6:	4ba9      	ldr	r3, [pc, #676]	@ (800106c <HAL_PCD_IRQHandler+0x380>)
 8000dc8:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000dca:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dcc:	401a      	ands	r2, r3
 8000dce:	2380      	movs	r3, #128	@ 0x80
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000dd4:	f002 fdb8 	bl	8003948 <HAL_PCD_SetupStageCallback>
 8000dd8:	e796      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db00      	blt.n	8000de2 <HAL_PCD_IRQHandler+0xf6>
 8000de0:	e792      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000de2:	8802      	ldrh	r2, [r0, #0]
 8000de4:	4ba1      	ldr	r3, [pc, #644]	@ (800106c <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000de6:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000de8:	401a      	ands	r2, r3
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	4313      	orrs	r3, r2
 8000dee:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000df0:	0003      	movs	r3, r0
 8000df2:	3350      	adds	r3, #80	@ 0x50
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	23a8      	movs	r3, #168	@ 0xa8
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	5ce3      	ldrb	r3, [r4, r3]
 8000dfc:	3551      	adds	r5, #81	@ 0x51
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	18c3      	adds	r3, r0, r3
 8000e02:	189b      	adds	r3, r3, r2
 8000e04:	4a98      	ldr	r2, [pc, #608]	@ (8001068 <HAL_PCD_IRQHandler+0x37c>)
 8000e06:	35ff      	adds	r5, #255	@ 0xff
 8000e08:	189b      	adds	r3, r3, r2
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	059b      	lsls	r3, r3, #22
 8000e0e:	0d9b      	lsrs	r3, r3, #22
 8000e10:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000e12:	d00d      	beq.n	8000e30 <HAL_PCD_IRQHandler+0x144>
 8000e14:	6969      	ldr	r1, [r5, #20]
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d00a      	beq.n	8000e30 <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e1a:	88ea      	ldrh	r2, [r5, #6]
 8000e1c:	f001 ffe2 	bl	8002de4 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000e20:	696b      	ldr	r3, [r5, #20]
 8000e22:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e24:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8000e26:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e28:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000e2a:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e2c:	f002 fd95 	bl	800395a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e30:	6821      	ldr	r1, [r4, #0]
 8000e32:	880a      	ldrh	r2, [r1, #0]
 8000e34:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000e36:	0512      	lsls	r2, r2, #20
 8000e38:	d500      	bpl.n	8000e3c <HAL_PCD_IRQHandler+0x150>
 8000e3a:	e765      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
 8000e3c:	22c0      	movs	r2, #192	@ 0xc0
 8000e3e:	0192      	lsls	r2, r2, #6
 8000e40:	4013      	ands	r3, r2
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d100      	bne.n	8000e48 <HAL_PCD_IRQHandler+0x15c>
 8000e46:	e75f      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e48:	000b      	movs	r3, r1
 8000e4a:	4a87      	ldr	r2, [pc, #540]	@ (8001068 <HAL_PCD_IRQHandler+0x37c>)
 8000e4c:	3350      	adds	r3, #80	@ 0x50
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	188a      	adds	r2, r1, r2
 8000e52:	18d2      	adds	r2, r2, r3
 8000e54:	8813      	ldrh	r3, [r2, #0]
 8000e56:	059b      	lsls	r3, r3, #22
 8000e58:	0d9b      	lsrs	r3, r3, #22
 8000e5a:	8013      	strh	r3, [r2, #0]
 8000e5c:	692b      	ldr	r3, [r5, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10e      	bne.n	8000e80 <HAL_PCD_IRQHandler+0x194>
 8000e62:	2080      	movs	r0, #128	@ 0x80
 8000e64:	8813      	ldrh	r3, [r2, #0]
 8000e66:	0200      	lsls	r0, r0, #8
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000e6c:	880a      	ldrh	r2, [r1, #0]
 8000e6e:	4b80      	ldr	r3, [pc, #512]	@ (8001070 <HAL_PCD_IRQHandler+0x384>)
 8000e70:	401a      	ands	r2, r3
 8000e72:	23c0      	movs	r3, #192	@ 0xc0
 8000e74:	019b      	lsls	r3, r3, #6
 8000e76:	4053      	eors	r3, r2
 8000e78:	4a7e      	ldr	r2, [pc, #504]	@ (8001074 <HAL_PCD_IRQHandler+0x388>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	800b      	strh	r3, [r1, #0]
 8000e7e:	e743      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e80:	2b3e      	cmp	r3, #62	@ 0x3e
 8000e82:	d808      	bhi.n	8000e96 <HAL_PCD_IRQHandler+0x1aa>
 8000e84:	2501      	movs	r5, #1
 8000e86:	0858      	lsrs	r0, r3, #1
 8000e88:	402b      	ands	r3, r5
 8000e8a:	18c0      	adds	r0, r0, r3
 8000e8c:	8813      	ldrh	r3, [r2, #0]
 8000e8e:	0280      	lsls	r0, r0, #10
 8000e90:	4303      	orrs	r3, r0
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	e7e9      	b.n	8000e6a <HAL_PCD_IRQHandler+0x17e>
 8000e96:	251f      	movs	r5, #31
 8000e98:	0958      	lsrs	r0, r3, #5
 8000e9a:	402b      	ands	r3, r5
 8000e9c:	425d      	negs	r5, r3
 8000e9e:	416b      	adcs	r3, r5
 8000ea0:	1ac0      	subs	r0, r0, r3
 8000ea2:	8813      	ldrh	r3, [r2, #0]
 8000ea4:	0280      	lsls	r0, r0, #10
 8000ea6:	4318      	orrs	r0, r3
 8000ea8:	4b73      	ldr	r3, [pc, #460]	@ (8001078 <HAL_PCD_IRQHandler+0x38c>)
 8000eaa:	e7f1      	b.n	8000e90 <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000eac:	9b00      	ldr	r3, [sp, #0]
 8000eae:	009f      	lsls	r7, r3, #2
 8000eb0:	19c2      	adds	r2, r0, r7
 8000eb2:	8813      	ldrh	r3, [r2, #0]
 8000eb4:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000eb6:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000eb8:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db00      	blt.n	8000ec0 <HAL_PCD_IRQHandler+0x1d4>
 8000ebe:	e092      	b.n	8000fe6 <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ec0:	8813      	ldrh	r3, [r2, #0]
 8000ec2:	496a      	ldr	r1, [pc, #424]	@ (800106c <HAL_PCD_IRQHandler+0x380>)
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8000ecc:	2328      	movs	r3, #40	@ 0x28
 8000ece:	9a00      	ldr	r2, [sp, #0]
 8000ed0:	4353      	muls	r3, r2
 8000ed2:	18e3      	adds	r3, r4, r3
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	001d      	movs	r5, r3
 8000ed8:	325d      	adds	r2, #93	@ 0x5d
 8000eda:	32ff      	adds	r2, #255	@ 0xff
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	3551      	adds	r5, #81	@ 0x51
 8000ee0:	35ff      	adds	r5, #255	@ 0xff
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d114      	bne.n	8000f10 <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	3250      	adds	r2, #80	@ 0x50
 8000eea:	8811      	ldrh	r1, [r2, #0]
 8000eec:	782a      	ldrb	r2, [r5, #0]
 8000eee:	00d2      	lsls	r2, r2, #3
 8000ef0:	1852      	adds	r2, r2, r1
 8000ef2:	495d      	ldr	r1, [pc, #372]	@ (8001068 <HAL_PCD_IRQHandler+0x37c>)
 8000ef4:	1812      	adds	r2, r2, r0
 8000ef6:	1852      	adds	r2, r2, r1
 8000ef8:	8812      	ldrh	r2, [r2, #0]
 8000efa:	0592      	lsls	r2, r2, #22
 8000efc:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d056      	beq.n	8000fb0 <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000f02:	001a      	movs	r2, r3
 8000f04:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f06:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f08:	33fc      	adds	r3, #252	@ 0xfc
 8000f0a:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	e04b      	b.n	8000fa8 <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 8000f10:	0019      	movs	r1, r3
 8000f12:	3154      	adds	r1, #84	@ 0x54
 8000f14:	31ff      	adds	r1, #255	@ 0xff
 8000f16:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f18:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 8000f1a:	2902      	cmp	r1, #2
 8000f1c:	d000      	beq.n	8000f20 <HAL_PCD_IRQHandler+0x234>
 8000f1e:	e0e3      	b.n	80010e8 <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f20:	2680      	movs	r6, #128	@ 0x80
 8000f22:	01f6      	lsls	r6, r6, #7
 8000f24:	46b4      	mov	ip, r6
 8000f26:	4665      	mov	r5, ip
 8000f28:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 8000f2a:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f2c:	402e      	ands	r6, r5
 8000f2e:	9603      	str	r6, [sp, #12]
 8000f30:	0006      	movs	r6, r0
 8000f32:	3650      	adds	r6, #80	@ 0x50
 8000f34:	9602      	str	r6, [sp, #8]
 8000f36:	4666      	mov	r6, ip
 8000f38:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 8000f3a:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f3c:	4235      	tst	r5, r6
 8000f3e:	d100      	bne.n	8000f42 <HAL_PCD_IRQHandler+0x256>
 8000f40:	e0a0      	b.n	8001084 <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f42:	9d02      	ldr	r5, [sp, #8]
 8000f44:	882e      	ldrh	r6, [r5, #0]
 8000f46:	00d5      	lsls	r5, r2, #3
 8000f48:	1976      	adds	r6, r6, r5
 8000f4a:	4d46      	ldr	r5, [pc, #280]	@ (8001064 <HAL_PCD_IRQHandler+0x378>)
 8000f4c:	1836      	adds	r6, r6, r0
 8000f4e:	1976      	adds	r6, r6, r5
 8000f50:	8835      	ldrh	r5, [r6, #0]
 8000f52:	05ad      	lsls	r5, r5, #22
 8000f54:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8000f56:	428d      	cmp	r5, r1
 8000f58:	d90d      	bls.n	8000f76 <HAL_PCD_IRQHandler+0x28a>
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000f5e:	0091      	lsls	r1, r2, #2
 8000f60:	1841      	adds	r1, r0, r1
 8000f62:	880e      	ldrh	r6, [r1, #0]
 8000f64:	4b42      	ldr	r3, [pc, #264]	@ (8001070 <HAL_PCD_IRQHandler+0x384>)
 8000f66:	401e      	ands	r6, r3
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	019b      	lsls	r3, r3, #6
 8000f6c:	4073      	eors	r3, r6
 8000f6e:	4e41      	ldr	r6, [pc, #260]	@ (8001074 <HAL_PCD_IRQHandler+0x388>)
 8000f70:	4333      	orrs	r3, r6
 8000f72:	800b      	strh	r3, [r1, #0]
 8000f74:	e002      	b.n	8000f7c <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 8000f76:	1b49      	subs	r1, r1, r5
 8000f78:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000f7c:	9b01      	ldr	r3, [sp, #4]
 8000f7e:	065b      	lsls	r3, r3, #25
 8000f80:	d507      	bpl.n	8000f92 <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	1882      	adds	r2, r0, r2
 8000f86:	8813      	ldrh	r3, [r2, #0]
 8000f88:	493c      	ldr	r1, [pc, #240]	@ (800107c <HAL_PCD_IRQHandler+0x390>)
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	493c      	ldr	r1, [pc, #240]	@ (8001080 <HAL_PCD_IRQHandler+0x394>)
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d00c      	beq.n	8000fb0 <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f96:	2328      	movs	r3, #40	@ 0x28
 8000f98:	9a00      	ldr	r2, [sp, #0]
 8000f9a:	4353      	muls	r3, r2
 8000f9c:	18e1      	adds	r1, r4, r3
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000fa2:	32ff      	adds	r2, #255	@ 0xff
 8000fa4:	8812      	ldrh	r2, [r2, #0]
 8000fa6:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000fa8:	002b      	movs	r3, r5
 8000faa:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8000fac:	f001 ff1a 	bl	8002de4 <USB_ReadPMA>
        ep->xfer_count += count;
 8000fb0:	2328      	movs	r3, #40	@ 0x28
 8000fb2:	9900      	ldr	r1, [sp, #0]
 8000fb4:	4359      	muls	r1, r3
 8000fb6:	1862      	adds	r2, r4, r1
 8000fb8:	32fc      	adds	r2, #252	@ 0xfc
 8000fba:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8000fbc:	1940      	adds	r0, r0, r5
 8000fbe:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 8000fc0:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8000fc2:	1940      	adds	r0, r0, r5
 8000fc4:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000fc6:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_PCD_IRQHandler+0x2e8>
 8000fcc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8000fce:	4295      	cmp	r5, r2
 8000fd0:	d300      	bcc.n	8000fd4 <HAL_PCD_IRQHandler+0x2e8>
 8000fd2:	e0b3      	b.n	800113c <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000fd4:	9a00      	ldr	r2, [sp, #0]
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	4353      	muls	r3, r2
 8000fda:	18e3      	adds	r3, r4, r3
 8000fdc:	3351      	adds	r3, #81	@ 0x51
 8000fde:	33ff      	adds	r3, #255	@ 0xff
 8000fe0:	7819      	ldrb	r1, [r3, #0]
 8000fe2:	f002 fcba 	bl	800395a <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000fe6:	2280      	movs	r2, #128	@ 0x80
 8000fe8:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000fea:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000fec:	4213      	tst	r3, r2
 8000fee:	d100      	bne.n	8000ff2 <HAL_PCD_IRQHandler+0x306>
 8000ff0:	e68a      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ff2:	19c2      	adds	r2, r0, r7
 8000ff4:	8813      	ldrh	r3, [r2, #0]
 8000ff6:	491a      	ldr	r1, [pc, #104]	@ (8001060 <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 8000ff8:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	491e      	ldr	r1, [pc, #120]	@ (8001078 <HAL_PCD_IRQHandler+0x38c>)
 8000ffe:	430b      	orrs	r3, r1
 8001000:	b29b      	uxth	r3, r3
 8001002:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8001004:	2228      	movs	r2, #40	@ 0x28
 8001006:	4356      	muls	r6, r2
 8001008:	19a3      	adds	r3, r4, r6
 800100a:	7cd9      	ldrb	r1, [r3, #19]
 800100c:	2901      	cmp	r1, #1
 800100e:	d000      	beq.n	8001012 <HAL_PCD_IRQHandler+0x326>
 8001010:	e0c7      	b.n	80011a2 <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 8001012:	9900      	ldr	r1, [sp, #0]
 8001014:	3101      	adds	r1, #1
 8001016:	434a      	muls	r2, r1
 8001018:	2100      	movs	r1, #0
 800101a:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 800101c:	7f1a      	ldrb	r2, [r3, #28]
 800101e:	428a      	cmp	r2, r1
 8001020:	d100      	bne.n	8001024 <HAL_PCD_IRQHandler+0x338>
 8001022:	e09e      	b.n	8001162 <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001024:	2240      	movs	r2, #64	@ 0x40
 8001026:	9d01      	ldr	r5, [sp, #4]
 8001028:	9e01      	ldr	r6, [sp, #4]
 800102a:	4015      	ands	r5, r2
 800102c:	4216      	tst	r6, r2
 800102e:	d100      	bne.n	8001032 <HAL_PCD_IRQHandler+0x346>
 8001030:	e0a0      	b.n	8001174 <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001032:	7c5a      	ldrb	r2, [r3, #17]
 8001034:	428a      	cmp	r2, r1
 8001036:	d000      	beq.n	800103a <HAL_PCD_IRQHandler+0x34e>
 8001038:	e087      	b.n	800114a <HAL_PCD_IRQHandler+0x45e>
 800103a:	0002      	movs	r2, r0
 800103c:	3250      	adds	r2, #80	@ 0x50
 800103e:	8811      	ldrh	r1, [r2, #0]
 8001040:	7c1a      	ldrb	r2, [r3, #16]
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_PCD_IRQHandler+0x378>)
 8001044:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001046:	18c0      	adds	r0, r0, r3
 8001048:	1841      	adds	r1, r0, r1
 800104a:	1852      	adds	r2, r2, r1
 800104c:	8813      	ldrh	r3, [r2, #0]
 800104e:	490a      	ldr	r1, [pc, #40]	@ (8001078 <HAL_PCD_IRQHandler+0x38c>)
 8001050:	059b      	lsls	r3, r3, #22
 8001052:	0d9b      	lsrs	r3, r3, #22
 8001054:	8013      	strh	r3, [r2, #0]
 8001056:	8813      	ldrh	r3, [r2, #0]
 8001058:	430b      	orrs	r3, r1
 800105a:	b29b      	uxth	r3, r3
 800105c:	8013      	strh	r3, [r2, #0]
 800105e:	e080      	b.n	8001162 <HAL_PCD_IRQHandler+0x476>
 8001060:	ffff8f0f 	.word	0xffff8f0f
 8001064:	00000402 	.word	0x00000402
 8001068:	00000406 	.word	0x00000406
 800106c:	00000f8f 	.word	0x00000f8f
 8001070:	ffffbf8f 	.word	0xffffbf8f
 8001074:	00008080 	.word	0x00008080
 8001078:	ffff8000 	.word	0xffff8000
 800107c:	ffff8f8f 	.word	0xffff8f8f
 8001080:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001084:	9d02      	ldr	r5, [sp, #8]
 8001086:	882e      	ldrh	r6, [r5, #0]
 8001088:	00d5      	lsls	r5, r2, #3
 800108a:	1976      	adds	r6, r6, r5
 800108c:	4dc7      	ldr	r5, [pc, #796]	@ (80013ac <HAL_PCD_IRQHandler+0x6c0>)
 800108e:	1836      	adds	r6, r6, r0
 8001090:	1976      	adds	r6, r6, r5
 8001092:	8835      	ldrh	r5, [r6, #0]
 8001094:	05ad      	lsls	r5, r5, #22
 8001096:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8001098:	428d      	cmp	r5, r1
 800109a:	d90d      	bls.n	80010b8 <HAL_PCD_IRQHandler+0x3cc>
 800109c:	9903      	ldr	r1, [sp, #12]
 800109e:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80010a0:	0091      	lsls	r1, r2, #2
 80010a2:	1841      	adds	r1, r0, r1
 80010a4:	880e      	ldrh	r6, [r1, #0]
 80010a6:	4bc2      	ldr	r3, [pc, #776]	@ (80013b0 <HAL_PCD_IRQHandler+0x6c4>)
 80010a8:	401e      	ands	r6, r3
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	019b      	lsls	r3, r3, #6
 80010ae:	4073      	eors	r3, r6
 80010b0:	4ec0      	ldr	r6, [pc, #768]	@ (80013b4 <HAL_PCD_IRQHandler+0x6c8>)
 80010b2:	4333      	orrs	r3, r6
 80010b4:	800b      	strh	r3, [r1, #0]
 80010b6:	e002      	b.n	80010be <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 80010b8:	1b49      	subs	r1, r1, r5
 80010ba:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80010bc:	d0f0      	beq.n	80010a0 <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80010be:	9b01      	ldr	r3, [sp, #4]
 80010c0:	065b      	lsls	r3, r3, #25
 80010c2:	d407      	bmi.n	80010d4 <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	1882      	adds	r2, r0, r2
 80010c8:	8813      	ldrh	r3, [r2, #0]
 80010ca:	49bb      	ldr	r1, [pc, #748]	@ (80013b8 <HAL_PCD_IRQHandler+0x6cc>)
 80010cc:	400b      	ands	r3, r1
 80010ce:	49bb      	ldr	r1, [pc, #748]	@ (80013bc <HAL_PCD_IRQHandler+0x6d0>)
 80010d0:	430b      	orrs	r3, r1
 80010d2:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80010d4:	2d00      	cmp	r5, #0
 80010d6:	d100      	bne.n	80010da <HAL_PCD_IRQHandler+0x3ee>
 80010d8:	e76a      	b.n	8000fb0 <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010da:	2328      	movs	r3, #40	@ 0x28
 80010dc:	9a00      	ldr	r2, [sp, #0]
 80010de:	4353      	muls	r3, r2
 80010e0:	18e1      	adds	r1, r4, r3
 80010e2:	000a      	movs	r2, r1
 80010e4:	325b      	adds	r2, #91	@ 0x5b
 80010e6:	e75c      	b.n	8000fa2 <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	1882      	adds	r2, r0, r2
 80010ec:	8816      	ldrh	r6, [r2, #0]
 80010ee:	49b2      	ldr	r1, [pc, #712]	@ (80013b8 <HAL_PCD_IRQHandler+0x6cc>)
 80010f0:	4031      	ands	r1, r6
 80010f2:	4eb2      	ldr	r6, [pc, #712]	@ (80013bc <HAL_PCD_IRQHandler+0x6d0>)
 80010f4:	4331      	orrs	r1, r6
 80010f6:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80010f8:	782a      	ldrb	r2, [r5, #0]
 80010fa:	0091      	lsls	r1, r2, #2
 80010fc:	1841      	adds	r1, r0, r1
 80010fe:	880d      	ldrh	r5, [r1, #0]
 8001100:	0001      	movs	r1, r0
 8001102:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001104:	8809      	ldrh	r1, [r1, #0]
 8001106:	00d2      	lsls	r2, r2, #3
 8001108:	1852      	adds	r2, r2, r1
 800110a:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800110c:	046d      	lsls	r5, r5, #17
 800110e:	d50a      	bpl.n	8001126 <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001110:	49ab      	ldr	r1, [pc, #684]	@ (80013c0 <HAL_PCD_IRQHandler+0x6d4>)
 8001112:	1852      	adds	r2, r2, r1
 8001114:	8812      	ldrh	r2, [r2, #0]
 8001116:	0592      	lsls	r2, r2, #22
 8001118:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 800111a:	2a00      	cmp	r2, #0
 800111c:	d100      	bne.n	8001120 <HAL_PCD_IRQHandler+0x434>
 800111e:	e747      	b.n	8000fb0 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001120:	001a      	movs	r2, r3
 8001122:	3259      	adds	r2, #89	@ 0x59
 8001124:	e6ef      	b.n	8000f06 <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001126:	49a1      	ldr	r1, [pc, #644]	@ (80013ac <HAL_PCD_IRQHandler+0x6c0>)
 8001128:	1852      	adds	r2, r2, r1
 800112a:	8812      	ldrh	r2, [r2, #0]
 800112c:	0592      	lsls	r2, r2, #22
 800112e:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8001130:	2a00      	cmp	r2, #0
 8001132:	d100      	bne.n	8001136 <HAL_PCD_IRQHandler+0x44a>
 8001134:	e73c      	b.n	8000fb0 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001136:	001a      	movs	r2, r3
 8001138:	325b      	adds	r2, #91	@ 0x5b
 800113a:	e6e4      	b.n	8000f06 <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 800113c:	3151      	adds	r1, #81	@ 0x51
 800113e:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001140:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001142:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001144:	f001 fc1c 	bl	8002980 <USB_EPStartXfer>
 8001148:	e74d      	b.n	8000fe6 <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800114a:	2a01      	cmp	r2, #1
 800114c:	d109      	bne.n	8001162 <HAL_PCD_IRQHandler+0x476>
 800114e:	0002      	movs	r2, r0
 8001150:	4d9b      	ldr	r5, [pc, #620]	@ (80013c0 <HAL_PCD_IRQHandler+0x6d4>)
 8001152:	3250      	adds	r2, #80	@ 0x50
 8001154:	8812      	ldrh	r2, [r2, #0]
 8001156:	7c1b      	ldrb	r3, [r3, #16]
 8001158:	1940      	adds	r0, r0, r5
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	1880      	adds	r0, r0, r2
 800115e:	181b      	adds	r3, r3, r0
 8001160:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001162:	2328      	movs	r3, #40	@ 0x28
 8001164:	9a00      	ldr	r2, [sp, #0]
 8001166:	4353      	muls	r3, r2
 8001168:	18e3      	adds	r3, r4, r3
 800116a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800116c:	0020      	movs	r0, r4
 800116e:	f002 fc00 	bl	8003972 <HAL_PCD_DataInStageCallback>
 8001172:	e5c9      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001174:	7c5a      	ldrb	r2, [r3, #17]
 8001176:	2a00      	cmp	r2, #0
 8001178:	d106      	bne.n	8001188 <HAL_PCD_IRQHandler+0x49c>
 800117a:	0002      	movs	r2, r0
 800117c:	3250      	adds	r2, #80	@ 0x50
 800117e:	8811      	ldrh	r1, [r2, #0]
 8001180:	7c1a      	ldrb	r2, [r3, #16]
 8001182:	4b8a      	ldr	r3, [pc, #552]	@ (80013ac <HAL_PCD_IRQHandler+0x6c0>)
 8001184:	00d2      	lsls	r2, r2, #3
 8001186:	e75e      	b.n	8001046 <HAL_PCD_IRQHandler+0x35a>
 8001188:	2a01      	cmp	r2, #1
 800118a:	d1ea      	bne.n	8001162 <HAL_PCD_IRQHandler+0x476>
 800118c:	0002      	movs	r2, r0
 800118e:	4987      	ldr	r1, [pc, #540]	@ (80013ac <HAL_PCD_IRQHandler+0x6c0>)
 8001190:	3250      	adds	r2, #80	@ 0x50
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	7c1b      	ldrb	r3, [r3, #16]
 8001196:	1840      	adds	r0, r0, r1
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	1880      	adds	r0, r0, r2
 800119c:	181b      	adds	r3, r3, r0
 800119e:	801d      	strh	r5, [r3, #0]
 80011a0:	e7df      	b.n	8001162 <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80011a2:	2780      	movs	r7, #128	@ 0x80
 80011a4:	9901      	ldr	r1, [sp, #4]
 80011a6:	007f      	lsls	r7, r7, #1
 80011a8:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011aa:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80011ac:	468c      	mov	ip, r1
 80011ae:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011b0:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 80011b2:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011b4:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80011b6:	4239      	tst	r1, r7
 80011b8:	d11c      	bne.n	80011f4 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011ba:	0007      	movs	r7, r0
 80011bc:	3750      	adds	r7, #80	@ 0x50
 80011be:	883f      	ldrh	r7, [r7, #0]
 80011c0:	18bf      	adds	r7, r7, r2
 80011c2:	4a7f      	ldr	r2, [pc, #508]	@ (80013c0 <HAL_PCD_IRQHandler+0x6d4>)
 80011c4:	183f      	adds	r7, r7, r0
 80011c6:	18bf      	adds	r7, r7, r2
 80011c8:	883a      	ldrh	r2, [r7, #0]
 80011ca:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 80011cc:	0d92      	lsrs	r2, r2, #22
 80011ce:	42aa      	cmp	r2, r5
 80011d0:	d303      	bcc.n	80011da <HAL_PCD_IRQHandler+0x4ee>
 80011d2:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80011d4:	9902      	ldr	r1, [sp, #8]
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80011d8:	e7c8      	b.n	800116c <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 80011da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 80011dc:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 80011de:	1889      	adds	r1, r1, r2
 80011e0:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80011e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 80011e4:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 80011e6:	188a      	adds	r2, r1, r2
 80011e8:	629d      	str	r5, [r3, #40]	@ 0x28
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 80011ec:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011ee:	f001 fbc7 	bl	8002980 <USB_EPStartXfer>
 80011f2:	e589      	b.n	8000d08 <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011f4:	2140      	movs	r1, #64	@ 0x40
 80011f6:	468c      	mov	ip, r1
 80011f8:	9f01      	ldr	r7, [sp, #4]
 80011fa:	0006      	movs	r6, r0
 80011fc:	400f      	ands	r7, r1
 80011fe:	9703      	str	r7, [sp, #12]
 8001200:	4667      	mov	r7, ip
 8001202:	9901      	ldr	r1, [sp, #4]
 8001204:	3650      	adds	r6, #80	@ 0x50
 8001206:	4239      	tst	r1, r7
 8001208:	d100      	bne.n	800120c <HAL_PCD_IRQHandler+0x520>
 800120a:	e0df      	b.n	80013cc <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800120c:	496c      	ldr	r1, [pc, #432]	@ (80013c0 <HAL_PCD_IRQHandler+0x6d4>)
 800120e:	8837      	ldrh	r7, [r6, #0]
 8001210:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8001212:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001214:	19f7      	adds	r7, r6, r7
 8001216:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 8001218:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800121a:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 800121c:	0dbf      	lsrs	r7, r7, #22
 800121e:	42af      	cmp	r7, r5
 8001220:	d201      	bcs.n	8001226 <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 8001222:	1be9      	subs	r1, r5, r7
 8001224:	468c      	mov	ip, r1
 8001226:	4661      	mov	r1, ip
 8001228:	2580      	movs	r5, #128	@ 0x80
 800122a:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800122c:	9901      	ldr	r1, [sp, #4]
 800122e:	01ed      	lsls	r5, r5, #7
 8001230:	4029      	ands	r1, r5
 8001232:	000d      	movs	r5, r1
 8001234:	4661      	mov	r1, ip
 8001236:	2900      	cmp	r1, #0
 8001238:	d147      	bne.n	80012ca <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800123a:	2328      	movs	r3, #40	@ 0x28
 800123c:	9900      	ldr	r1, [sp, #0]
 800123e:	434b      	muls	r3, r1
 8001240:	18e3      	adds	r3, r4, r3
 8001242:	7c5b      	ldrb	r3, [r3, #17]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d130      	bne.n	80012aa <HAL_PCD_IRQHandler+0x5be>
 8001248:	0007      	movs	r7, r0
 800124a:	3750      	adds	r7, #80	@ 0x50
 800124c:	883b      	ldrh	r3, [r7, #0]
 800124e:	495d      	ldr	r1, [pc, #372]	@ (80013c4 <HAL_PCD_IRQHandler+0x6d8>)
 8001250:	18f3      	adds	r3, r6, r3
 8001252:	189b      	adds	r3, r3, r2
 8001254:	881e      	ldrh	r6, [r3, #0]
 8001256:	05b6      	lsls	r6, r6, #22
 8001258:	0db6      	lsrs	r6, r6, #22
 800125a:	801e      	strh	r6, [r3, #0]
 800125c:	881e      	ldrh	r6, [r3, #0]
 800125e:	430e      	orrs	r6, r1
 8001260:	b2b6      	uxth	r6, r6
 8001262:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001264:	4e51      	ldr	r6, [pc, #324]	@ (80013ac <HAL_PCD_IRQHandler+0x6c0>)
 8001266:	883b      	ldrh	r3, [r7, #0]
 8001268:	1980      	adds	r0, r0, r6
 800126a:	18c0      	adds	r0, r0, r3
 800126c:	1880      	adds	r0, r0, r2
 800126e:	8803      	ldrh	r3, [r0, #0]
 8001270:	059b      	lsls	r3, r3, #22
 8001272:	0d9b      	lsrs	r3, r3, #22
 8001274:	8003      	strh	r3, [r0, #0]
 8001276:	8803      	ldrh	r3, [r0, #0]
 8001278:	430b      	orrs	r3, r1
 800127a:	b29b      	uxth	r3, r3
 800127c:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800127e:	0020      	movs	r0, r4
 8001280:	9902      	ldr	r1, [sp, #8]
 8001282:	f002 fb76 	bl	8003972 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001286:	2d00      	cmp	r5, #0
 8001288:	d100      	bne.n	800128c <HAL_PCD_IRQHandler+0x5a0>
 800128a:	e0dc      	b.n	8001446 <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800128c:	2328      	movs	r3, #40	@ 0x28
 800128e:	9a00      	ldr	r2, [sp, #0]
 8001290:	4949      	ldr	r1, [pc, #292]	@ (80013b8 <HAL_PCD_IRQHandler+0x6cc>)
 8001292:	4353      	muls	r3, r2
 8001294:	18e3      	adds	r3, r4, r3
 8001296:	7c1b      	ldrb	r3, [r3, #16]
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	18d2      	adds	r2, r2, r3
 800129e:	8813      	ldrh	r3, [r2, #0]
 80012a0:	400b      	ands	r3, r1
 80012a2:	4949      	ldr	r1, [pc, #292]	@ (80013c8 <HAL_PCD_IRQHandler+0x6dc>)
 80012a4:	430b      	orrs	r3, r1
 80012a6:	8013      	strh	r3, [r2, #0]
 80012a8:	e0cd      	b.n	8001446 <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d1e7      	bne.n	800127e <HAL_PCD_IRQHandler+0x592>
 80012ae:	0007      	movs	r7, r0
 80012b0:	4661      	mov	r1, ip
 80012b2:	3750      	adds	r7, #80	@ 0x50
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	18f3      	adds	r3, r6, r3
 80012b8:	189b      	adds	r3, r3, r2
 80012ba:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012bc:	493b      	ldr	r1, [pc, #236]	@ (80013ac <HAL_PCD_IRQHandler+0x6c0>)
 80012be:	883b      	ldrh	r3, [r7, #0]
 80012c0:	1840      	adds	r0, r0, r1
 80012c2:	18c0      	adds	r0, r0, r3
 80012c4:	1880      	adds	r0, r0, r2
 80012c6:	4663      	mov	r3, ip
 80012c8:	e7d8      	b.n	800127c <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	d00c      	beq.n	80012e8 <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80012ce:	9902      	ldr	r1, [sp, #8]
 80012d0:	0089      	lsls	r1, r1, #2
 80012d2:	1841      	adds	r1, r0, r1
 80012d4:	880d      	ldrh	r5, [r1, #0]
 80012d6:	9101      	str	r1, [sp, #4]
 80012d8:	46ac      	mov	ip, r5
 80012da:	4661      	mov	r1, ip
 80012dc:	4d36      	ldr	r5, [pc, #216]	@ (80013b8 <HAL_PCD_IRQHandler+0x6cc>)
 80012de:	400d      	ands	r5, r1
 80012e0:	4939      	ldr	r1, [pc, #228]	@ (80013c8 <HAL_PCD_IRQHandler+0x6dc>)
 80012e2:	430d      	orrs	r5, r1
 80012e4:	9901      	ldr	r1, [sp, #4]
 80012e6:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 80012e8:	2528      	movs	r5, #40	@ 0x28
 80012ea:	9900      	ldr	r1, [sp, #0]
 80012ec:	434d      	muls	r5, r1
 80012ee:	2134      	movs	r1, #52	@ 0x34
 80012f0:	468c      	mov	ip, r1
 80012f2:	1965      	adds	r5, r4, r5
 80012f4:	44ac      	add	ip, r5
 80012f6:	4661      	mov	r1, ip
 80012f8:	7809      	ldrb	r1, [r1, #0]
 80012fa:	2901      	cmp	r1, #1
 80012fc:	d000      	beq.n	8001300 <HAL_PCD_IRQHandler+0x614>
 80012fe:	e0a2      	b.n	8001446 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8001300:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001302:	19c9      	adds	r1, r1, r7
 8001304:	6269      	str	r1, [r5, #36]	@ 0x24
 8001306:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 8001308:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800130a:	19c9      	adds	r1, r1, r7
 800130c:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800130e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001310:	6a29      	ldr	r1, [r5, #32]
 8001312:	428b      	cmp	r3, r1
 8001314:	d317      	bcc.n	8001346 <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800131a:	2328      	movs	r3, #40	@ 0x28
 800131c:	9d00      	ldr	r5, [sp, #0]
 800131e:	436b      	muls	r3, r5
 8001320:	18e3      	adds	r3, r4, r3
 8001322:	7c5d      	ldrb	r5, [r3, #17]
 8001324:	b28b      	uxth	r3, r1
 8001326:	2d00      	cmp	r5, #0
 8001328:	d137      	bne.n	800139a <HAL_PCD_IRQHandler+0x6ae>
 800132a:	0005      	movs	r5, r0
 800132c:	3550      	adds	r5, #80	@ 0x50
 800132e:	882d      	ldrh	r5, [r5, #0]
 8001330:	1975      	adds	r5, r6, r5
 8001332:	18aa      	adds	r2, r5, r2
 8001334:	8815      	ldrh	r5, [r2, #0]
 8001336:	05ad      	lsls	r5, r5, #22
 8001338:	0dad      	lsrs	r5, r5, #22
 800133a:	8015      	strh	r5, [r2, #0]
 800133c:	2900      	cmp	r1, #0
 800133e:	d10e      	bne.n	800135e <HAL_PCD_IRQHandler+0x672>
 8001340:	8811      	ldrh	r1, [r2, #0]
 8001342:	4d20      	ldr	r5, [pc, #128]	@ (80013c4 <HAL_PCD_IRQHandler+0x6d8>)
 8001344:	e013      	b.n	800136e <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 800134a:	4661      	mov	r1, ip
 800134c:	700b      	strb	r3, [r1, #0]
          len = TxPctSize;
 800134e:	0039      	movs	r1, r7
 8001350:	e7e3      	b.n	800131a <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 8001352:	2100      	movs	r1, #0
 8001354:	4667      	mov	r7, ip
 8001356:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 8001358:	6329      	str	r1, [r5, #48]	@ 0x30
          len = ep->xfer_len_db;
 800135a:	0019      	movs	r1, r3
 800135c:	e7dd      	b.n	800131a <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800135e:	293e      	cmp	r1, #62	@ 0x3e
 8001360:	d811      	bhi.n	8001386 <HAL_PCD_IRQHandler+0x69a>
 8001362:	2601      	movs	r6, #1
 8001364:	084d      	lsrs	r5, r1, #1
 8001366:	400e      	ands	r6, r1
 8001368:	19ad      	adds	r5, r5, r6
 800136a:	8811      	ldrh	r1, [r2, #0]
 800136c:	02ad      	lsls	r5, r5, #10
 800136e:	4329      	orrs	r1, r5
 8001370:	b289      	uxth	r1, r1
 8001372:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001374:	2228      	movs	r2, #40	@ 0x28
 8001376:	9900      	ldr	r1, [sp, #0]
 8001378:	434a      	muls	r2, r1
 800137a:	18a2      	adds	r2, r4, r2
 800137c:	8b12      	ldrh	r2, [r2, #24]
 800137e:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001380:	f001 fae9 	bl	8002956 <USB_WritePMA>
 8001384:	e05f      	b.n	8001446 <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001386:	261f      	movs	r6, #31
 8001388:	094d      	lsrs	r5, r1, #5
 800138a:	4031      	ands	r1, r6
 800138c:	424e      	negs	r6, r1
 800138e:	4171      	adcs	r1, r6
 8001390:	1a6d      	subs	r5, r5, r1
 8001392:	8811      	ldrh	r1, [r2, #0]
 8001394:	02ad      	lsls	r5, r5, #10
 8001396:	4329      	orrs	r1, r5
 8001398:	e7d3      	b.n	8001342 <HAL_PCD_IRQHandler+0x656>
 800139a:	2d01      	cmp	r5, #1
 800139c:	d1ea      	bne.n	8001374 <HAL_PCD_IRQHandler+0x688>
 800139e:	0001      	movs	r1, r0
 80013a0:	3150      	adds	r1, #80	@ 0x50
 80013a2:	8809      	ldrh	r1, [r1, #0]
 80013a4:	1876      	adds	r6, r6, r1
 80013a6:	18b6      	adds	r6, r6, r2
 80013a8:	8033      	strh	r3, [r6, #0]
 80013aa:	e7e3      	b.n	8001374 <HAL_PCD_IRQHandler+0x688>
 80013ac:	00000406 	.word	0x00000406
 80013b0:	ffffbf8f 	.word	0xffffbf8f
 80013b4:	00008080 	.word	0x00008080
 80013b8:	ffff8f8f 	.word	0xffff8f8f
 80013bc:	000080c0 	.word	0x000080c0
 80013c0:	00000402 	.word	0x00000402
 80013c4:	ffff8000 	.word	0xffff8000
 80013c8:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013cc:	49ac      	ldr	r1, [pc, #688]	@ (8001680 <HAL_PCD_IRQHandler+0x994>)
 80013ce:	8836      	ldrh	r6, [r6, #0]
 80013d0:	468c      	mov	ip, r1
 80013d2:	4484      	add	ip, r0
 80013d4:	4466      	add	r6, ip
 80013d6:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 80013d8:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013da:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 80013dc:	0db6      	lsrs	r6, r6, #22
 80013de:	42ae      	cmp	r6, r5
 80013e0:	d800      	bhi.n	80013e4 <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 80013e2:	1baf      	subs	r7, r5, r6
 80013e4:	2580      	movs	r5, #128	@ 0x80
 80013e6:	9901      	ldr	r1, [sp, #4]
 80013e8:	01ed      	lsls	r5, r5, #7
 80013ea:	4029      	ands	r1, r5
 80013ec:	000d      	movs	r5, r1
 80013ee:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d149      	bne.n	8001488 <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80013f4:	2328      	movs	r3, #40	@ 0x28
 80013f6:	9900      	ldr	r1, [sp, #0]
 80013f8:	434b      	muls	r3, r1
 80013fa:	18e3      	adds	r3, r4, r3
 80013fc:	7c5b      	ldrb	r3, [r3, #17]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d133      	bne.n	800146a <HAL_PCD_IRQHandler+0x77e>
 8001402:	0003      	movs	r3, r0
 8001404:	499f      	ldr	r1, [pc, #636]	@ (8001684 <HAL_PCD_IRQHandler+0x998>)
 8001406:	3350      	adds	r3, #80	@ 0x50
 8001408:	881e      	ldrh	r6, [r3, #0]
 800140a:	1840      	adds	r0, r0, r1
 800140c:	1980      	adds	r0, r0, r6
 800140e:	1880      	adds	r0, r0, r2
 8001410:	8806      	ldrh	r6, [r0, #0]
 8001412:	499d      	ldr	r1, [pc, #628]	@ (8001688 <HAL_PCD_IRQHandler+0x99c>)
 8001414:	05b6      	lsls	r6, r6, #22
 8001416:	0db6      	lsrs	r6, r6, #22
 8001418:	8006      	strh	r6, [r0, #0]
 800141a:	8806      	ldrh	r6, [r0, #0]
 800141c:	430e      	orrs	r6, r1
 800141e:	b2b6      	uxth	r6, r6
 8001420:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4463      	add	r3, ip
 8001426:	189b      	adds	r3, r3, r2
 8001428:	881a      	ldrh	r2, [r3, #0]
 800142a:	0592      	lsls	r2, r2, #22
 800142c:	0d92      	lsrs	r2, r2, #22
 800142e:	801a      	strh	r2, [r3, #0]
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	b292      	uxth	r2, r2
 8001436:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001438:	0020      	movs	r0, r4
 800143a:	9902      	ldr	r1, [sp, #8]
 800143c:	f002 fa99 	bl	8003972 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001440:	2d00      	cmp	r5, #0
 8001442:	d100      	bne.n	8001446 <HAL_PCD_IRQHandler+0x75a>
 8001444:	e722      	b.n	800128c <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001446:	2328      	movs	r3, #40	@ 0x28
 8001448:	9a00      	ldr	r2, [sp, #0]
 800144a:	4353      	muls	r3, r2
 800144c:	18e3      	adds	r3, r4, r3
 800144e:	7c1b      	ldrb	r3, [r3, #16]
 8001450:	6822      	ldr	r2, [r4, #0]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	18d2      	adds	r2, r2, r3
 8001456:	8811      	ldrh	r1, [r2, #0]
 8001458:	4b8c      	ldr	r3, [pc, #560]	@ (800168c <HAL_PCD_IRQHandler+0x9a0>)
 800145a:	4019      	ands	r1, r3
 800145c:	2330      	movs	r3, #48	@ 0x30
 800145e:	404b      	eors	r3, r1
 8001460:	498b      	ldr	r1, [pc, #556]	@ (8001690 <HAL_PCD_IRQHandler+0x9a4>)
 8001462:	430b      	orrs	r3, r1
 8001464:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001466:	f7ff fc4f 	bl	8000d08 <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800146a:	2b01      	cmp	r3, #1
 800146c:	d1e4      	bne.n	8001438 <HAL_PCD_IRQHandler+0x74c>
 800146e:	0003      	movs	r3, r0
 8001470:	4984      	ldr	r1, [pc, #528]	@ (8001684 <HAL_PCD_IRQHandler+0x998>)
 8001472:	3350      	adds	r3, #80	@ 0x50
 8001474:	881e      	ldrh	r6, [r3, #0]
 8001476:	1840      	adds	r0, r0, r1
 8001478:	1980      	adds	r0, r0, r6
 800147a:	1880      	adds	r0, r0, r2
 800147c:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	4463      	add	r3, ip
 8001482:	189b      	adds	r3, r3, r2
 8001484:	801f      	strh	r7, [r3, #0]
 8001486:	e7d7      	b.n	8001438 <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001488:	2900      	cmp	r1, #0
 800148a:	d108      	bne.n	800149e <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800148c:	9902      	ldr	r1, [sp, #8]
 800148e:	4d81      	ldr	r5, [pc, #516]	@ (8001694 <HAL_PCD_IRQHandler+0x9a8>)
 8001490:	0089      	lsls	r1, r1, #2
 8001492:	1841      	adds	r1, r0, r1
 8001494:	880f      	ldrh	r7, [r1, #0]
 8001496:	403d      	ands	r5, r7
 8001498:	4f7f      	ldr	r7, [pc, #508]	@ (8001698 <HAL_PCD_IRQHandler+0x9ac>)
 800149a:	433d      	orrs	r5, r7
 800149c:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800149e:	2728      	movs	r7, #40	@ 0x28
 80014a0:	9900      	ldr	r1, [sp, #0]
 80014a2:	434f      	muls	r7, r1
 80014a4:	19e7      	adds	r7, r4, r7
 80014a6:	0039      	movs	r1, r7
 80014a8:	3134      	adds	r1, #52	@ 0x34
 80014aa:	9101      	str	r1, [sp, #4]
 80014ac:	7809      	ldrb	r1, [r1, #0]
 80014ae:	2901      	cmp	r1, #1
 80014b0:	d1c9      	bne.n	8001446 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 80014b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014b4:	1989      	adds	r1, r1, r6
 80014b6:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80014b8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80014ba:	19ad      	adds	r5, r5, r6
 80014bc:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80014be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c0:	6a3d      	ldr	r5, [r7, #32]
 80014c2:	42ab      	cmp	r3, r5
 80014c4:	d317      	bcc.n	80014f6 <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 80014c6:	1b5b      	subs	r3, r3, r5
 80014c8:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80014ca:	2328      	movs	r3, #40	@ 0x28
 80014cc:	9e00      	ldr	r6, [sp, #0]
 80014ce:	4373      	muls	r3, r6
 80014d0:	18e3      	adds	r3, r4, r3
 80014d2:	7c5e      	ldrb	r6, [r3, #17]
 80014d4:	b2ab      	uxth	r3, r5
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d134      	bne.n	8001544 <HAL_PCD_IRQHandler+0x858>
 80014da:	0006      	movs	r6, r0
 80014dc:	3650      	adds	r6, #80	@ 0x50
 80014de:	8836      	ldrh	r6, [r6, #0]
 80014e0:	4466      	add	r6, ip
 80014e2:	18b2      	adds	r2, r6, r2
 80014e4:	8816      	ldrh	r6, [r2, #0]
 80014e6:	05b6      	lsls	r6, r6, #22
 80014e8:	0db6      	lsrs	r6, r6, #22
 80014ea:	8016      	strh	r6, [r2, #0]
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d10e      	bne.n	800150e <HAL_PCD_IRQHandler+0x822>
 80014f0:	8815      	ldrh	r5, [r2, #0]
 80014f2:	4e65      	ldr	r6, [pc, #404]	@ (8001688 <HAL_PCD_IRQHandler+0x99c>)
 80014f4:	e013      	b.n	800151e <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 80014fa:	9d01      	ldr	r5, [sp, #4]
 80014fc:	702b      	strb	r3, [r5, #0]
          len = TxPctSize;
 80014fe:	0035      	movs	r5, r6
 8001500:	e7e3      	b.n	80014ca <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 8001502:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 8001504:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 8001506:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8001508:	7035      	strb	r5, [r6, #0]
          len = ep->xfer_len_db;
 800150a:	001d      	movs	r5, r3
 800150c:	e7dd      	b.n	80014ca <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800150e:	2d3e      	cmp	r5, #62	@ 0x3e
 8001510:	d80e      	bhi.n	8001530 <HAL_PCD_IRQHandler+0x844>
 8001512:	2701      	movs	r7, #1
 8001514:	086e      	lsrs	r6, r5, #1
 8001516:	402f      	ands	r7, r5
 8001518:	19f6      	adds	r6, r6, r7
 800151a:	8815      	ldrh	r5, [r2, #0]
 800151c:	02b6      	lsls	r6, r6, #10
 800151e:	4335      	orrs	r5, r6
 8001520:	b2ad      	uxth	r5, r5
 8001522:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001524:	2228      	movs	r2, #40	@ 0x28
 8001526:	9d00      	ldr	r5, [sp, #0]
 8001528:	436a      	muls	r2, r5
 800152a:	18a2      	adds	r2, r4, r2
 800152c:	8b52      	ldrh	r2, [r2, #26]
 800152e:	e727      	b.n	8001380 <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001530:	271f      	movs	r7, #31
 8001532:	096e      	lsrs	r6, r5, #5
 8001534:	403d      	ands	r5, r7
 8001536:	426f      	negs	r7, r5
 8001538:	417d      	adcs	r5, r7
 800153a:	1b76      	subs	r6, r6, r5
 800153c:	8815      	ldrh	r5, [r2, #0]
 800153e:	02b6      	lsls	r6, r6, #10
 8001540:	4335      	orrs	r5, r6
 8001542:	e7d6      	b.n	80014f2 <HAL_PCD_IRQHandler+0x806>
 8001544:	2e01      	cmp	r6, #1
 8001546:	d1ed      	bne.n	8001524 <HAL_PCD_IRQHandler+0x838>
 8001548:	0005      	movs	r5, r0
 800154a:	3550      	adds	r5, #80	@ 0x50
 800154c:	882d      	ldrh	r5, [r5, #0]
 800154e:	4465      	add	r5, ip
 8001550:	18aa      	adds	r2, r5, r2
 8001552:	8013      	strh	r3, [r2, #0]
 8001554:	e7e6      	b.n	8001524 <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001556:	0543      	lsls	r3, r0, #21
 8001558:	d50e      	bpl.n	8001578 <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	494f      	ldr	r1, [pc, #316]	@ (800169c <HAL_PCD_IRQHandler+0x9b0>)
 800155e:	3306      	adds	r3, #6
 8001560:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8001562:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001564:	400a      	ands	r2, r1
 8001566:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8001568:	f002 fa15 	bl	8003996 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800156c:	0029      	movs	r1, r5
 800156e:	0020      	movs	r0, r4
 8001570:	f7ff fbab 	bl	8000cca <HAL_PCD_SetAddress>
    return;
 8001574:	f7ff fbce 	bl	8000d14 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001578:	0443      	lsls	r3, r0, #17
 800157a:	d507      	bpl.n	800158c <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	4948      	ldr	r1, [pc, #288]	@ (80016a0 <HAL_PCD_IRQHandler+0x9b4>)
 8001580:	3306      	adds	r3, #6
 8001582:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001584:	400a      	ands	r2, r1
 8001586:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 8001588:	f7ff fbc4 	bl	8000d14 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	0001      	movs	r1, r0
 8001590:	019b      	lsls	r3, r3, #6
 8001592:	4019      	ands	r1, r3
 8001594:	4218      	tst	r0, r3
 8001596:	d004      	beq.n	80015a2 <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	4942      	ldr	r1, [pc, #264]	@ (80016a4 <HAL_PCD_IRQHandler+0x9b8>)
 800159c:	3306      	adds	r3, #6
 800159e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80015a0:	e7f0      	b.n	8001584 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015a2:	04c3      	lsls	r3, r0, #19
 80015a4:	d51a      	bpl.n	80015dc <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015a6:	2004      	movs	r0, #4
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	3302      	adds	r3, #2
 80015ac:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80015ae:	4382      	bics	r2, r0
 80015b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015b2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80015b4:	1800      	adds	r0, r0, r0
 80015b6:	4382      	bics	r2, r0
 80015b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 80015ba:	23b2      	movs	r3, #178	@ 0xb2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	5ce2      	ldrb	r2, [r4, r3]
 80015c0:	2a01      	cmp	r2, #1
 80015c2:	d103      	bne.n	80015cc <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015c4:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80015c6:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015c8:	f000 f983 	bl	80018d2 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 80015cc:	0020      	movs	r0, r4
 80015ce:	f002 fa05 	bl	80039dc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	4934      	ldr	r1, [pc, #208]	@ (80016a8 <HAL_PCD_IRQHandler+0x9bc>)
 80015d6:	3306      	adds	r3, #6
 80015d8:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80015da:	e7d3      	b.n	8001584 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80015dc:	0503      	lsls	r3, r0, #20
 80015de:	d513      	bpl.n	8001608 <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015e0:	2108      	movs	r1, #8
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	1c9a      	adds	r2, r3, #2
 80015e6:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015e8:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015ea:	4301      	orrs	r1, r0
 80015ec:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015ee:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 80015f0:	482e      	ldr	r0, [pc, #184]	@ (80016ac <HAL_PCD_IRQHandler+0x9c0>)
 80015f2:	4001      	ands	r1, r0
 80015f4:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80015f6:	2304      	movs	r3, #4
 80015f8:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 80015fa:	430b      	orrs	r3, r1
 80015fc:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 80015fe:	0020      	movs	r0, r4
 8001600:	f002 f9da 	bl	80039b8 <HAL_PCD_SuspendCallback>
 8001604:	f7ff fb86 	bl	8000d14 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001608:	2580      	movs	r5, #128	@ 0x80
 800160a:	4228      	tst	r0, r5
 800160c:	d021      	beq.n	8001652 <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 800160e:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001610:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8001612:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001614:	1d99      	adds	r1, r3, #6
 8001616:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 8001618:	43aa      	bics	r2, r5
 800161a:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 800161c:	5c22      	ldrb	r2, [r4, r0]
 800161e:	2a00      	cmp	r2, #0
 8001620:	d1ed      	bne.n	80015fe <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001622:	2104      	movs	r1, #4
 8001624:	1c9a      	adds	r2, r3, #2
 8001626:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001628:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800162a:	4329      	orrs	r1, r5
 800162c:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800162e:	2108      	movs	r1, #8
 8001630:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 8001632:	4329      	orrs	r1, r5
 8001634:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 8001636:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001638:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 800163a:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800163c:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800163e:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	4013      	ands	r3, r2
 8001644:	22b3      	movs	r2, #179	@ 0xb3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800164a:	f000 f942 	bl	80018d2 <HAL_PCDEx_LPM_Callback>
 800164e:	f7ff fb61 	bl	8000d14 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001652:	0583      	lsls	r3, r0, #22
 8001654:	d50a      	bpl.n	800166c <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	4915      	ldr	r1, [pc, #84]	@ (80016b0 <HAL_PCD_IRQHandler+0x9c4>)
 800165a:	3306      	adds	r3, #6
 800165c:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 800165e:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001660:	400a      	ands	r2, r1
 8001662:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8001664:	f002 f990 	bl	8003988 <HAL_PCD_SOFCallback>
    return;
 8001668:	f7ff fb54 	bl	8000d14 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800166c:	05c0      	lsls	r0, r0, #23
 800166e:	d401      	bmi.n	8001674 <HAL_PCD_IRQHandler+0x988>
 8001670:	f7ff fb50 	bl	8000d14 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	490f      	ldr	r1, [pc, #60]	@ (80016b4 <HAL_PCD_IRQHandler+0x9c8>)
 8001678:	3306      	adds	r3, #6
 800167a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800167c:	e782      	b.n	8001584 <HAL_PCD_IRQHandler+0x898>
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	00000406 	.word	0x00000406
 8001684:	00000402 	.word	0x00000402
 8001688:	ffff8000 	.word	0xffff8000
 800168c:	ffff8fbf 	.word	0xffff8fbf
 8001690:	00008080 	.word	0x00008080
 8001694:	ffff8f8f 	.word	0xffff8f8f
 8001698:	0000c080 	.word	0x0000c080
 800169c:	fffffbff 	.word	0xfffffbff
 80016a0:	ffffbfff 	.word	0xffffbfff
 80016a4:	ffffdfff 	.word	0xffffdfff
 80016a8:	ffffefff 	.word	0xffffefff
 80016ac:	fffff7ff 	.word	0xfffff7ff
 80016b0:	fffffdff 	.word	0xfffffdff
 80016b4:	fffffeff 	.word	0xfffffeff

080016b8 <HAL_PCD_EP_Open>:
{
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	0004      	movs	r4, r0
 80016bc:	2007      	movs	r0, #7
 80016be:	000d      	movs	r5, r1
 80016c0:	4008      	ands	r0, r1
 80016c2:	2128      	movs	r1, #40	@ 0x28
 80016c4:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80016c6:	b26d      	sxtb	r5, r5
 80016c8:	1866      	adds	r6, r4, r1
 80016ca:	2d00      	cmp	r5, #0
 80016cc:	da18      	bge.n	8001700 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 80016ce:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	3110      	adds	r1, #16
 80016d2:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80016d4:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016d6:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 80016d8:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80016da:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d101      	bne.n	80016e4 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80016e4:	25a4      	movs	r5, #164	@ 0xa4
 80016e6:	00ad      	lsls	r5, r5, #2
 80016e8:	5d63      	ldrb	r3, [r4, r5]
 80016ea:	2002      	movs	r0, #2
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d006      	beq.n	80016fe <HAL_PCD_EP_Open+0x46>
 80016f0:	2301      	movs	r3, #1
 80016f2:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	f000 ff35 	bl	8002564 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016fa:	2000      	movs	r0, #0
 80016fc:	5560      	strb	r0, [r4, r5]
}
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001700:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001702:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001704:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001706:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001708:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800170c:	7035      	strb	r5, [r6, #0]
 800170e:	e7e2      	b.n	80016d6 <HAL_PCD_EP_Open+0x1e>

08001710 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001710:	2207      	movs	r2, #7
{
 8001712:	000b      	movs	r3, r1
 8001714:	400a      	ands	r2, r1
 8001716:	2128      	movs	r1, #40	@ 0x28
 8001718:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 800171a:	b25b      	sxtb	r3, r3
{
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	0004      	movs	r4, r0
 8001720:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001722:	2b00      	cmp	r3, #0
 8001724:	da12      	bge.n	800174c <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 8001726:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001728:	3110      	adds	r1, #16
 800172a:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800172c:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 800172e:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8001730:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001732:	00ad      	lsls	r5, r5, #2
 8001734:	5d63      	ldrb	r3, [r4, r5]
 8001736:	2002      	movs	r0, #2
 8001738:	2b01      	cmp	r3, #1
 800173a:	d006      	beq.n	800174a <HAL_PCD_EP_Close+0x3a>
 800173c:	2301      	movs	r3, #1
 800173e:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	f001 f81f 	bl	8002784 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001746:	2000      	movs	r0, #0
 8001748:	5560      	strb	r0, [r4, r5]
}
 800174a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800174c:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174e:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001750:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001752:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001754:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001756:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001758:	7003      	strb	r3, [r0, #0]
 800175a:	e7e8      	b.n	800172e <HAL_PCD_EP_Close+0x1e>

0800175c <HAL_PCD_EP_Receive>:
{
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	2407      	movs	r4, #7
}
 8001760:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8001762:	3421      	adds	r4, #33	@ 0x21
 8001764:	434c      	muls	r4, r1
 8001766:	1906      	adds	r6, r0, r4
 8001768:	0037      	movs	r7, r6
 800176a:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 800176c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 800176e:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8001770:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8001772:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8001774:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001776:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8001778:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 800177a:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800177c:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 800177e:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8001780:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8001782:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001784:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001786:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001788:	6800      	ldr	r0, [r0, #0]
 800178a:	f001 f8f9 	bl	8002980 <USB_EPStartXfer>
}
 800178e:	0028      	movs	r0, r5
 8001790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001792 <HAL_PCD_EP_Transmit>:
{
 8001792:	b570      	push	{r4, r5, r6, lr}
 8001794:	2407      	movs	r4, #7
}
 8001796:	4021      	ands	r1, r4
 8001798:	3421      	adds	r4, #33	@ 0x21
 800179a:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 800179c:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 800179e:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 80017a0:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80017a2:	2201      	movs	r2, #1
 80017a4:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 80017a6:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 80017a8:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 80017aa:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ac:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 80017ae:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b0:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 80017b2:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 80017b4:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b6:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017b8:	6800      	ldr	r0, [r0, #0]
 80017ba:	f001 f8e1 	bl	8002980 <USB_EPStartXfer>
}
 80017be:	0028      	movs	r0, r5
 80017c0:	bd70      	pop	{r4, r5, r6, pc}

080017c2 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c2:	2207      	movs	r2, #7
{
 80017c4:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c6:	7903      	ldrb	r3, [r0, #4]
{
 80017c8:	0004      	movs	r4, r0
 80017ca:	400a      	ands	r2, r1
    return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d319      	bcc.n	8001806 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 80017d2:	b248      	sxtb	r0, r1
 80017d4:	2328      	movs	r3, #40	@ 0x28
 80017d6:	2800      	cmp	r0, #0
 80017d8:	da16      	bge.n	8001808 <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017da:	4353      	muls	r3, r2
 80017dc:	0019      	movs	r1, r3
    ep->is_in = 1U;
 80017de:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e0:	3110      	adds	r1, #16
    ep->is_in = 1U;
 80017e2:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e4:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80017e6:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 80017e8:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 80017ea:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 80017ec:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ee:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80017f0:	00ad      	lsls	r5, r5, #2
 80017f2:	5d62      	ldrb	r2, [r4, r5]
 80017f4:	2002      	movs	r0, #2
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d005      	beq.n	8001806 <HAL_PCD_EP_SetStall+0x44>
 80017fa:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	f001 f83b 	bl	8002878 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001802:	2000      	movs	r0, #0
 8001804:	5560      	strb	r0, [r4, r5]
}
 8001806:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001808:	434b      	muls	r3, r1
 800180a:	0019      	movs	r1, r3
    ep->is_in = 0U;
 800180c:	2000      	movs	r0, #0
 800180e:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8001810:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001812:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8001814:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001816:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8001818:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 800181a:	7018      	strb	r0, [r3, #0]
 800181c:	e7e4      	b.n	80017e8 <HAL_PCD_EP_SetStall+0x26>

0800181e <HAL_PCD_EP_ClrStall>:
{
 800181e:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001820:	220f      	movs	r2, #15
{
 8001822:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001824:	7901      	ldrb	r1, [r0, #4]
{
 8001826:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001828:	401a      	ands	r2, r3
    return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800182c:	4291      	cmp	r1, r2
 800182e:	d31b      	bcc.n	8001868 <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8001830:	2207      	movs	r2, #7
 8001832:	2128      	movs	r1, #40	@ 0x28
 8001834:	401a      	ands	r2, r3
 8001836:	4351      	muls	r1, r2
 8001838:	b25b      	sxtb	r3, r3
 800183a:	1860      	adds	r0, r4, r1
 800183c:	2b00      	cmp	r3, #0
 800183e:	da14      	bge.n	800186a <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8001840:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001842:	3110      	adds	r1, #16
 8001844:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001846:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8001848:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 800184a:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 800184c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800184e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001850:	00b6      	lsls	r6, r6, #2
 8001852:	5da3      	ldrb	r3, [r4, r6]
 8001854:	2002      	movs	r0, #2
 8001856:	2b01      	cmp	r3, #1
 8001858:	d006      	beq.n	8001868 <HAL_PCD_EP_ClrStall+0x4a>
 800185a:	2301      	movs	r3, #1
 800185c:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800185e:	6820      	ldr	r0, [r4, #0]
 8001860:	f001 f82c 	bl	80028bc <USB_EPClearStall>
  return HAL_OK;
 8001864:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8001866:	55a5      	strb	r5, [r4, r6]
}
 8001868:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800186a:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186c:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 800186e:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001870:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001872:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001874:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001876:	7003      	strb	r3, [r0, #0]
 8001878:	e7e6      	b.n	8001848 <HAL_PCD_EP_ClrStall+0x2a>

0800187a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800187a:	b530      	push	{r4, r5, lr}
 800187c:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800187e:	060d      	lsls	r5, r1, #24
 8001880:	d50b      	bpl.n	800189a <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001882:	2507      	movs	r5, #7
 8001884:	4029      	ands	r1, r5
 8001886:	434c      	muls	r4, r1
 8001888:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800188a:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800188c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800188e:	2a00      	cmp	r2, #0
 8001890:	d107      	bne.n	80018a2 <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8001892:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001894:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001896:	2000      	movs	r0, #0
 8001898:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800189a:	434c      	muls	r4, r1
 800189c:	3451      	adds	r4, #81	@ 0x51
 800189e:	34ff      	adds	r4, #255	@ 0xff
 80018a0:	e7f3      	b.n	800188a <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 80018a2:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018a4:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80018a6:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018a8:	e7f5      	b.n	8001896 <HAL_PCDEx_PMAConfig+0x1c>

080018aa <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80018aa:	6803      	ldr	r3, [r0, #0]
{
 80018ac:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 80018ae:	20b4      	movs	r0, #180	@ 0xb4
 80018b0:	2101      	movs	r1, #1
{
 80018b2:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 80018b4:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 80018b6:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 80018b8:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 80018ba:	2000      	movs	r0, #0
 80018bc:	00a4      	lsls	r4, r4, #2
 80018be:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80018c0:	3354      	adds	r3, #84	@ 0x54
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80018c6:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80018c8:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80018ca:	8819      	ldrh	r1, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 80018d0:	bd10      	pop	{r4, pc}

080018d2 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80018d2:	4770      	bx	lr

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	0004      	movs	r4, r0
 80018d8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018da:	2800      	cmp	r0, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80018de:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80018e0:	b005      	add	sp, #20
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e4:	6803      	ldr	r3, [r0, #0]
 80018e6:	07db      	lsls	r3, r3, #31
 80018e8:	d433      	bmi.n	8001952 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	079b      	lsls	r3, r3, #30
 80018ee:	d500      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x1e>
 80018f0:	e087      	b.n	8001a02 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	071b      	lsls	r3, r3, #28
 80018f6:	d500      	bpl.n	80018fa <HAL_RCC_OscConfig+0x26>
 80018f8:	e0c8      	b.n	8001a8c <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	075b      	lsls	r3, r3, #29
 80018fe:	d500      	bpl.n	8001902 <HAL_RCC_OscConfig+0x2e>
 8001900:	e0eb      	b.n	8001ada <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	06db      	lsls	r3, r3, #27
 8001906:	d51a      	bpl.n	800193e <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001908:	6962      	ldr	r2, [r4, #20]
 800190a:	2304      	movs	r3, #4
 800190c:	4db9      	ldr	r5, [pc, #740]	@ (8001bf4 <HAL_RCC_OscConfig+0x320>)
 800190e:	2a01      	cmp	r2, #1
 8001910:	d000      	beq.n	8001914 <HAL_RCC_OscConfig+0x40>
 8001912:	e154      	b.n	8001bbe <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001914:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001916:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001918:	430b      	orrs	r3, r1
 800191a:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800191c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800191e:	431a      	orrs	r2, r3
 8001920:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001922:	f7fe ff39 	bl	8000798 <HAL_GetTick>
 8001926:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001928:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800192a:	423b      	tst	r3, r7
 800192c:	d100      	bne.n	8001930 <HAL_RCC_OscConfig+0x5c>
 800192e:	e13f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001930:	21f8      	movs	r1, #248	@ 0xf8
 8001932:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001934:	69a3      	ldr	r3, [r4, #24]
 8001936:	438a      	bics	r2, r1
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4313      	orrs	r3, r2
 800193c:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	069b      	lsls	r3, r3, #26
 8001942:	d500      	bpl.n	8001946 <HAL_RCC_OscConfig+0x72>
 8001944:	e162      	b.n	8001c0c <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001946:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <HAL_RCC_OscConfig+0x7a>
 800194c:	e1a1      	b.n	8001c92 <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 800194e:	2000      	movs	r0, #0
 8001950:	e7c6      	b.n	80018e0 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001952:	220c      	movs	r2, #12
 8001954:	4da7      	ldr	r5, [pc, #668]	@ (8001bf4 <HAL_RCC_OscConfig+0x320>)
 8001956:	686b      	ldr	r3, [r5, #4]
 8001958:	4013      	ands	r3, r2
 800195a:	2b04      	cmp	r3, #4
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800195e:	686b      	ldr	r3, [r5, #4]
 8001960:	4013      	ands	r3, r2
 8001962:	2b08      	cmp	r3, #8
 8001964:	d10e      	bne.n	8001984 <HAL_RCC_OscConfig+0xb0>
 8001966:	22c0      	movs	r2, #192	@ 0xc0
 8001968:	686b      	ldr	r3, [r5, #4]
 800196a:	0252      	lsls	r2, r2, #9
 800196c:	4013      	ands	r3, r2
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	0252      	lsls	r2, r2, #9
 8001972:	4293      	cmp	r3, r2
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	682b      	ldr	r3, [r5, #0]
 8001978:	039b      	lsls	r3, r3, #14
 800197a:	d5b6      	bpl.n	80018ea <HAL_RCC_OscConfig+0x16>
 800197c:	6863      	ldr	r3, [r4, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1b3      	bne.n	80018ea <HAL_RCC_OscConfig+0x16>
 8001982:	e7ac      	b.n	80018de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0xde>
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	682a      	ldr	r2, [r5, #0]
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	4313      	orrs	r3, r2
 8001992:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001994:	f7fe ff00 	bl	8000798 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001998:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 800199a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199c:	02bf      	lsls	r7, r7, #10
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	423b      	tst	r3, r7
 80019a2:	d1a2      	bne.n	80018ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7fe fef8 	bl	8000798 <HAL_GetTick>
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	2864      	cmp	r0, #100	@ 0x64
 80019ac:	d9f7      	bls.n	800199e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80019ae:	2003      	movs	r0, #3
 80019b0:	e796      	b.n	80018e0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d115      	bne.n	80019e2 <HAL_RCC_OscConfig+0x10e>
 80019b6:	682b      	ldr	r3, [r5, #0]
 80019b8:	4a8f      	ldr	r2, [pc, #572]	@ (8001bf8 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	4013      	ands	r3, r2
 80019be:	602b      	str	r3, [r5, #0]
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	4a8e      	ldr	r2, [pc, #568]	@ (8001bfc <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c4:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	4013      	ands	r3, r2
 80019c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019ca:	f7fe fee5 	bl	8000798 <HAL_GetTick>
 80019ce:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	423b      	tst	r3, r7
 80019d4:	d089      	beq.n	80018ea <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7fe fedf 	bl	8000798 <HAL_GetTick>
 80019da:	1b80      	subs	r0, r0, r6
 80019dc:	2864      	cmp	r0, #100	@ 0x64
 80019de:	d9f7      	bls.n	80019d0 <HAL_RCC_OscConfig+0xfc>
 80019e0:	e7e5      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d105      	bne.n	80019f2 <HAL_RCC_OscConfig+0x11e>
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	682a      	ldr	r2, [r5, #0]
 80019ea:	02db      	lsls	r3, r3, #11
 80019ec:	4313      	orrs	r3, r2
 80019ee:	602b      	str	r3, [r5, #0]
 80019f0:	e7cb      	b.n	800198a <HAL_RCC_OscConfig+0xb6>
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	@ (8001bf8 <HAL_RCC_OscConfig+0x324>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	602b      	str	r3, [r5, #0]
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	4a7f      	ldr	r2, [pc, #508]	@ (8001bfc <HAL_RCC_OscConfig+0x328>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	e7c7      	b.n	8001992 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a02:	220c      	movs	r2, #12
 8001a04:	4d7b      	ldr	r5, [pc, #492]	@ (8001bf4 <HAL_RCC_OscConfig+0x320>)
 8001a06:	686b      	ldr	r3, [r5, #4]
 8001a08:	4213      	tst	r3, r2
 8001a0a:	d00b      	beq.n	8001a24 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d116      	bne.n	8001a42 <HAL_RCC_OscConfig+0x16e>
 8001a14:	22c0      	movs	r2, #192	@ 0xc0
 8001a16:	686b      	ldr	r3, [r5, #4]
 8001a18:	0252      	lsls	r2, r2, #9
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2280      	movs	r2, #128	@ 0x80
 8001a1e:	0212      	lsls	r2, r2, #8
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d10e      	bne.n	8001a42 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	079b      	lsls	r3, r3, #30
 8001a28:	d503      	bpl.n	8001a32 <HAL_RCC_OscConfig+0x15e>
 8001a2a:	68e3      	ldr	r3, [r4, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d000      	beq.n	8001a32 <HAL_RCC_OscConfig+0x15e>
 8001a30:	e755      	b.n	80018de <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	21f8      	movs	r1, #248	@ 0xf8
 8001a34:	682a      	ldr	r2, [r5, #0]
 8001a36:	6923      	ldr	r3, [r4, #16]
 8001a38:	438a      	bics	r2, r1
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	e757      	b.n	80018f2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a42:	68e2      	ldr	r2, [r4, #12]
 8001a44:	2301      	movs	r3, #1
 8001a46:	2a00      	cmp	r2, #0
 8001a48:	d00f      	beq.n	8001a6a <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8001a4a:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a52:	f7fe fea1 	bl	8000798 <HAL_GetTick>
 8001a56:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	423b      	tst	r3, r7
 8001a5c:	d1e9      	bne.n	8001a32 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7fe fe9b 	bl	8000798 <HAL_GetTick>
 8001a62:	1b80      	subs	r0, r0, r6
 8001a64:	2802      	cmp	r0, #2
 8001a66:	d9f7      	bls.n	8001a58 <HAL_RCC_OscConfig+0x184>
 8001a68:	e7a1      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	439a      	bics	r2, r3
 8001a70:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001a72:	f7fe fe91 	bl	8000798 <HAL_GetTick>
 8001a76:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a78:	682b      	ldr	r3, [r5, #0]
 8001a7a:	423b      	tst	r3, r7
 8001a7c:	d100      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1ac>
 8001a7e:	e738      	b.n	80018f2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7fe fe8a 	bl	8000798 <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9f6      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1a4>
 8001a8a:	e790      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	69e2      	ldr	r2, [r4, #28]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	4d58      	ldr	r5, [pc, #352]	@ (8001bf4 <HAL_RCC_OscConfig+0x320>)
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	d010      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8001a96:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a98:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001a9e:	f7fe fe7b 	bl	8000798 <HAL_GetTick>
 8001aa2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001aa6:	423b      	tst	r3, r7
 8001aa8:	d000      	beq.n	8001aac <HAL_RCC_OscConfig+0x1d8>
 8001aaa:	e726      	b.n	80018fa <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7fe fe74 	bl	8000798 <HAL_GetTick>
 8001ab0:	1b80      	subs	r0, r0, r6
 8001ab2:	2802      	cmp	r0, #2
 8001ab4:	d9f6      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x1d0>
 8001ab6:	e77a      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aba:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001abc:	439a      	bics	r2, r3
 8001abe:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001ac0:	f7fe fe6a 	bl	8000798 <HAL_GetTick>
 8001ac4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001ac8:	423b      	tst	r3, r7
 8001aca:	d100      	bne.n	8001ace <HAL_RCC_OscConfig+0x1fa>
 8001acc:	e715      	b.n	80018fa <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ace:	f7fe fe63 	bl	8000798 <HAL_GetTick>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	2802      	cmp	r0, #2
 8001ad6:	d9f6      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f2>
 8001ad8:	e769      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001adc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4d45      	ldr	r5, [pc, #276]	@ (8001bf4 <HAL_RCC_OscConfig+0x320>)
 8001ae0:	0552      	lsls	r2, r2, #21
 8001ae2:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001ae4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4213      	tst	r3, r2
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	69eb      	ldr	r3, [r5, #28]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61eb      	str	r3, [r5, #28]
 8001af0:	69eb      	ldr	r3, [r5, #28]
 8001af2:	4013      	ands	r3, r2
 8001af4:	9303      	str	r3, [sp, #12]
 8001af6:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	2780      	movs	r7, #128	@ 0x80
 8001afe:	4e40      	ldr	r6, [pc, #256]	@ (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	007f      	lsls	r7, r7, #1
 8001b02:	6833      	ldr	r3, [r6, #0]
 8001b04:	423b      	tst	r3, r7
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	68a3      	ldr	r3, [r4, #8]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d122      	bne.n	8001b54 <HAL_RCC_OscConfig+0x280>
 8001b0e:	6a2a      	ldr	r2, [r5, #32]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001b14:	f7fe fe40 	bl	8000798 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001b1a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	6a2b      	ldr	r3, [r5, #32]
 8001b1e:	423b      	tst	r3, r7
 8001b20:	d03f      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 8001b22:	9b00      	ldr	r3, [sp, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d000      	beq.n	8001b2a <HAL_RCC_OscConfig+0x256>
 8001b28:	e6eb      	b.n	8001902 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2a:	69eb      	ldr	r3, [r5, #28]
 8001b2c:	4a35      	ldr	r2, [pc, #212]	@ (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61eb      	str	r3, [r5, #28]
 8001b32:	e6e6      	b.n	8001902 <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b34:	6833      	ldr	r3, [r6, #0]
 8001b36:	433b      	orrs	r3, r7
 8001b38:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b3a:	f7fe fe2d 	bl	8000798 <HAL_GetTick>
 8001b3e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	6833      	ldr	r3, [r6, #0]
 8001b42:	423b      	tst	r3, r7
 8001b44:	d1e0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7fe fe27 	bl	8000798 <HAL_GetTick>
 8001b4a:	9b01      	ldr	r3, [sp, #4]
 8001b4c:	1ac0      	subs	r0, r0, r3
 8001b4e:	2864      	cmp	r0, #100	@ 0x64
 8001b50:	d9f6      	bls.n	8001b40 <HAL_RCC_OscConfig+0x26c>
 8001b52:	e72c      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d114      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2b0>
 8001b5a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5e:	4393      	bics	r3, r2
 8001b60:	622b      	str	r3, [r5, #32]
 8001b62:	6a2b      	ldr	r3, [r5, #32]
 8001b64:	3203      	adds	r2, #3
 8001b66:	4393      	bics	r3, r2
 8001b68:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001b6a:	f7fe fe15 	bl	8000798 <HAL_GetTick>
 8001b6e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	6a2b      	ldr	r3, [r5, #32]
 8001b72:	423b      	tst	r3, r7
 8001b74:	d0d5      	beq.n	8001b22 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7fe fe0f 	bl	8000798 <HAL_GetTick>
 8001b7a:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <HAL_RCC_OscConfig+0x334>)
 8001b7c:	1b80      	subs	r0, r0, r6
 8001b7e:	4298      	cmp	r0, r3
 8001b80:	d9f6      	bls.n	8001b70 <HAL_RCC_OscConfig+0x29c>
 8001b82:	e714      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2c0>
 8001b88:	6a29      	ldr	r1, [r5, #32]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	622b      	str	r3, [r5, #32]
 8001b90:	6a2b      	ldr	r3, [r5, #32]
 8001b92:	e7bd      	b.n	8001b10 <HAL_RCC_OscConfig+0x23c>
 8001b94:	6a2b      	ldr	r3, [r5, #32]
 8001b96:	4393      	bics	r3, r2
 8001b98:	2204      	movs	r2, #4
 8001b9a:	622b      	str	r3, [r5, #32]
 8001b9c:	6a2b      	ldr	r3, [r5, #32]
 8001b9e:	4393      	bics	r3, r2
 8001ba0:	e7b7      	b.n	8001b12 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7fe fdf9 	bl	8000798 <HAL_GetTick>
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_RCC_OscConfig+0x334>)
 8001ba8:	1b80      	subs	r0, r0, r6
 8001baa:	4298      	cmp	r0, r3
 8001bac:	d9b6      	bls.n	8001b1c <HAL_RCC_OscConfig+0x248>
 8001bae:	e6fe      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bb0:	f7fe fdf2 	bl	8000798 <HAL_GetTick>
 8001bb4:	1b80      	subs	r0, r0, r6
 8001bb6:	2802      	cmp	r0, #2
 8001bb8:	d800      	bhi.n	8001bbc <HAL_RCC_OscConfig+0x2e8>
 8001bba:	e6b5      	b.n	8001928 <HAL_RCC_OscConfig+0x54>
 8001bbc:	e6f7      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bbe:	3205      	adds	r2, #5
 8001bc0:	d103      	bne.n	8001bca <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bc2:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001bc4:	439a      	bics	r2, r3
 8001bc6:	636a      	str	r2, [r5, #52]	@ 0x34
 8001bc8:	e6b2      	b.n	8001930 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bca:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bcc:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bce:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001bd0:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bd2:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001bd4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001bda:	f7fe fddd 	bl	8000798 <HAL_GetTick>
 8001bde:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001be0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001be2:	423b      	tst	r3, r7
 8001be4:	d100      	bne.n	8001be8 <HAL_RCC_OscConfig+0x314>
 8001be6:	e6aa      	b.n	800193e <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001be8:	f7fe fdd6 	bl	8000798 <HAL_GetTick>
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	2802      	cmp	r0, #2
 8001bf0:	d9f6      	bls.n	8001be0 <HAL_RCC_OscConfig+0x30c>
 8001bf2:	e6dc      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	fffeffff 	.word	0xfffeffff
 8001bfc:	fffbffff 	.word	0xfffbffff
 8001c00:	40007000 	.word	0x40007000
 8001c04:	efffffff 	.word	0xefffffff
 8001c08:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	4d55      	ldr	r5, [pc, #340]	@ (8001d64 <HAL_RCC_OscConfig+0x490>)
 8001c10:	686b      	ldr	r3, [r5, #4]
 8001c12:	4013      	ands	r3, r2
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d009      	beq.n	8001c2c <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c18:	686b      	ldr	r3, [r5, #4]
 8001c1a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d10e      	bne.n	8001c3e <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c20:	22c0      	movs	r2, #192	@ 0xc0
 8001c22:	686b      	ldr	r3, [r5, #4]
 8001c24:	0252      	lsls	r2, r2, #9
 8001c26:	4013      	ands	r3, r2
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d108      	bne.n	8001c3e <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c2c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c2e:	039b      	lsls	r3, r3, #14
 8001c30:	d400      	bmi.n	8001c34 <HAL_RCC_OscConfig+0x360>
 8001c32:	e688      	b.n	8001946 <HAL_RCC_OscConfig+0x72>
 8001c34:	6a23      	ldr	r3, [r4, #32]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d000      	beq.n	8001c3c <HAL_RCC_OscConfig+0x368>
 8001c3a:	e650      	b.n	80018de <HAL_RCC_OscConfig+0xa>
 8001c3c:	e683      	b.n	8001946 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c3e:	6a23      	ldr	r3, [r4, #32]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fda3 	bl	8000798 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c52:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001c54:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c56:	02bf      	lsls	r7, r7, #10
 8001c58:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c5a:	423b      	tst	r3, r7
 8001c5c:	d000      	beq.n	8001c60 <HAL_RCC_OscConfig+0x38c>
 8001c5e:	e672      	b.n	8001946 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c60:	f7fe fd9a 	bl	8000798 <HAL_GetTick>
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	2802      	cmp	r0, #2
 8001c68:	d9f6      	bls.n	8001c58 <HAL_RCC_OscConfig+0x384>
 8001c6a:	e6a0      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001c6c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d68 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c70:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001c72:	4013      	ands	r3, r2
 8001c74:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8001c76:	f7fe fd8f 	bl	8000798 <HAL_GetTick>
 8001c7a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c7c:	02bf      	lsls	r7, r7, #10
 8001c7e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c80:	423b      	tst	r3, r7
 8001c82:	d100      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3b2>
 8001c84:	e65f      	b.n	8001946 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7fe fd87 	bl	8000798 <HAL_GetTick>
 8001c8a:	1b80      	subs	r0, r0, r6
 8001c8c:	2802      	cmp	r0, #2
 8001c8e:	d9f6      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3aa>
 8001c90:	e68d      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c92:	210c      	movs	r1, #12
 8001c94:	4d33      	ldr	r5, [pc, #204]	@ (8001d64 <HAL_RCC_OscConfig+0x490>)
 8001c96:	686a      	ldr	r2, [r5, #4]
 8001c98:	400a      	ands	r2, r1
 8001c9a:	2a08      	cmp	r2, #8
 8001c9c:	d047      	beq.n	8001d2e <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9e:	4a33      	ldr	r2, [pc, #204]	@ (8001d6c <HAL_RCC_OscConfig+0x498>)
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d132      	bne.n	8001d0a <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ca8:	4013      	ands	r3, r2
 8001caa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cac:	f7fe fd74 	bl	8000798 <HAL_GetTick>
 8001cb0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	04bf      	lsls	r7, r7, #18
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	423b      	tst	r3, r7
 8001cb8:	d121      	bne.n	8001cfe <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cba:	220f      	movs	r2, #15
 8001cbc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbe:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc4:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001cca:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001ccc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cce:	686a      	ldr	r2, [r5, #4]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	4927      	ldr	r1, [pc, #156]	@ (8001d70 <HAL_RCC_OscConfig+0x49c>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	682a      	ldr	r2, [r5, #0]
 8001cde:	045b      	lsls	r3, r3, #17
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fd58 	bl	8000798 <HAL_GetTick>
 8001ce8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	4233      	tst	r3, r6
 8001cee:	d000      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x41e>
 8001cf0:	e62d      	b.n	800194e <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe fd51 	bl	8000798 <HAL_GetTick>
 8001cf6:	1b00      	subs	r0, r0, r4
 8001cf8:	2802      	cmp	r0, #2
 8001cfa:	d9f6      	bls.n	8001cea <HAL_RCC_OscConfig+0x416>
 8001cfc:	e657      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe fd4b 	bl	8000798 <HAL_GetTick>
 8001d02:	1b80      	subs	r0, r0, r6
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d9d5      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3e0>
 8001d08:	e651      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4013      	ands	r3, r2
 8001d10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d12:	f7fe fd41 	bl	8000798 <HAL_GetTick>
 8001d16:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d18:	04b6      	lsls	r6, r6, #18
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	4233      	tst	r3, r6
 8001d1e:	d100      	bne.n	8001d22 <HAL_RCC_OscConfig+0x44e>
 8001d20:	e615      	b.n	800194e <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe fd39 	bl	8000798 <HAL_GetTick>
 8001d26:	1b00      	subs	r0, r0, r4
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	d9f6      	bls.n	8001d1a <HAL_RCC_OscConfig+0x446>
 8001d2c:	e63f      	b.n	80019ae <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d100      	bne.n	8001d34 <HAL_RCC_OscConfig+0x460>
 8001d32:	e5d4      	b.n	80018de <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d34:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8001d36:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d38:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001d3a:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001d3c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	4002      	ands	r2, r0
 8001d40:	428a      	cmp	r2, r1
 8001d42:	d000      	beq.n	8001d46 <HAL_RCC_OscConfig+0x472>
 8001d44:	e5cb      	b.n	80018de <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d46:	220f      	movs	r2, #15
 8001d48:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d000      	beq.n	8001d52 <HAL_RCC_OscConfig+0x47e>
 8001d50:	e5c5      	b.n	80018de <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d52:	23f0      	movs	r3, #240	@ 0xf0
 8001d54:	039b      	lsls	r3, r3, #14
 8001d56:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d5a:	1ac0      	subs	r0, r0, r3
 8001d5c:	1e43      	subs	r3, r0, #1
 8001d5e:	4198      	sbcs	r0, r3
 8001d60:	b2c0      	uxtb	r0, r0
 8001d62:	e5bd      	b.n	80018e0 <HAL_RCC_OscConfig+0xc>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	fffeffff 	.word	0xfffeffff
 8001d6c:	feffffff 	.word	0xfeffffff
 8001d70:	ffc27fff 	.word	0xffc27fff

08001d74 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d74:	200c      	movs	r0, #12
{
 8001d76:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001d78:	4d13      	ldr	r5, [pc, #76]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001d7a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d7c:	4018      	ands	r0, r3
 8001d7e:	2808      	cmp	r0, #8
 8001d80:	d008      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d82:	380c      	subs	r0, #12
 8001d84:	4243      	negs	r3, r0
 8001d86:	4158      	adcs	r0, r3
 8001d88:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x58>)
 8001d8a:	4240      	negs	r0, r0
 8001d8c:	4018      	ands	r0, r3
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001d90:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d94:	200f      	movs	r0, #15
 8001d96:	490f      	ldr	r1, [pc, #60]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001d98:	0c9a      	lsrs	r2, r3, #18
 8001d9a:	4002      	ands	r2, r0
 8001d9c:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d9e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001da0:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001da2:	4002      	ands	r2, r0
 8001da4:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001da6:	22c0      	movs	r2, #192	@ 0xc0
 8001da8:	2080      	movs	r0, #128	@ 0x80
 8001daa:	0252      	lsls	r2, r2, #9
 8001dac:	4013      	ands	r3, r2
 8001dae:	0240      	lsls	r0, r0, #9
 8001db0:	4283      	cmp	r3, r0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001db4:	4806      	ldr	r0, [pc, #24]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d1fb      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dbc:	4807      	ldr	r0, [pc, #28]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dbe:	f7fe f9c9 	bl	8000154 <__udivsi3>
 8001dc2:	4360      	muls	r0, r4
 8001dc4:	e7e5      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x1e>
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	02625a00 	.word	0x02625a00
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	08004bda 	.word	0x08004bda
 8001dd8:	08004bca 	.word	0x08004bca
 8001ddc:	02dc6c00 	.word	0x02dc6c00

08001de0 <HAL_RCC_ClockConfig>:
{
 8001de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001de2:	0004      	movs	r4, r0
 8001de4:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001dea:	2001      	movs	r0, #1
}
 8001dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dee:	2201      	movs	r2, #1
 8001df0:	4d3a      	ldr	r5, [pc, #232]	@ (8001edc <HAL_RCC_ClockConfig+0xfc>)
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	4013      	ands	r3, r2
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d31c      	bcc.n	8001e34 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	0793      	lsls	r3, r2, #30
 8001dfe:	d422      	bmi.n	8001e46 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e00:	07d2      	lsls	r2, r2, #31
 8001e02:	d42f      	bmi.n	8001e64 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e04:	2301      	movs	r3, #1
 8001e06:	682a      	ldr	r2, [r5, #0]
 8001e08:	401a      	ands	r2, r3
 8001e0a:	42ba      	cmp	r2, r7
 8001e0c:	d857      	bhi.n	8001ebe <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	4d33      	ldr	r5, [pc, #204]	@ (8001ee0 <HAL_RCC_ClockConfig+0x100>)
 8001e12:	075b      	lsls	r3, r3, #29
 8001e14:	d45a      	bmi.n	8001ecc <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e16:	f7ff ffad 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001e1a:	686b      	ldr	r3, [r5, #4]
 8001e1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <HAL_RCC_ClockConfig+0x104>)
 8001e1e:	061b      	lsls	r3, r3, #24
 8001e20:	0f1b      	lsrs	r3, r3, #28
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	4930      	ldr	r1, [pc, #192]	@ (8001ee8 <HAL_RCC_ClockConfig+0x108>)
 8001e26:	40d8      	lsrs	r0, r3
 8001e28:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7fe fc74 	bl	8000718 <HAL_InitTick>
  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
 8001e32:	e7db      	b.n	8001dec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e34:	682b      	ldr	r3, [r5, #0]
 8001e36:	4393      	bics	r3, r2
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	428b      	cmp	r3, r1
 8001e42:	d1d2      	bne.n	8001dea <HAL_RCC_ClockConfig+0xa>
 8001e44:	e7d9      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e46:	4926      	ldr	r1, [pc, #152]	@ (8001ee0 <HAL_RCC_ClockConfig+0x100>)
 8001e48:	0753      	lsls	r3, r2, #29
 8001e4a:	d504      	bpl.n	8001e56 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e4c:	23e0      	movs	r3, #224	@ 0xe0
 8001e4e:	6848      	ldr	r0, [r1, #4]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4303      	orrs	r3, r0
 8001e54:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e56:	20f0      	movs	r0, #240	@ 0xf0
 8001e58:	684b      	ldr	r3, [r1, #4]
 8001e5a:	4383      	bics	r3, r0
 8001e5c:	68a0      	ldr	r0, [r4, #8]
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e7cd      	b.n	8001e00 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e64:	6862      	ldr	r2, [r4, #4]
 8001e66:	4e1e      	ldr	r6, [pc, #120]	@ (8001ee0 <HAL_RCC_ClockConfig+0x100>)
 8001e68:	2a01      	cmp	r2, #1
 8001e6a:	d103      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6c:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e6e:	039b      	lsls	r3, r3, #14
 8001e70:	d405      	bmi.n	8001e7e <HAL_RCC_ClockConfig+0x9e>
 8001e72:	e7ba      	b.n	8001dea <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e74:	2a02      	cmp	r2, #2
 8001e76:	d11a      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	6833      	ldr	r3, [r6, #0]
 8001e7a:	019b      	lsls	r3, r3, #6
 8001e7c:	d5b5      	bpl.n	8001dea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	2103      	movs	r1, #3
 8001e80:	6873      	ldr	r3, [r6, #4]
 8001e82:	438b      	bics	r3, r1
 8001e84:	4313      	orrs	r3, r2
 8001e86:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e88:	f7fe fc86 	bl	8000798 <HAL_GetTick>
 8001e8c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	230c      	movs	r3, #12
 8001e90:	6872      	ldr	r2, [r6, #4]
 8001e92:	401a      	ands	r2, r3
 8001e94:	6863      	ldr	r3, [r4, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d0b3      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7fe fc7c 	bl	8000798 <HAL_GetTick>
 8001ea0:	9b01      	ldr	r3, [sp, #4]
 8001ea2:	1ac0      	subs	r0, r0, r3
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_RCC_ClockConfig+0x10c>)
 8001ea6:	4298      	cmp	r0, r3
 8001ea8:	d9f1      	bls.n	8001e8e <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8001eaa:	2003      	movs	r0, #3
 8001eac:	e79e      	b.n	8001dec <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001eae:	2a03      	cmp	r2, #3
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001eb2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8001eb4:	e7db      	b.n	8001e6e <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	6833      	ldr	r3, [r6, #0]
 8001eb8:	079b      	lsls	r3, r3, #30
 8001eba:	d4e0      	bmi.n	8001e7e <HAL_RCC_ClockConfig+0x9e>
 8001ebc:	e795      	b.n	8001dea <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	682a      	ldr	r2, [r5, #0]
 8001ec0:	439a      	bics	r2, r3
 8001ec2:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec4:	682a      	ldr	r2, [r5, #0]
 8001ec6:	421a      	tst	r2, r3
 8001ec8:	d0a1      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x2e>
 8001eca:	e78e      	b.n	8001dea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	686b      	ldr	r3, [r5, #4]
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <HAL_RCC_ClockConfig+0x110>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	68e2      	ldr	r2, [r4, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	606b      	str	r3, [r5, #4]
 8001ed8:	e79d      	b.n	8001e16 <HAL_RCC_ClockConfig+0x36>
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08004bba 	.word	0x08004bba
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	00001388 	.word	0x00001388
 8001ef0:	fffff8ff 	.word	0xfffff8ff

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4905      	ldr	r1, [pc, #20]	@ (8001f10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001efc:	055b      	lsls	r3, r3, #21
 8001efe:	0f5b      	lsrs	r3, r3, #29
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	6810      	ldr	r0, [r2, #0]
 8001f04:	40d8      	lsrs	r0, r3
}    
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	08004bb2 	.word	0x08004bb2

08001f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f16:	6803      	ldr	r3, [r0, #0]
{
 8001f18:	0005      	movs	r5, r0
 8001f1a:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f1c:	03db      	lsls	r3, r3, #15
 8001f1e:	d52b      	bpl.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f20:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f24:	4c41      	ldr	r4, [pc, #260]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f26:	0552      	lsls	r2, r2, #21
 8001f28:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2c:	4213      	tst	r3, r2
 8001f2e:	d108      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	69e3      	ldr	r3, [r4, #28]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61e3      	str	r3, [r4, #28]
 8001f36:	69e3      	ldr	r3, [r4, #28]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	9303      	str	r3, [sp, #12]
 8001f3c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	2780      	movs	r7, #128	@ 0x80
 8001f44:	4e3a      	ldr	r6, [pc, #232]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001f46:	007f      	lsls	r7, r7, #1
 8001f48:	6833      	ldr	r3, [r6, #0]
 8001f4a:	423b      	tst	r3, r7
 8001f4c:	d034      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f4e:	6a21      	ldr	r1, [r4, #32]
 8001f50:	22c0      	movs	r2, #192	@ 0xc0
 8001f52:	0008      	movs	r0, r1
 8001f54:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f56:	686b      	ldr	r3, [r5, #4]
 8001f58:	4e36      	ldr	r6, [pc, #216]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f5a:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f5c:	4211      	tst	r1, r2
 8001f5e:	d13d      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xc8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f60:	6a23      	ldr	r3, [r4, #32]
 8001f62:	686a      	ldr	r2, [r5, #4]
 8001f64:	4033      	ands	r3, r6
 8001f66:	4313      	orrs	r3, r2
 8001f68:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f6a:	9b00      	ldr	r3, [sp, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d103      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	69e3      	ldr	r3, [r4, #28]
 8001f72:	4a31      	ldr	r2, [pc, #196]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	07da      	lsls	r2, r3, #31
 8001f7c:	d506      	bpl.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f7e:	2003      	movs	r0, #3
 8001f80:	492a      	ldr	r1, [pc, #168]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f82:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001f84:	4382      	bics	r2, r0
 8001f86:	68a8      	ldr	r0, [r5, #8]
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8c:	069a      	lsls	r2, r3, #26
 8001f8e:	d506      	bpl.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f90:	2010      	movs	r0, #16
 8001f92:	4926      	ldr	r1, [pc, #152]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f94:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001f96:	4382      	bics	r2, r0
 8001f98:	68e8      	ldr	r0, [r5, #12]
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f9e:	039a      	lsls	r2, r3, #14
 8001fa0:	d506      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fa2:	2080      	movs	r0, #128	@ 0x80
 8001fa4:	4921      	ldr	r1, [pc, #132]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001fa6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001fa8:	4382      	bics	r2, r0
 8001faa:	6968      	ldr	r0, [r5, #20]
 8001fac:	4302      	orrs	r2, r0
 8001fae:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fb0:	055b      	lsls	r3, r3, #21
 8001fb2:	d433      	bmi.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e00f      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb8:	6833      	ldr	r3, [r6, #0]
 8001fba:	433b      	orrs	r3, r7
 8001fbc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fbeb 	bl	8000798 <HAL_GetTick>
 8001fc2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	6833      	ldr	r3, [r6, #0]
 8001fc6:	423b      	tst	r3, r7
 8001fc8:	d1c1      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7fe fbe5 	bl	8000798 <HAL_GetTick>
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	1ac0      	subs	r0, r0, r3
 8001fd2:	2864      	cmp	r0, #100	@ 0x64
 8001fd4:	d9f6      	bls.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8001fd6:	2003      	movs	r0, #3
}
 8001fd8:	b005      	add	sp, #20
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fdc:	4013      	ands	r3, r2
 8001fde:	4283      	cmp	r3, r0
 8001fe0:	d0be      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fe2:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fe6:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe8:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fea:	0252      	lsls	r2, r2, #9
 8001fec:	4302      	orrs	r2, r0
 8001fee:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff0:	6a22      	ldr	r2, [r4, #32]
 8001ff2:	4812      	ldr	r0, [pc, #72]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ff4:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff6:	4002      	ands	r2, r0
 8001ff8:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8001ffa:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ffc:	07db      	lsls	r3, r3, #31
 8001ffe:	d5af      	bpl.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8002000:	f7fe fbca 	bl	8000798 <HAL_GetTick>
 8002004:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002006:	2202      	movs	r2, #2
 8002008:	6a23      	ldr	r3, [r4, #32]
 800200a:	4213      	tst	r3, r2
 800200c:	d1a8      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fbc3 	bl	8000798 <HAL_GetTick>
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002014:	1bc0      	subs	r0, r0, r7
 8002016:	4298      	cmp	r0, r3
 8002018:	d9f5      	bls.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 800201a:	e7dc      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800201c:	2140      	movs	r1, #64	@ 0x40
 800201e:	4a03      	ldr	r2, [pc, #12]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002020:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002022:	438b      	bics	r3, r1
 8002024:	6929      	ldr	r1, [r5, #16]
 8002026:	430b      	orrs	r3, r1
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	e7c3      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	fffffcff 	.word	0xfffffcff
 8002038:	efffffff 	.word	0xefffffff
 800203c:	fffeffff 	.word	0xfffeffff
 8002040:	00001388 	.word	0x00001388

08002044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002044:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002046:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800204a:	2201      	movs	r2, #1
 800204c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002050:	6801      	ldr	r1, [r0, #0]
 8002052:	4d12      	ldr	r5, [pc, #72]	@ (800209c <UART_EndRxTransfer+0x58>)
 8002054:	680b      	ldr	r3, [r1, #0]
 8002056:	402b      	ands	r3, r5
 8002058:	600b      	str	r3, [r1, #0]
 800205a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800205e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002062:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002066:	6801      	ldr	r1, [r0, #0]
 8002068:	688b      	ldr	r3, [r1, #8]
 800206a:	4393      	bics	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
 800206e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002072:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002074:	4293      	cmp	r3, r2
 8002076:	d10a      	bne.n	800208e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002078:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002080:	2410      	movs	r4, #16
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	43a3      	bics	r3, r4
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800208e:	2220      	movs	r2, #32
 8002090:	1d03      	adds	r3, r0, #4
 8002092:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002094:	2300      	movs	r3, #0
 8002096:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002098:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800209a:	bd30      	pop	{r4, r5, pc}
 800209c:	fffffedf 	.word	0xfffffedf

080020a0 <UART_SetConfig>:
{
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020a4:	6925      	ldr	r5, [r4, #16]
 80020a6:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020a8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020aa:	4329      	orrs	r1, r5
 80020ac:	6965      	ldr	r5, [r4, #20]
 80020ae:	69c2      	ldr	r2, [r0, #28]
 80020b0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	4d3d      	ldr	r5, [pc, #244]	@ (80021ac <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b6:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020b8:	4028      	ands	r0, r5
 80020ba:	4301      	orrs	r1, r0
 80020bc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	483b      	ldr	r0, [pc, #236]	@ (80021b0 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 80020c2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c4:	4001      	ands	r1, r0
 80020c6:	68e0      	ldr	r0, [r4, #12]
 80020c8:	4301      	orrs	r1, r0
 80020ca:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020cc:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020ce:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80020d0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020d2:	4d38      	ldr	r5, [pc, #224]	@ (80021b4 <UART_SetConfig+0x114>)
 80020d4:	4028      	ands	r0, r5
 80020d6:	4301      	orrs	r1, r0
 80020d8:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020da:	4937      	ldr	r1, [pc, #220]	@ (80021b8 <UART_SetConfig+0x118>)
 80020dc:	428b      	cmp	r3, r1
 80020de:	d115      	bne.n	800210c <UART_SetConfig+0x6c>
 80020e0:	2103      	movs	r1, #3
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <UART_SetConfig+0x11c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	400b      	ands	r3, r1
 80020e8:	3b01      	subs	r3, #1
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d851      	bhi.n	8002192 <UART_SetConfig+0xf2>
 80020ee:	4934      	ldr	r1, [pc, #208]	@ (80021c0 <UART_SetConfig+0x120>)
 80020f0:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d127      	bne.n	800214a <UART_SetConfig+0xaa>
    switch (clocksource)
 80020fa:	2808      	cmp	r0, #8
 80020fc:	d847      	bhi.n	800218e <UART_SetConfig+0xee>
 80020fe:	f7fe f815 	bl	800012c <__gnu_thumb1_case_uqi>
 8002102:	464c      	.short	0x464c
 8002104:	460b460e 	.word	0x460b460e
 8002108:	4646      	.short	0x4646
 800210a:	0f          	.byte	0x0f
 800210b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800210c:	492d      	ldr	r1, [pc, #180]	@ (80021c4 <UART_SetConfig+0x124>)
 800210e:	185b      	adds	r3, r3, r1
 8002110:	1e59      	subs	r1, r3, #1
 8002112:	418b      	sbcs	r3, r1
 8002114:	0118      	lsls	r0, r3, #4
 8002116:	e7ec      	b.n	80020f2 <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 8002118:	f7ff fe2c 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 800211c:	e03f      	b.n	800219e <UART_SetConfig+0xfe>
    switch (clocksource)
 800211e:	4a2a      	ldr	r2, [pc, #168]	@ (80021c8 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002120:	6861      	ldr	r1, [r4, #4]
 8002122:	0052      	lsls	r2, r2, #1
 8002124:	0848      	lsrs	r0, r1, #1
 8002126:	1810      	adds	r0, r2, r0
 8002128:	f7fe f814 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800212c:	0002      	movs	r2, r0
 800212e:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <UART_SetConfig+0x12c>)
 8002130:	3a10      	subs	r2, #16
 8002132:	429a      	cmp	r2, r3
 8002134:	d82b      	bhi.n	800218e <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002136:	230f      	movs	r3, #15
 8002138:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800213a:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800213c:	439a      	bics	r2, r3
 800213e:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002140:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	4303      	orrs	r3, r0
 8002146:	60d3      	str	r3, [r2, #12]
 8002148:	e02b      	b.n	80021a2 <UART_SetConfig+0x102>
    switch (clocksource)
 800214a:	2808      	cmp	r0, #8
 800214c:	d81f      	bhi.n	800218e <UART_SetConfig+0xee>
 800214e:	f7fd ffed 	bl	800012c <__gnu_thumb1_case_uqi>
 8002152:	1e13      	.short	0x1e13
 8002154:	1e181e05 	.word	0x1e181e05
 8002158:	1e1e      	.short	0x1e1e
 800215a:	1b          	.byte	0x1b
 800215b:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 800215c:	481a      	ldr	r0, [pc, #104]	@ (80021c8 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800215e:	6861      	ldr	r1, [r4, #4]
 8002160:	084b      	lsrs	r3, r1, #1
 8002162:	1818      	adds	r0, r3, r0
 8002164:	f7fd fff6 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002168:	0002      	movs	r2, r0
 800216a:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <UART_SetConfig+0x12c>)
 800216c:	3a10      	subs	r2, #16
 800216e:	429a      	cmp	r2, r3
 8002170:	d80d      	bhi.n	800218e <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	60d8      	str	r0, [r3, #12]
 8002176:	e014      	b.n	80021a2 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002178:	f7ff febc 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800217c:	2800      	cmp	r0, #0
 800217e:	d010      	beq.n	80021a2 <UART_SetConfig+0x102>
 8002180:	e7ed      	b.n	800215e <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8002182:	f7ff fdf7 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
        break;
 8002186:	e7f9      	b.n	800217c <UART_SetConfig+0xdc>
    switch (clocksource)
 8002188:	2080      	movs	r0, #128	@ 0x80
 800218a:	0200      	lsls	r0, r0, #8
 800218c:	e7e7      	b.n	800215e <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 800218e:	2001      	movs	r0, #1
 8002190:	e008      	b.n	80021a4 <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	429a      	cmp	r2, r3
 8002198:	d1ee      	bne.n	8002178 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800219a:	f7ff feab 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800219e:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 80021a0:	d1be      	bne.n	8002120 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 80021a2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80021a8:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	efff69f3 	.word	0xefff69f3
 80021b0:	ffffcfff 	.word	0xffffcfff
 80021b4:	fffff4ff 	.word	0xfffff4ff
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08004bea 	.word	0x08004bea
 80021c4:	bfffbc00 	.word	0xbfffbc00
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	0000ffef 	.word	0x0000ffef

080021d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 80021d2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021d4:	071a      	lsls	r2, r3, #28
 80021d6:	d506      	bpl.n	80021e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021d8:	6801      	ldr	r1, [r0, #0]
 80021da:	4c28      	ldr	r4, [pc, #160]	@ (800227c <UART_AdvFeatureConfig+0xac>)
 80021dc:	684a      	ldr	r2, [r1, #4]
 80021de:	4022      	ands	r2, r4
 80021e0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80021e2:	4322      	orrs	r2, r4
 80021e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021e6:	07da      	lsls	r2, r3, #31
 80021e8:	d506      	bpl.n	80021f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021ea:	6801      	ldr	r1, [r0, #0]
 80021ec:	4c24      	ldr	r4, [pc, #144]	@ (8002280 <UART_AdvFeatureConfig+0xb0>)
 80021ee:	684a      	ldr	r2, [r1, #4]
 80021f0:	4022      	ands	r2, r4
 80021f2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80021f4:	4322      	orrs	r2, r4
 80021f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021f8:	079a      	lsls	r2, r3, #30
 80021fa:	d506      	bpl.n	800220a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021fc:	6801      	ldr	r1, [r0, #0]
 80021fe:	4c21      	ldr	r4, [pc, #132]	@ (8002284 <UART_AdvFeatureConfig+0xb4>)
 8002200:	684a      	ldr	r2, [r1, #4]
 8002202:	4022      	ands	r2, r4
 8002204:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002206:	4322      	orrs	r2, r4
 8002208:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800220a:	075a      	lsls	r2, r3, #29
 800220c:	d506      	bpl.n	800221c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800220e:	6801      	ldr	r1, [r0, #0]
 8002210:	4c1d      	ldr	r4, [pc, #116]	@ (8002288 <UART_AdvFeatureConfig+0xb8>)
 8002212:	684a      	ldr	r2, [r1, #4]
 8002214:	4022      	ands	r2, r4
 8002216:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002218:	4322      	orrs	r2, r4
 800221a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800221c:	06da      	lsls	r2, r3, #27
 800221e:	d506      	bpl.n	800222e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002220:	6801      	ldr	r1, [r0, #0]
 8002222:	4c1a      	ldr	r4, [pc, #104]	@ (800228c <UART_AdvFeatureConfig+0xbc>)
 8002224:	688a      	ldr	r2, [r1, #8]
 8002226:	4022      	ands	r2, r4
 8002228:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800222a:	4322      	orrs	r2, r4
 800222c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800222e:	069a      	lsls	r2, r3, #26
 8002230:	d506      	bpl.n	8002240 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002232:	6801      	ldr	r1, [r0, #0]
 8002234:	4c16      	ldr	r4, [pc, #88]	@ (8002290 <UART_AdvFeatureConfig+0xc0>)
 8002236:	688a      	ldr	r2, [r1, #8]
 8002238:	4022      	ands	r2, r4
 800223a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800223c:	4322      	orrs	r2, r4
 800223e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002240:	065a      	lsls	r2, r3, #25
 8002242:	d510      	bpl.n	8002266 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002244:	6801      	ldr	r1, [r0, #0]
 8002246:	4d13      	ldr	r5, [pc, #76]	@ (8002294 <UART_AdvFeatureConfig+0xc4>)
 8002248:	684a      	ldr	r2, [r1, #4]
 800224a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800224c:	402a      	ands	r2, r5
 800224e:	4322      	orrs	r2, r4
 8002250:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002252:	2280      	movs	r2, #128	@ 0x80
 8002254:	0352      	lsls	r2, r2, #13
 8002256:	4294      	cmp	r4, r2
 8002258:	d105      	bne.n	8002266 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800225a:	684a      	ldr	r2, [r1, #4]
 800225c:	4c0e      	ldr	r4, [pc, #56]	@ (8002298 <UART_AdvFeatureConfig+0xc8>)
 800225e:	4022      	ands	r2, r4
 8002260:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002262:	4322      	orrs	r2, r4
 8002264:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002266:	061b      	lsls	r3, r3, #24
 8002268:	d506      	bpl.n	8002278 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800226a:	6802      	ldr	r2, [r0, #0]
 800226c:	490b      	ldr	r1, [pc, #44]	@ (800229c <UART_AdvFeatureConfig+0xcc>)
 800226e:	6853      	ldr	r3, [r2, #4]
 8002270:	400b      	ands	r3, r1
 8002272:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002274:	430b      	orrs	r3, r1
 8002276:	6053      	str	r3, [r2, #4]
}
 8002278:	bd30      	pop	{r4, r5, pc}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	ffff7fff 	.word	0xffff7fff
 8002280:	fffdffff 	.word	0xfffdffff
 8002284:	fffeffff 	.word	0xfffeffff
 8002288:	fffbffff 	.word	0xfffbffff
 800228c:	ffffefff 	.word	0xffffefff
 8002290:	ffffdfff 	.word	0xffffdfff
 8002294:	ffefffff 	.word	0xffefffff
 8002298:	ff9fffff 	.word	0xff9fffff
 800229c:	fff7ffff 	.word	0xfff7ffff

080022a0 <UART_WaitOnFlagUntilTimeout>:
{
 80022a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022a2:	0004      	movs	r4, r0
 80022a4:	000d      	movs	r5, r1
 80022a6:	0017      	movs	r7, r2
 80022a8:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	69d3      	ldr	r3, [r2, #28]
 80022ae:	402b      	ands	r3, r5
 80022b0:	1b5b      	subs	r3, r3, r5
 80022b2:	4259      	negs	r1, r3
 80022b4:	414b      	adcs	r3, r1
 80022b6:	42bb      	cmp	r3, r7
 80022b8:	d001      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80022ba:	2000      	movs	r0, #0
 80022bc:	e025      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80022be:	9b08      	ldr	r3, [sp, #32]
 80022c0:	3301      	adds	r3, #1
 80022c2:	d0f3      	beq.n	80022ac <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c4:	f7fe fa68 	bl	8000798 <HAL_GetTick>
 80022c8:	9b00      	ldr	r3, [sp, #0]
 80022ca:	1ac0      	subs	r0, r0, r3
 80022cc:	9b08      	ldr	r3, [sp, #32]
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d82c      	bhi.n	800232c <UART_WaitOnFlagUntilTimeout+0x8c>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d02a      	beq.n	800232c <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	0752      	lsls	r2, r2, #29
 80022dc:	d5e5      	bpl.n	80022aa <UART_WaitOnFlagUntilTimeout+0xa>
 80022de:	002a      	movs	r2, r5
 80022e0:	2140      	movs	r1, #64	@ 0x40
 80022e2:	3a40      	subs	r2, #64	@ 0x40
 80022e4:	438a      	bics	r2, r1
 80022e6:	d0e0      	beq.n	80022aa <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	2608      	movs	r6, #8
 80022ec:	0011      	movs	r1, r2
 80022ee:	4031      	ands	r1, r6
 80022f0:	9101      	str	r1, [sp, #4]
 80022f2:	4232      	tst	r2, r6
 80022f4:	d00a      	beq.n	800230c <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 80022f6:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022f8:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80022fa:	f7ff fea3 	bl	8002044 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022fe:	19a3      	adds	r3, r4, r6
 8002300:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002302:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002304:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8002306:	3478      	adds	r4, #120	@ 0x78
 8002308:	7023      	strb	r3, [r4, #0]
}
 800230a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	69d9      	ldr	r1, [r3, #28]
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	4211      	tst	r1, r2
 8002314:	d0c9      	beq.n	80022aa <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002316:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002318:	0020      	movs	r0, r4
 800231a:	f7ff fe93 	bl	8002044 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800231e:	0023      	movs	r3, r4
 8002320:	2220      	movs	r2, #32
 8002322:	3308      	adds	r3, #8
 8002324:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002326:	9b01      	ldr	r3, [sp, #4]
 8002328:	3478      	adds	r4, #120	@ 0x78
 800232a:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800232c:	2003      	movs	r0, #3
 800232e:	e7ec      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x6a>

08002330 <HAL_UART_Transmit>:
{
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	b087      	sub	sp, #28
 8002334:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002336:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8002338:	0004      	movs	r4, r0
 800233a:	000d      	movs	r5, r1
 800233c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800233e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002340:	2b20      	cmp	r3, #32
 8002342:	d138      	bne.n	80023b6 <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 8002344:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002346:	2900      	cmp	r1, #0
 8002348:	d035      	beq.n	80023b6 <HAL_UART_Transmit+0x86>
 800234a:	2a00      	cmp	r2, #0
 800234c:	d033      	beq.n	80023b6 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	68a2      	ldr	r2, [r4, #8]
 8002352:	015b      	lsls	r3, r3, #5
 8002354:	429a      	cmp	r2, r3
 8002356:	d104      	bne.n	8002362 <HAL_UART_Transmit+0x32>
 8002358:	6923      	ldr	r3, [r4, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800235e:	4201      	tst	r1, r0
 8002360:	d129      	bne.n	80023b6 <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	0023      	movs	r3, r4
 8002364:	2600      	movs	r6, #0
 8002366:	3308      	adds	r3, #8
 8002368:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236a:	2321      	movs	r3, #33	@ 0x21
 800236c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800236e:	f7fe fa13 	bl	8000798 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002372:	0023      	movs	r3, r4
 8002374:	3350      	adds	r3, #80	@ 0x50
 8002376:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002378:	3302      	adds	r3, #2
 800237a:	9303      	str	r3, [sp, #12]
 800237c:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002382:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002384:	015b      	lsls	r3, r3, #5
 8002386:	429a      	cmp	r2, r3
 8002388:	d104      	bne.n	8002394 <HAL_UART_Transmit+0x64>
 800238a:	6923      	ldr	r3, [r4, #16]
 800238c:	42b3      	cmp	r3, r6
 800238e:	d101      	bne.n	8002394 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 8002390:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002392:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002394:	0023      	movs	r3, r4
 8002396:	3352      	adds	r3, #82	@ 0x52
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10c      	bne.n	80023ba <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	9b05      	ldr	r3, [sp, #20]
 80023a2:	2140      	movs	r1, #64	@ 0x40
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	0020      	movs	r0, r4
 80023a8:	9b04      	ldr	r3, [sp, #16]
 80023aa:	f7ff ff79 	bl	80022a0 <UART_WaitOnFlagUntilTimeout>
 80023ae:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80023b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_UART_Transmit+0xa2>
}
 80023b6:	b007      	add	sp, #28
 80023b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	9b05      	ldr	r3, [sp, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0020      	movs	r0, r4
 80023c4:	9b04      	ldr	r3, [sp, #16]
 80023c6:	f7ff ff6b 	bl	80022a0 <UART_WaitOnFlagUntilTimeout>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 80023ce:	2320      	movs	r3, #32
 80023d0:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80023d2:	2003      	movs	r0, #3
 80023d4:	e7ef      	b.n	80023b6 <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023d6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023dc:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80023de:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e0:	05db      	lsls	r3, r3, #23
 80023e2:	0ddb      	lsrs	r3, r3, #23
 80023e4:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80023e6:	9b03      	ldr	r3, [sp, #12]
 80023e8:	9a03      	ldr	r2, [sp, #12]
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8013      	strh	r3, [r2, #0]
 80023f2:	e7cf      	b.n	8002394 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f4:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80023f6:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f8:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 80023fa:	e7f4      	b.n	80023e6 <HAL_UART_Transmit+0xb6>

080023fc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fc:	0003      	movs	r3, r0
{
 80023fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002400:	2500      	movs	r5, #0
{
 8002402:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002404:	3308      	adds	r3, #8
 8002406:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8002408:	f7fe f9c6 	bl	8000798 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800240c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800240e:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	071b      	lsls	r3, r3, #28
 8002414:	d51d      	bpl.n	8002452 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002416:	2180      	movs	r1, #128	@ 0x80
 8002418:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <UART_CheckIdleState+0xb8>)
 800241a:	002a      	movs	r2, r5
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	0389      	lsls	r1, r1, #14
 8002420:	0003      	movs	r3, r0
 8002422:	0020      	movs	r0, r4
 8002424:	f7ff ff3c 	bl	80022a0 <UART_WaitOnFlagUntilTimeout>
 8002428:	42a8      	cmp	r0, r5
 800242a:	d012      	beq.n	8002452 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800242c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002430:	2301      	movs	r3, #1
 8002432:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002436:	2080      	movs	r0, #128	@ 0x80
 8002438:	6822      	ldr	r2, [r4, #0]
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	4383      	bics	r3, r0
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002444:	2320      	movs	r3, #32
 8002446:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002448:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800244a:	2300      	movs	r3, #0
 800244c:	3478      	adds	r4, #120	@ 0x78
 800244e:	7023      	strb	r3, [r4, #0]
}
 8002450:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002452:	0025      	movs	r5, r4
 8002454:	cd08      	ldmia	r5!, {r3}
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	075b      	lsls	r3, r3, #29
 800245a:	d523      	bpl.n	80024a4 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800245c:	2180      	movs	r1, #128	@ 0x80
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <UART_CheckIdleState+0xb8>)
 8002460:	2200      	movs	r2, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	0020      	movs	r0, r4
 8002466:	0033      	movs	r3, r6
 8002468:	03c9      	lsls	r1, r1, #15
 800246a:	f7ff ff19 	bl	80022a0 <UART_WaitOnFlagUntilTimeout>
 800246e:	2800      	cmp	r0, #0
 8002470:	d018      	beq.n	80024a4 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002472:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002476:	2201      	movs	r2, #1
 8002478:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800247c:	6821      	ldr	r1, [r4, #0]
 800247e:	4e0e      	ldr	r6, [pc, #56]	@ (80024b8 <UART_CheckIdleState+0xbc>)
 8002480:	680b      	ldr	r3, [r1, #0]
 8002482:	4033      	ands	r3, r6
 8002484:	600b      	str	r3, [r1, #0]
 8002486:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002492:	6821      	ldr	r1, [r4, #0]
 8002494:	688b      	ldr	r3, [r1, #8]
 8002496:	4393      	bics	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
 800249a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800249e:	2320      	movs	r3, #32
 80024a0:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80024a2:	e7d1      	b.n	8002448 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 80024a4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80024a8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80024aa:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ac:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024ae:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 80024b0:	e7cb      	b.n	800244a <UART_CheckIdleState+0x4e>
 80024b2:	46c0      	nop			@ (mov r8, r8)
 80024b4:	01ffffff 	.word	0x01ffffff
 80024b8:	fffffedf 	.word	0xfffffedf

080024bc <HAL_UART_Init>:
{
 80024bc:	b510      	push	{r4, lr}
 80024be:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80024c2:	2001      	movs	r0, #1
}
 80024c4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80024c6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80024cc:	0002      	movs	r2, r0
 80024ce:	3278      	adds	r2, #120	@ 0x78
 80024d0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80024d2:	f7fe f861 	bl	8000598 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80024d6:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80024d8:	2101      	movs	r1, #1
 80024da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024dc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	438b      	bics	r3, r1
 80024e2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80024ea:	0020      	movs	r0, r4
 80024ec:	f7ff fe70 	bl	80021d0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024f0:	0020      	movs	r0, r4
 80024f2:	f7ff fdd5 	bl	80020a0 <UART_SetConfig>
 80024f6:	2801      	cmp	r0, #1
 80024f8:	d0e3      	beq.n	80024c2 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	4907      	ldr	r1, [pc, #28]	@ (800251c <HAL_UART_Init+0x60>)
 80024fe:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002500:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002502:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002504:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	438a      	bics	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800250e:	2201      	movs	r2, #1
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002516:	f7ff ff71 	bl	80023fc <UART_CheckIdleState>
 800251a:	e7d3      	b.n	80024c4 <HAL_UART_Init+0x8>
 800251c:	ffffb7ff 	.word	0xffffb7ff

08002520 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002520:	1d82      	adds	r2, r0, #6
{
 8002522:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8002524:	2000      	movs	r0, #0
 8002526:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002528:	4a01      	ldr	r2, [pc, #4]	@ (8002530 <USB_EnableGlobalInt+0x10>)
 800252a:	3302      	adds	r3, #2
 800252c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 800252e:	4770      	bx	lr
 8002530:	ffffbf80 	.word	0xffffbf80

08002534 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002534:	3002      	adds	r0, #2
 8002536:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8002538:	4a02      	ldr	r2, [pc, #8]	@ (8002544 <USB_DisableGlobalInt+0x10>)
 800253a:	4013      	ands	r3, r2
 800253c:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 800253e:	2000      	movs	r0, #0
 8002540:	4770      	bx	lr
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	0000407f 	.word	0x0000407f

08002548 <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002548:	1c82      	adds	r2, r0, #2
{
 800254a:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800254c:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800254e:	2000      	movs	r0, #0
{
 8002550:	b082      	sub	sp, #8
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002552:	87d1      	strh	r1, [r2, #62]	@ 0x3e
  USBx->CNTR = 0U;
 8002554:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002556:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002558:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 800255a:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 800255c:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 800255e:	b002      	add	sp, #8
 8002560:	4770      	bx	lr
	...

08002564 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002566:	780e      	ldrb	r6, [r1, #0]
 8002568:	4a7a      	ldr	r2, [pc, #488]	@ (8002754 <USB_ActivateEndpoint+0x1f0>)
 800256a:	00b3      	lsls	r3, r6, #2
 800256c:	18c3      	adds	r3, r0, r3
 800256e:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002570:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002572:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002574:	2201      	movs	r2, #1
{
 8002576:	0005      	movs	r5, r0
      ret = HAL_ERROR;
 8002578:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 800257a:	2f03      	cmp	r7, #3
 800257c:	d808      	bhi.n	8002590 <USB_ActivateEndpoint+0x2c>
 800257e:	0038      	movs	r0, r7
 8002580:	f7fd fdd4 	bl	800012c <__gnu_thumb1_case_uqi>
 8002584:	3c3f4202 	.word	0x3c3f4202
      wEpRegVal |= USB_EP_CONTROL;
 8002588:	2280      	movs	r2, #128	@ 0x80
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 800258e:	9700      	str	r7, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002590:	4a71      	ldr	r2, [pc, #452]	@ (8002758 <USB_ActivateEndpoint+0x1f4>)
 8002592:	4314      	orrs	r4, r2
 8002594:	b2a4      	uxth	r4, r4
 8002596:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002598:	8818      	ldrh	r0, [r3, #0]
 800259a:	4c70      	ldr	r4, [pc, #448]	@ (800275c <USB_ActivateEndpoint+0x1f8>)
 800259c:	4020      	ands	r0, r4
 800259e:	4330      	orrs	r0, r6
 80025a0:	4310      	orrs	r0, r2
 80025a2:	b280      	uxth	r0, r0
 80025a4:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80025a6:	00f0      	lsls	r0, r6, #3
 80025a8:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 80025aa:	7b08      	ldrb	r0, [r1, #12]
 80025ac:	44ac      	add	ip, r5
 80025ae:	3550      	adds	r5, #80	@ 0x50
 80025b0:	9501      	str	r5, [sp, #4]
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d000      	beq.n	80025b8 <USB_ActivateEndpoint+0x54>
 80025b6:	e06b      	b.n	8002690 <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80025b8:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 80025ba:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80025bc:	086d      	lsrs	r5, r5, #1
 80025be:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d023      	beq.n	800260c <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80025c4:	2080      	movs	r0, #128	@ 0x80
 80025c6:	9901      	ldr	r1, [sp, #4]
 80025c8:	00c0      	lsls	r0, r0, #3
 80025ca:	8809      	ldrh	r1, [r1, #0]
 80025cc:	4461      	add	r1, ip
 80025ce:	1809      	adds	r1, r1, r0
 80025d0:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025d2:	8819      	ldrh	r1, [r3, #0]
 80025d4:	0649      	lsls	r1, r1, #25
 80025d6:	d504      	bpl.n	80025e2 <USB_ActivateEndpoint+0x7e>
 80025d8:	8819      	ldrh	r1, [r3, #0]
 80025da:	4021      	ands	r1, r4
 80025dc:	4c60      	ldr	r4, [pc, #384]	@ (8002760 <USB_ActivateEndpoint+0x1fc>)
 80025de:	4321      	orrs	r1, r4
 80025e0:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80025e2:	4d60      	ldr	r5, [pc, #384]	@ (8002764 <USB_ActivateEndpoint+0x200>)
 80025e4:	2f01      	cmp	r7, #1
 80025e6:	d100      	bne.n	80025ea <USB_ActivateEndpoint+0x86>
 80025e8:	e0ae      	b.n	8002748 <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80025ea:	2120      	movs	r1, #32
 80025ec:	881c      	ldrh	r4, [r3, #0]
 80025ee:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80025f0:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025f2:	430a      	orrs	r2, r1
 80025f4:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80025f6:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025f8:	801a      	strh	r2, [r3, #0]
}
 80025fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 80025fc:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80025fe:	00d2      	lsls	r2, r2, #3
 8002600:	4314      	orrs	r4, r2
  switch (ep->type)
 8002602:	2200      	movs	r2, #0
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	e7c3      	b.n	8002590 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002608:	2280      	movs	r2, #128	@ 0x80
 800260a:	e7f8      	b.n	80025fe <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800260c:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800260e:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002610:	8807      	ldrh	r7, [r0, #0]
 8002612:	4855      	ldr	r0, [pc, #340]	@ (8002768 <USB_ActivateEndpoint+0x204>)
 8002614:	4467      	add	r7, ip
 8002616:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002618:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800261a:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800261c:	8805      	ldrh	r5, [r0, #0]
 800261e:	4853      	ldr	r0, [pc, #332]	@ (800276c <USB_ActivateEndpoint+0x208>)
 8002620:	4465      	add	r5, ip
 8002622:	182d      	adds	r5, r5, r0
 8002624:	882f      	ldrh	r7, [r5, #0]
 8002626:	05bf      	lsls	r7, r7, #22
 8002628:	0dbf      	lsrs	r7, r7, #22
 800262a:	802f      	strh	r7, [r5, #0]
 800262c:	2900      	cmp	r1, #0
 800262e:	d115      	bne.n	800265c <USB_ActivateEndpoint+0xf8>
 8002630:	2780      	movs	r7, #128	@ 0x80
 8002632:	8829      	ldrh	r1, [r5, #0]
 8002634:	023f      	lsls	r7, r7, #8
 8002636:	4339      	orrs	r1, r7
 8002638:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800263a:	8819      	ldrh	r1, [r3, #0]
 800263c:	0449      	lsls	r1, r1, #17
 800263e:	d504      	bpl.n	800264a <USB_ActivateEndpoint+0xe6>
 8002640:	8819      	ldrh	r1, [r3, #0]
 8002642:	4021      	ands	r1, r4
 8002644:	4c4a      	ldr	r4, [pc, #296]	@ (8002770 <USB_ActivateEndpoint+0x20c>)
 8002646:	4321      	orrs	r1, r4
 8002648:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 800264a:	494a      	ldr	r1, [pc, #296]	@ (8002774 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800264c:	881c      	ldrh	r4, [r3, #0]
 800264e:	400c      	ands	r4, r1
 8002650:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 8002652:	2e00      	cmp	r6, #0
 8002654:	d000      	beq.n	8002658 <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002656:	2180      	movs	r1, #128	@ 0x80
 8002658:	0189      	lsls	r1, r1, #6
 800265a:	e7c9      	b.n	80025f0 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800265c:	293e      	cmp	r1, #62	@ 0x3e
 800265e:	d808      	bhi.n	8002672 <USB_ActivateEndpoint+0x10e>
 8002660:	2001      	movs	r0, #1
 8002662:	084f      	lsrs	r7, r1, #1
 8002664:	4001      	ands	r1, r0
 8002666:	187f      	adds	r7, r7, r1
 8002668:	8829      	ldrh	r1, [r5, #0]
 800266a:	02bf      	lsls	r7, r7, #10
 800266c:	4339      	orrs	r1, r7
 800266e:	b289      	uxth	r1, r1
 8002670:	e7e2      	b.n	8002638 <USB_ActivateEndpoint+0xd4>
 8002672:	201f      	movs	r0, #31
 8002674:	094f      	lsrs	r7, r1, #5
 8002676:	4001      	ands	r1, r0
 8002678:	0008      	movs	r0, r1
 800267a:	4241      	negs	r1, r0
 800267c:	4141      	adcs	r1, r0
 800267e:	1a7f      	subs	r7, r7, r1
 8002680:	8829      	ldrh	r1, [r5, #0]
 8002682:	02bf      	lsls	r7, r7, #10
 8002684:	4339      	orrs	r1, r7
 8002686:	4f3c      	ldr	r7, [pc, #240]	@ (8002778 <USB_ActivateEndpoint+0x214>)
 8002688:	430f      	orrs	r7, r1
 800268a:	b2bf      	uxth	r7, r7
 800268c:	802f      	strh	r7, [r5, #0]
 800268e:	e7d4      	b.n	800263a <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002690:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 8002692:	2f02      	cmp	r7, #2
 8002694:	d13a      	bne.n	800270c <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002696:	4e39      	ldr	r6, [pc, #228]	@ (800277c <USB_ActivateEndpoint+0x218>)
 8002698:	4025      	ands	r5, r4
 800269a:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800269c:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800269e:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80026a0:	8805      	ldrh	r5, [r0, #0]
 80026a2:	2080      	movs	r0, #128	@ 0x80
 80026a4:	890e      	ldrh	r6, [r1, #8]
 80026a6:	4465      	add	r5, ip
 80026a8:	00c0      	lsls	r0, r0, #3
 80026aa:	0876      	lsrs	r6, r6, #1
 80026ac:	182d      	adds	r5, r5, r0
 80026ae:	0076      	lsls	r6, r6, #1
 80026b0:	9801      	ldr	r0, [sp, #4]
 80026b2:	802e      	strh	r6, [r5, #0]
 80026b4:	8805      	ldrh	r5, [r0, #0]
 80026b6:	894e      	ldrh	r6, [r1, #10]
 80026b8:	482b      	ldr	r0, [pc, #172]	@ (8002768 <USB_ActivateEndpoint+0x204>)
 80026ba:	4465      	add	r5, ip
 80026bc:	0876      	lsrs	r6, r6, #1
 80026be:	182d      	adds	r5, r5, r0
 80026c0:	0076      	lsls	r6, r6, #1
 80026c2:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 80026c4:	7849      	ldrb	r1, [r1, #1]
 80026c6:	4e27      	ldr	r6, [pc, #156]	@ (8002764 <USB_ActivateEndpoint+0x200>)
 80026c8:	468c      	mov	ip, r1
 80026ca:	2180      	movs	r1, #128	@ 0x80
 80026cc:	4660      	mov	r0, ip
 80026ce:	4d29      	ldr	r5, [pc, #164]	@ (8002774 <USB_ActivateEndpoint+0x210>)
 80026d0:	01c9      	lsls	r1, r1, #7
 80026d2:	2800      	cmp	r0, #0
 80026d4:	d11f      	bne.n	8002716 <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026d6:	881f      	ldrh	r7, [r3, #0]
 80026d8:	420f      	tst	r7, r1
 80026da:	d004      	beq.n	80026e6 <USB_ActivateEndpoint+0x182>
 80026dc:	8819      	ldrh	r1, [r3, #0]
 80026de:	4f24      	ldr	r7, [pc, #144]	@ (8002770 <USB_ActivateEndpoint+0x20c>)
 80026e0:	4021      	ands	r1, r4
 80026e2:	4339      	orrs	r1, r7
 80026e4:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026e6:	8819      	ldrh	r1, [r3, #0]
 80026e8:	0649      	lsls	r1, r1, #25
 80026ea:	d504      	bpl.n	80026f6 <USB_ActivateEndpoint+0x192>
 80026ec:	8819      	ldrh	r1, [r3, #0]
 80026ee:	4021      	ands	r1, r4
 80026f0:	4c1b      	ldr	r4, [pc, #108]	@ (8002760 <USB_ActivateEndpoint+0x1fc>)
 80026f2:	4321      	orrs	r1, r4
 80026f4:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026f6:	21c0      	movs	r1, #192	@ 0xc0
 80026f8:	881c      	ldrh	r4, [r3, #0]
 80026fa:	0189      	lsls	r1, r1, #6
 80026fc:	402c      	ands	r4, r5
 80026fe:	4061      	eors	r1, r4
 8002700:	4311      	orrs	r1, r2
 8002702:	b289      	uxth	r1, r1
 8002704:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002706:	8819      	ldrh	r1, [r3, #0]
 8002708:	4031      	ands	r1, r6
 800270a:	e772      	b.n	80025f2 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800270c:	4e1c      	ldr	r6, [pc, #112]	@ (8002780 <USB_ActivateEndpoint+0x21c>)
 800270e:	4035      	ands	r5, r6
 8002710:	4315      	orrs	r5, r2
 8002712:	b2ad      	uxth	r5, r5
 8002714:	e7c2      	b.n	800269c <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002716:	8818      	ldrh	r0, [r3, #0]
 8002718:	4208      	tst	r0, r1
 800271a:	d004      	beq.n	8002726 <USB_ActivateEndpoint+0x1c2>
 800271c:	8819      	ldrh	r1, [r3, #0]
 800271e:	4814      	ldr	r0, [pc, #80]	@ (8002770 <USB_ActivateEndpoint+0x20c>)
 8002720:	4021      	ands	r1, r4
 8002722:	4301      	orrs	r1, r0
 8002724:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002726:	8819      	ldrh	r1, [r3, #0]
 8002728:	0649      	lsls	r1, r1, #25
 800272a:	d504      	bpl.n	8002736 <USB_ActivateEndpoint+0x1d2>
 800272c:	8819      	ldrh	r1, [r3, #0]
 800272e:	4021      	ands	r1, r4
 8002730:	4c0b      	ldr	r4, [pc, #44]	@ (8002760 <USB_ActivateEndpoint+0x1fc>)
 8002732:	4321      	orrs	r1, r4
 8002734:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8002736:	2f01      	cmp	r7, #1
 8002738:	d009      	beq.n	800274e <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800273a:	2120      	movs	r1, #32
 800273c:	881c      	ldrh	r4, [r3, #0]
 800273e:	4034      	ands	r4, r6
 8002740:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002742:	4311      	orrs	r1, r2
 8002744:	b289      	uxth	r1, r1
 8002746:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002748:	8819      	ldrh	r1, [r3, #0]
 800274a:	4029      	ands	r1, r5
 800274c:	e751      	b.n	80025f2 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800274e:	8819      	ldrh	r1, [r3, #0]
 8002750:	4031      	ands	r1, r6
 8002752:	e7f6      	b.n	8002742 <USB_ActivateEndpoint+0x1de>
 8002754:	ffff898f 	.word	0xffff898f
 8002758:	ffff8080 	.word	0xffff8080
 800275c:	ffff8f8f 	.word	0xffff8f8f
 8002760:	000080c0 	.word	0x000080c0
 8002764:	ffff8fbf 	.word	0xffff8fbf
 8002768:	00000404 	.word	0x00000404
 800276c:	00000406 	.word	0x00000406
 8002770:	0000c080 	.word	0x0000c080
 8002774:	ffffbf8f 	.word	0xffffbf8f
 8002778:	ffff8000 	.word	0xffff8000
 800277c:	00008180 	.word	0x00008180
 8002780:	ffff8e8f 	.word	0xffff8e8f

08002784 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002784:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002786:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8002788:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 800278a:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	18c0      	adds	r0, r0, r3
 8002790:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 8002792:	2900      	cmp	r1, #0
 8002794:	d11a      	bne.n	80027cc <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 8002796:	2a00      	cmp	r2, #0
 8002798:	d00c      	beq.n	80027b4 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800279a:	8802      	ldrh	r2, [r0, #0]
 800279c:	0652      	lsls	r2, r2, #25
 800279e:	d505      	bpl.n	80027ac <USB_DeactivateEndpoint+0x28>
 80027a0:	8802      	ldrh	r2, [r0, #0]
 80027a2:	492e      	ldr	r1, [pc, #184]	@ (800285c <USB_DeactivateEndpoint+0xd8>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	492e      	ldr	r1, [pc, #184]	@ (8002860 <USB_DeactivateEndpoint+0xdc>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027ac:	8802      	ldrh	r2, [r0, #0]
 80027ae:	492d      	ldr	r1, [pc, #180]	@ (8002864 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027b0:	400a      	ands	r2, r1
 80027b2:	e02f      	b.n	8002814 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027b4:	8802      	ldrh	r2, [r0, #0]
 80027b6:	0452      	lsls	r2, r2, #17
 80027b8:	d505      	bpl.n	80027c6 <USB_DeactivateEndpoint+0x42>
 80027ba:	8802      	ldrh	r2, [r0, #0]
 80027bc:	4927      	ldr	r1, [pc, #156]	@ (800285c <USB_DeactivateEndpoint+0xd8>)
 80027be:	400a      	ands	r2, r1
 80027c0:	4929      	ldr	r1, [pc, #164]	@ (8002868 <USB_DeactivateEndpoint+0xe4>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027c6:	8802      	ldrh	r2, [r0, #0]
 80027c8:	4928      	ldr	r1, [pc, #160]	@ (800286c <USB_DeactivateEndpoint+0xe8>)
 80027ca:	e7f1      	b.n	80027b0 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 80027cc:	2780      	movs	r7, #128	@ 0x80
 80027ce:	4e23      	ldr	r6, [pc, #140]	@ (800285c <USB_DeactivateEndpoint+0xd8>)
 80027d0:	4d24      	ldr	r5, [pc, #144]	@ (8002864 <USB_DeactivateEndpoint+0xe0>)
 80027d2:	4926      	ldr	r1, [pc, #152]	@ (800286c <USB_DeactivateEndpoint+0xe8>)
 80027d4:	01ff      	lsls	r7, r7, #7
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d121      	bne.n	800281e <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027da:	8802      	ldrh	r2, [r0, #0]
 80027dc:	423a      	tst	r2, r7
 80027de:	d004      	beq.n	80027ea <USB_DeactivateEndpoint+0x66>
 80027e0:	8802      	ldrh	r2, [r0, #0]
 80027e2:	4c21      	ldr	r4, [pc, #132]	@ (8002868 <USB_DeactivateEndpoint+0xe4>)
 80027e4:	4032      	ands	r2, r6
 80027e6:	4322      	orrs	r2, r4
 80027e8:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027ea:	8802      	ldrh	r2, [r0, #0]
 80027ec:	4c20      	ldr	r4, [pc, #128]	@ (8002870 <USB_DeactivateEndpoint+0xec>)
 80027ee:	0652      	lsls	r2, r2, #25
 80027f0:	d504      	bpl.n	80027fc <USB_DeactivateEndpoint+0x78>
 80027f2:	8802      	ldrh	r2, [r0, #0]
 80027f4:	4032      	ands	r2, r6
 80027f6:	4322      	orrs	r2, r4
 80027f8:	b292      	uxth	r2, r2
 80027fa:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 80027fc:	8802      	ldrh	r2, [r0, #0]
 80027fe:	4032      	ands	r2, r6
 8002800:	4314      	orrs	r4, r2
 8002802:	b2a4      	uxth	r4, r4
 8002804:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002806:	8802      	ldrh	r2, [r0, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	b292      	uxth	r2, r2
 800280e:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002810:	8802      	ldrh	r2, [r0, #0]
 8002812:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002814:	4313      	orrs	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800281a:	2000      	movs	r0, #0
 800281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800281e:	8802      	ldrh	r2, [r0, #0]
 8002820:	4c14      	ldr	r4, [pc, #80]	@ (8002874 <USB_DeactivateEndpoint+0xf0>)
 8002822:	423a      	tst	r2, r7
 8002824:	d004      	beq.n	8002830 <USB_DeactivateEndpoint+0xac>
 8002826:	8802      	ldrh	r2, [r0, #0]
 8002828:	4032      	ands	r2, r6
 800282a:	4322      	orrs	r2, r4
 800282c:	b292      	uxth	r2, r2
 800282e:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002830:	8802      	ldrh	r2, [r0, #0]
 8002832:	0652      	lsls	r2, r2, #25
 8002834:	d504      	bpl.n	8002840 <USB_DeactivateEndpoint+0xbc>
 8002836:	8802      	ldrh	r2, [r0, #0]
 8002838:	4f09      	ldr	r7, [pc, #36]	@ (8002860 <USB_DeactivateEndpoint+0xdc>)
 800283a:	4032      	ands	r2, r6
 800283c:	433a      	orrs	r2, r7
 800283e:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002840:	8802      	ldrh	r2, [r0, #0]
 8002842:	4032      	ands	r2, r6
 8002844:	4314      	orrs	r4, r2
 8002846:	b2a4      	uxth	r4, r4
 8002848:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800284a:	8802      	ldrh	r2, [r0, #0]
 800284c:	402a      	ands	r2, r5
 800284e:	431a      	orrs	r2, r3
 8002850:	b292      	uxth	r2, r2
 8002852:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002854:	8802      	ldrh	r2, [r0, #0]
 8002856:	e7ab      	b.n	80027b0 <USB_DeactivateEndpoint+0x2c>
 8002858:	ffff8080 	.word	0xffff8080
 800285c:	ffff8f8f 	.word	0xffff8f8f
 8002860:	000080c0 	.word	0x000080c0
 8002864:	ffff8fbf 	.word	0xffff8fbf
 8002868:	0000c080 	.word	0x0000c080
 800286c:	ffffbf8f 	.word	0xffffbf8f
 8002870:	ffff80c0 	.word	0xffff80c0
 8002874:	ffffc080 	.word	0xffffc080

08002878 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002878:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 800287a:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4a0c      	ldr	r2, [pc, #48]	@ (80028b0 <USB_EPSetStall+0x38>)
 8002880:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8002882:	2900      	cmp	r1, #0
 8002884:	d009      	beq.n	800289a <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002886:	8801      	ldrh	r1, [r0, #0]
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <USB_EPSetStall+0x3c>)
 800288a:	4019      	ands	r1, r3
 800288c:	2310      	movs	r3, #16
 800288e:	404b      	eors	r3, r1
 8002890:	4313      	orrs	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8002896:	2000      	movs	r0, #0
 8002898:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800289a:	8801      	ldrh	r1, [r0, #0]
 800289c:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <USB_EPSetStall+0x40>)
 800289e:	4019      	ands	r1, r3
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	015b      	lsls	r3, r3, #5
 80028a4:	404b      	eors	r3, r1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	b292      	uxth	r2, r2
 80028aa:	8002      	strh	r2, [r0, #0]
 80028ac:	e7f3      	b.n	8002896 <USB_EPSetStall+0x1e>
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	ffff8080 	.word	0xffff8080
 80028b4:	ffff8fbf 	.word	0xffff8fbf
 80028b8:	ffffbf8f 	.word	0xffffbf8f

080028bc <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80028bc:	7b0b      	ldrb	r3, [r1, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d119      	bne.n	80028f6 <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028c2:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 80028c4:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	18c0      	adds	r0, r0, r3
 80028ca:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in != 0U)
 80028cc:	2a00      	cmp	r2, #0
 80028ce:	d014      	beq.n	80028fa <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028d0:	065b      	lsls	r3, r3, #25
 80028d2:	d505      	bpl.n	80028e0 <USB_EPClearStall+0x24>
 80028d4:	8803      	ldrh	r3, [r0, #0]
 80028d6:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <USB_EPClearStall+0x5c>)
 80028d8:	4013      	ands	r3, r2
 80028da:	4a10      	ldr	r2, [pc, #64]	@ (800291c <USB_EPClearStall+0x60>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 80028e0:	78cb      	ldrb	r3, [r1, #3]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d007      	beq.n	80028f6 <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <USB_EPClearStall+0x64>)
 80028e8:	8802      	ldrh	r2, [r0, #0]
 80028ea:	401a      	ands	r2, r3
 80028ec:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028ee:	4053      	eors	r3, r2
 80028f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002924 <USB_EPClearStall+0x68>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 80028f6:	2000      	movs	r0, #0
 80028f8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028fa:	045b      	lsls	r3, r3, #17
 80028fc:	d505      	bpl.n	800290a <USB_EPClearStall+0x4e>
 80028fe:	8803      	ldrh	r3, [r0, #0]
 8002900:	4a05      	ldr	r2, [pc, #20]	@ (8002918 <USB_EPClearStall+0x5c>)
 8002902:	4013      	ands	r3, r2
 8002904:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <USB_EPClearStall+0x6c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800290a:	4b08      	ldr	r3, [pc, #32]	@ (800292c <USB_EPClearStall+0x70>)
 800290c:	8802      	ldrh	r2, [r0, #0]
 800290e:	401a      	ands	r2, r3
 8002910:	23c0      	movs	r3, #192	@ 0xc0
 8002912:	019b      	lsls	r3, r3, #6
 8002914:	e7eb      	b.n	80028ee <USB_EPClearStall+0x32>
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	ffff8f8f 	.word	0xffff8f8f
 800291c:	000080c0 	.word	0x000080c0
 8002920:	ffff8fbf 	.word	0xffff8fbf
 8002924:	00008080 	.word	0x00008080
 8002928:	0000c080 	.word	0x0000c080
 800292c:	ffffbf8f 	.word	0xffffbf8f

08002930 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002930:	2900      	cmp	r1, #0
 8002932:	d102      	bne.n	800293a <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	304c      	adds	r0, #76	@ 0x4c
 8002938:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 800293a:	2000      	movs	r0, #0
 800293c:	4770      	bx	lr

0800293e <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	3058      	adds	r0, #88	@ 0x58
 8002942:	8803      	ldrh	r3, [r0, #0]
 8002944:	0212      	lsls	r2, r2, #8
 8002946:	4313      	orrs	r3, r2
 8002948:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 800294a:	2000      	movs	r0, #0
 800294c:	4770      	bx	lr

0800294e <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800294e:	3006      	adds	r0, #6
 8002950:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8002952:	b280      	uxth	r0, r0
  return tmpreg;
}
 8002954:	4770      	bx	lr

08002956 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002956:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002958:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800295a:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800295c:	00e4      	lsls	r4, r4, #3
 800295e:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002960:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002962:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	18cb      	adds	r3, r1, r3
 8002968:	1a40      	subs	r0, r0, r1
 800296a:	180c      	adds	r4, r1, r0
 800296c:	428b      	cmp	r3, r1
 800296e:	d100      	bne.n	8002972 <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8002970:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 8002972:	784a      	ldrb	r2, [r1, #1]
 8002974:	780d      	ldrb	r5, [r1, #0]
 8002976:	0212      	lsls	r2, r2, #8
 8002978:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 800297a:	8022      	strh	r2, [r4, #0]
    pBuf++;
 800297c:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 800297e:	e7f4      	b.n	800296a <USB_WritePMA+0x14>

08002980 <USB_EPStartXfer>:
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8002984:	7849      	ldrb	r1, [r1, #1]
{
 8002986:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 8002988:	7b22      	ldrb	r2, [r4, #12]
{
 800298a:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 800298c:	2901      	cmp	r1, #1
 800298e:	d000      	beq.n	8002992 <USB_EPStartXfer+0x12>
 8002990:	e11b      	b.n	8002bca <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8002992:	6923      	ldr	r3, [r4, #16]
 8002994:	69a7      	ldr	r7, [r4, #24]
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	429f      	cmp	r7, r3
 800299a:	d900      	bls.n	800299e <USB_EPStartXfer+0x1e>
 800299c:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 800299e:	002b      	movs	r3, r5
 80029a0:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80029a2:	6961      	ldr	r1, [r4, #20]
 80029a4:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 80029a6:	2a00      	cmp	r2, #0
 80029a8:	d11d      	bne.n	80029e6 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80029aa:	b2bf      	uxth	r7, r7
 80029ac:	003b      	movs	r3, r7
 80029ae:	88e2      	ldrh	r2, [r4, #6]
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7ff ffd0 	bl	8002956 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80029b6:	9b01      	ldr	r3, [sp, #4]
 80029b8:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <USB_EPStartXfer+0x334>)
 80029ba:	8819      	ldrh	r1, [r3, #0]
 80029bc:	7823      	ldrb	r3, [r4, #0]
 80029be:	18aa      	adds	r2, r5, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1852      	adds	r2, r2, r1
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80029c8:	7823      	ldrb	r3, [r4, #0]
 80029ca:	4abb      	ldr	r2, [pc, #748]	@ (8002cb8 <USB_EPStartXfer+0x338>)
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	18eb      	adds	r3, r5, r3
 80029d0:	8819      	ldrh	r1, [r3, #0]
 80029d2:	4011      	ands	r1, r2
 80029d4:	2230      	movs	r2, #48	@ 0x30
 80029d6:	404a      	eors	r2, r1
 80029d8:	49b8      	ldr	r1, [pc, #736]	@ (8002cbc <USB_EPStartXfer+0x33c>)
 80029da:	430a      	orrs	r2, r1
 80029dc:	b292      	uxth	r2, r2
 80029de:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 80029e0:	2000      	movs	r0, #0
}
 80029e2:	b007      	add	sp, #28
 80029e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80029e6:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 80029e8:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80029ea:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80029ec:	00d2      	lsls	r2, r2, #3
 80029ee:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 80029f0:	78e0      	ldrb	r0, [r4, #3]
 80029f2:	18eb      	adds	r3, r5, r3
 80029f4:	2802      	cmp	r0, #2
 80029f6:	d000      	beq.n	80029fa <USB_EPStartXfer+0x7a>
 80029f8:	e0d1      	b.n	8002b9e <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 80029fa:	9a02      	ldr	r2, [sp, #8]
 80029fc:	42b2      	cmp	r2, r6
 80029fe:	d300      	bcc.n	8002a02 <USB_EPStartXfer+0x82>
 8002a00:	e0bb      	b.n	8002b7a <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002a02:	881a      	ldrh	r2, [r3, #0]
 8002a04:	48ae      	ldr	r0, [pc, #696]	@ (8002cc0 <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8002a06:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002a08:	4010      	ands	r0, r2
 8002a0a:	4aae      	ldr	r2, [pc, #696]	@ (8002cc4 <USB_EPStartXfer+0x344>)
 8002a0c:	4310      	orrs	r0, r2
 8002a0e:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	2040      	movs	r0, #64	@ 0x40
 8002a14:	469c      	mov	ip, r3
 8002a16:	4662      	mov	r2, ip
 8002a18:	4002      	ands	r2, r0
 8002a1a:	9205      	str	r2, [sp, #20]
 8002a1c:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 8002a1e:	19cb      	adds	r3, r1, r7
 8002a20:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 8002a22:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002a24:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a26:	4202      	tst	r2, r0
 8002a28:	d055      	beq.n	8002ad6 <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a2a:	9a01      	ldr	r2, [sp, #4]
 8002a2c:	8812      	ldrh	r2, [r2, #0]
 8002a2e:	4694      	mov	ip, r2
 8002a30:	4aa5      	ldr	r2, [pc, #660]	@ (8002cc8 <USB_EPStartXfer+0x348>)
 8002a32:	18a8      	adds	r0, r5, r2
 8002a34:	9a03      	ldr	r2, [sp, #12]
 8002a36:	4460      	add	r0, ip
 8002a38:	1882      	adds	r2, r0, r2
 8002a3a:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a3c:	8962      	ldrh	r2, [r4, #10]
 8002a3e:	0028      	movs	r0, r5
 8002a40:	f7ff ff89 	bl	8002956 <USB_WritePMA>
            ep->xfer_buff += len;
 8002a44:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8002a46:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8002a48:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8002a4a:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8002a4c:	42b2      	cmp	r2, r6
 8002a4e:	d201      	bcs.n	8002a54 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 8002a50:	1bf3      	subs	r3, r6, r7
 8002a52:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a54:	7862      	ldrb	r2, [r4, #1]
 8002a56:	6223      	str	r3, [r4, #32]
 8002a58:	b2b3      	uxth	r3, r6
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	d12e      	bne.n	8002abc <USB_EPStartXfer+0x13c>
 8002a5e:	9a01      	ldr	r2, [sp, #4]
 8002a60:	4994      	ldr	r1, [pc, #592]	@ (8002cb4 <USB_EPStartXfer+0x334>)
 8002a62:	8810      	ldrh	r0, [r2, #0]
 8002a64:	7822      	ldrb	r2, [r4, #0]
 8002a66:	1869      	adds	r1, r5, r1
 8002a68:	1809      	adds	r1, r1, r0
 8002a6a:	00d2      	lsls	r2, r2, #3
 8002a6c:	1852      	adds	r2, r2, r1
 8002a6e:	8811      	ldrh	r1, [r2, #0]
 8002a70:	0589      	lsls	r1, r1, #22
 8002a72:	0d89      	lsrs	r1, r1, #22
 8002a74:	8011      	strh	r1, [r2, #0]
 8002a76:	2e00      	cmp	r6, #0
 8002a78:	d10a      	bne.n	8002a90 <USB_EPStartXfer+0x110>
 8002a7a:	2080      	movs	r0, #128	@ 0x80
 8002a7c:	8811      	ldrh	r1, [r2, #0]
 8002a7e:	0200      	lsls	r0, r0, #8
 8002a80:	4301      	orrs	r1, r0
 8002a82:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a84:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a86:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a88:	0028      	movs	r0, r5
 8002a8a:	f7ff ff64 	bl	8002956 <USB_WritePMA>
 8002a8e:	e79b      	b.n	80029c8 <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a90:	2e3e      	cmp	r6, #62	@ 0x3e
 8002a92:	d808      	bhi.n	8002aa6 <USB_EPStartXfer+0x126>
 8002a94:	2101      	movs	r1, #1
 8002a96:	0870      	lsrs	r0, r6, #1
 8002a98:	4031      	ands	r1, r6
 8002a9a:	1840      	adds	r0, r0, r1
 8002a9c:	8811      	ldrh	r1, [r2, #0]
 8002a9e:	0280      	lsls	r0, r0, #10
 8002aa0:	4301      	orrs	r1, r0
 8002aa2:	b289      	uxth	r1, r1
 8002aa4:	e7ed      	b.n	8002a82 <USB_EPStartXfer+0x102>
 8002aa6:	201f      	movs	r0, #31
 8002aa8:	4030      	ands	r0, r6
 8002aaa:	0971      	lsrs	r1, r6, #5
 8002aac:	4246      	negs	r6, r0
 8002aae:	4170      	adcs	r0, r6
 8002ab0:	1a09      	subs	r1, r1, r0
 8002ab2:	8810      	ldrh	r0, [r2, #0]
 8002ab4:	0289      	lsls	r1, r1, #10
 8002ab6:	4308      	orrs	r0, r1
 8002ab8:	4984      	ldr	r1, [pc, #528]	@ (8002ccc <USB_EPStartXfer+0x34c>)
 8002aba:	e7f1      	b.n	8002aa0 <USB_EPStartXfer+0x120>
 8002abc:	2a01      	cmp	r2, #1
 8002abe:	d1e1      	bne.n	8002a84 <USB_EPStartXfer+0x104>
 8002ac0:	002a      	movs	r2, r5
 8002ac2:	497c      	ldr	r1, [pc, #496]	@ (8002cb4 <USB_EPStartXfer+0x334>)
 8002ac4:	3250      	adds	r2, #80	@ 0x50
 8002ac6:	8810      	ldrh	r0, [r2, #0]
 8002ac8:	7822      	ldrb	r2, [r4, #0]
 8002aca:	1869      	adds	r1, r5, r1
 8002acc:	00d2      	lsls	r2, r2, #3
 8002ace:	1809      	adds	r1, r1, r0
 8002ad0:	1852      	adds	r2, r2, r1
 8002ad2:	8013      	strh	r3, [r2, #0]
 8002ad4:	e7d6      	b.n	8002a84 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ad6:	9a01      	ldr	r2, [sp, #4]
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	4694      	mov	ip, r2
 8002adc:	4a75      	ldr	r2, [pc, #468]	@ (8002cb4 <USB_EPStartXfer+0x334>)
 8002ade:	18a8      	adds	r0, r5, r2
 8002ae0:	9a03      	ldr	r2, [sp, #12]
 8002ae2:	4460      	add	r0, ip
 8002ae4:	1882      	adds	r2, r0, r2
 8002ae6:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ae8:	8922      	ldrh	r2, [r4, #8]
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7ff ff33 	bl	8002956 <USB_WritePMA>
            ep->xfer_buff += len;
 8002af0:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8002af2:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8002af4:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8002af6:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002af8:	42b2      	cmp	r2, r6
 8002afa:	d201      	bcs.n	8002b00 <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 8002afc:	1bf3      	subs	r3, r6, r7
 8002afe:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b00:	7862      	ldrb	r2, [r4, #1]
 8002b02:	6223      	str	r3, [r4, #32]
 8002b04:	b2b3      	uxth	r3, r6
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d12a      	bne.n	8002b60 <USB_EPStartXfer+0x1e0>
 8002b0a:	9a01      	ldr	r2, [sp, #4]
 8002b0c:	496e      	ldr	r1, [pc, #440]	@ (8002cc8 <USB_EPStartXfer+0x348>)
 8002b0e:	8810      	ldrh	r0, [r2, #0]
 8002b10:	7822      	ldrb	r2, [r4, #0]
 8002b12:	1869      	adds	r1, r5, r1
 8002b14:	1809      	adds	r1, r1, r0
 8002b16:	00d2      	lsls	r2, r2, #3
 8002b18:	1852      	adds	r2, r2, r1
 8002b1a:	8811      	ldrh	r1, [r2, #0]
 8002b1c:	0589      	lsls	r1, r1, #22
 8002b1e:	0d89      	lsrs	r1, r1, #22
 8002b20:	8011      	strh	r1, [r2, #0]
 8002b22:	2e00      	cmp	r6, #0
 8002b24:	d106      	bne.n	8002b34 <USB_EPStartXfer+0x1b4>
 8002b26:	2080      	movs	r0, #128	@ 0x80
 8002b28:	8811      	ldrh	r1, [r2, #0]
 8002b2a:	0200      	lsls	r0, r0, #8
 8002b2c:	4301      	orrs	r1, r0
 8002b2e:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b30:	8962      	ldrh	r2, [r4, #10]
 8002b32:	e7a8      	b.n	8002a86 <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b34:	2e3e      	cmp	r6, #62	@ 0x3e
 8002b36:	d808      	bhi.n	8002b4a <USB_EPStartXfer+0x1ca>
 8002b38:	2101      	movs	r1, #1
 8002b3a:	0870      	lsrs	r0, r6, #1
 8002b3c:	4031      	ands	r1, r6
 8002b3e:	1840      	adds	r0, r0, r1
 8002b40:	8811      	ldrh	r1, [r2, #0]
 8002b42:	0280      	lsls	r0, r0, #10
 8002b44:	4301      	orrs	r1, r0
 8002b46:	b289      	uxth	r1, r1
 8002b48:	e7f1      	b.n	8002b2e <USB_EPStartXfer+0x1ae>
 8002b4a:	201f      	movs	r0, #31
 8002b4c:	0971      	lsrs	r1, r6, #5
 8002b4e:	4006      	ands	r6, r0
 8002b50:	4270      	negs	r0, r6
 8002b52:	4146      	adcs	r6, r0
 8002b54:	8810      	ldrh	r0, [r2, #0]
 8002b56:	1b89      	subs	r1, r1, r6
 8002b58:	0289      	lsls	r1, r1, #10
 8002b5a:	4308      	orrs	r0, r1
 8002b5c:	495b      	ldr	r1, [pc, #364]	@ (8002ccc <USB_EPStartXfer+0x34c>)
 8002b5e:	e7f1      	b.n	8002b44 <USB_EPStartXfer+0x1c4>
 8002b60:	2a01      	cmp	r2, #1
 8002b62:	d1e5      	bne.n	8002b30 <USB_EPStartXfer+0x1b0>
 8002b64:	002a      	movs	r2, r5
 8002b66:	4958      	ldr	r1, [pc, #352]	@ (8002cc8 <USB_EPStartXfer+0x348>)
 8002b68:	3250      	adds	r2, #80	@ 0x50
 8002b6a:	8810      	ldrh	r0, [r2, #0]
 8002b6c:	7822      	ldrb	r2, [r4, #0]
 8002b6e:	1869      	adds	r1, r5, r1
 8002b70:	00d2      	lsls	r2, r2, #3
 8002b72:	1809      	adds	r1, r1, r0
 8002b74:	1852      	adds	r2, r2, r1
 8002b76:	8013      	strh	r3, [r2, #0]
 8002b78:	e7da      	b.n	8002b30 <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8002b7a:	8818      	ldrh	r0, [r3, #0]
 8002b7c:	4f54      	ldr	r7, [pc, #336]	@ (8002cd0 <USB_EPStartXfer+0x350>)
 8002b7e:	4a4f      	ldr	r2, [pc, #316]	@ (8002cbc <USB_EPStartXfer+0x33c>)
 8002b80:	4038      	ands	r0, r7
 8002b82:	4310      	orrs	r0, r2
 8002b84:	b280      	uxth	r0, r0
 8002b86:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002b88:	9b01      	ldr	r3, [sp, #4]
 8002b8a:	9a03      	ldr	r2, [sp, #12]
 8002b8c:	8818      	ldrh	r0, [r3, #0]
 8002b8e:	4b49      	ldr	r3, [pc, #292]	@ (8002cb4 <USB_EPStartXfer+0x334>)
 8002b90:	18eb      	adds	r3, r5, r3
 8002b92:	181b      	adds	r3, r3, r0
 8002b94:	189a      	adds	r2, r3, r2
 8002b96:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b98:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b9a:	8922      	ldrh	r2, [r4, #8]
 8002b9c:	e774      	b.n	8002a88 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002b9e:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 8002ba0:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ba2:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 8002ba4:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ba6:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002ba8:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002baa:	0640      	lsls	r0, r0, #25
 8002bac:	d507      	bpl.n	8002bbe <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bae:	4a46      	ldr	r2, [pc, #280]	@ (8002cc8 <USB_EPStartXfer+0x348>)
 8002bb0:	18a8      	adds	r0, r5, r2
 8002bb2:	9a03      	ldr	r2, [sp, #12]
 8002bb4:	1980      	adds	r0, r0, r6
 8002bb6:	1882      	adds	r2, r0, r2
 8002bb8:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bba:	8962      	ldrh	r2, [r4, #10]
 8002bbc:	e764      	b.n	8002a88 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb4 <USB_EPStartXfer+0x334>)
 8002bc0:	18a8      	adds	r0, r5, r2
 8002bc2:	9a03      	ldr	r2, [sp, #12]
 8002bc4:	1980      	adds	r0, r0, r6
 8002bc6:	1882      	adds	r2, r0, r2
 8002bc8:	e7e6      	b.n	8002b98 <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 8002bca:	2a00      	cmp	r2, #0
 8002bcc:	d11c      	bne.n	8002c08 <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 8002bce:	69a3      	ldr	r3, [r4, #24]
 8002bd0:	6921      	ldr	r1, [r4, #16]
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	d901      	bls.n	8002bda <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 8002bd6:	1a5a      	subs	r2, r3, r1
        len = ep->maxpacket;
 8002bd8:	000b      	movs	r3, r1
 8002bda:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002bdc:	002a      	movs	r2, r5
 8002bde:	493a      	ldr	r1, [pc, #232]	@ (8002cc8 <USB_EPStartXfer+0x348>)
 8002be0:	3250      	adds	r2, #80	@ 0x50
 8002be2:	8810      	ldrh	r0, [r2, #0]
 8002be4:	7822      	ldrb	r2, [r4, #0]
 8002be6:	1869      	adds	r1, r5, r1
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	1809      	adds	r1, r1, r0
 8002bec:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002bee:	8811      	ldrh	r1, [r2, #0]
 8002bf0:	0589      	lsls	r1, r1, #22
 8002bf2:	0d89      	lsrs	r1, r1, #22
 8002bf4:	8011      	strh	r1, [r2, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d000      	beq.n	8002bfc <USB_EPStartXfer+0x27c>
 8002bfa:	e0d6      	b.n	8002daa <USB_EPStartXfer+0x42a>
 8002bfc:	2180      	movs	r1, #128	@ 0x80
 8002bfe:	8813      	ldrh	r3, [r2, #0]
 8002c00:	0209      	lsls	r1, r1, #8
 8002c02:	430b      	orrs	r3, r1
 8002c04:	8013      	strh	r3, [r2, #0]
 8002c06:	e03d      	b.n	8002c84 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 8002c08:	78e3      	ldrb	r3, [r4, #3]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d000      	beq.n	8002c10 <USB_EPStartXfer+0x290>
 8002c0e:	e08c      	b.n	8002d2a <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002c10:	2900      	cmp	r1, #0
 8002c12:	d124      	bne.n	8002c5e <USB_EPStartXfer+0x2de>
 8002c14:	0006      	movs	r6, r0
 8002c16:	4a27      	ldr	r2, [pc, #156]	@ (8002cb4 <USB_EPStartXfer+0x334>)
 8002c18:	3650      	adds	r6, #80	@ 0x50
 8002c1a:	8833      	ldrh	r3, [r6, #0]
 8002c1c:	7820      	ldrb	r0, [r4, #0]
 8002c1e:	18aa      	adds	r2, r5, r2
 8002c20:	18d2      	adds	r2, r2, r3
 8002c22:	00c0      	lsls	r0, r0, #3
 8002c24:	1812      	adds	r2, r2, r0
 8002c26:	8813      	ldrh	r3, [r2, #0]
 8002c28:	059b      	lsls	r3, r3, #22
 8002c2a:	0d9b      	lsrs	r3, r3, #22
 8002c2c:	8013      	strh	r3, [r2, #0]
 8002c2e:	6923      	ldr	r3, [r4, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d134      	bne.n	8002c9e <USB_EPStartXfer+0x31e>
 8002c34:	2780      	movs	r7, #128	@ 0x80
 8002c36:	8811      	ldrh	r1, [r2, #0]
 8002c38:	023f      	lsls	r7, r7, #8
 8002c3a:	4339      	orrs	r1, r7
 8002c3c:	8011      	strh	r1, [r2, #0]
 8002c3e:	4a22      	ldr	r2, [pc, #136]	@ (8002cc8 <USB_EPStartXfer+0x348>)
 8002c40:	8831      	ldrh	r1, [r6, #0]
 8002c42:	18aa      	adds	r2, r5, r2
 8002c44:	1852      	adds	r2, r2, r1
 8002c46:	1812      	adds	r2, r2, r0
 8002c48:	8811      	ldrh	r1, [r2, #0]
 8002c4a:	0589      	lsls	r1, r1, #22
 8002c4c:	0d89      	lsrs	r1, r1, #22
 8002c4e:	8011      	strh	r1, [r2, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d154      	bne.n	8002cfe <USB_EPStartXfer+0x37e>
 8002c54:	2180      	movs	r1, #128	@ 0x80
 8002c56:	8813      	ldrh	r3, [r2, #0]
 8002c58:	0209      	lsls	r1, r1, #8
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 8002c5e:	69e3      	ldr	r3, [r4, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00f      	beq.n	8002c84 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002c64:	7823      	ldrb	r3, [r4, #0]
 8002c66:	491b      	ldr	r1, [pc, #108]	@ (8002cd4 <USB_EPStartXfer+0x354>)
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	18eb      	adds	r3, r5, r3
 8002c6c:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002c6e:	400a      	ands	r2, r1
 8002c70:	428a      	cmp	r2, r1
 8002c72:	d001      	beq.n	8002c78 <USB_EPStartXfer+0x2f8>
 8002c74:	2a00      	cmp	r2, #0
 8002c76:	d105      	bne.n	8002c84 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	4911      	ldr	r1, [pc, #68]	@ (8002cc0 <USB_EPStartXfer+0x340>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	4916      	ldr	r1, [pc, #88]	@ (8002cd8 <USB_EPStartXfer+0x358>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c84:	7823      	ldrb	r3, [r4, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	18ed      	adds	r5, r5, r3
 8002c8a:	882a      	ldrh	r2, [r5, #0]
 8002c8c:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <USB_EPStartXfer+0x35c>)
 8002c8e:	401a      	ands	r2, r3
 8002c90:	23c0      	movs	r3, #192	@ 0xc0
 8002c92:	019b      	lsls	r3, r3, #6
 8002c94:	4053      	eors	r3, r2
 8002c96:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <USB_EPStartXfer+0x360>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	802b      	strh	r3, [r5, #0]
 8002c9c:	e6a0      	b.n	80029e0 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002c9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ca0:	d820      	bhi.n	8002ce4 <USB_EPStartXfer+0x364>
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	085f      	lsrs	r7, r3, #1
 8002ca6:	4019      	ands	r1, r3
 8002ca8:	187f      	adds	r7, r7, r1
 8002caa:	8811      	ldrh	r1, [r2, #0]
 8002cac:	02bf      	lsls	r7, r7, #10
 8002cae:	4339      	orrs	r1, r7
 8002cb0:	b289      	uxth	r1, r1
 8002cb2:	e7c3      	b.n	8002c3c <USB_EPStartXfer+0x2bc>
 8002cb4:	00000402 	.word	0x00000402
 8002cb8:	ffff8fbf 	.word	0xffff8fbf
 8002cbc:	ffff8080 	.word	0xffff8080
 8002cc0:	ffff8f8f 	.word	0xffff8f8f
 8002cc4:	00008180 	.word	0x00008180
 8002cc8:	00000406 	.word	0x00000406
 8002ccc:	ffff8000 	.word	0xffff8000
 8002cd0:	ffff8e8f 	.word	0xffff8e8f
 8002cd4:	00004040 	.word	0x00004040
 8002cd8:	000080c0 	.word	0x000080c0
 8002cdc:	ffffbf8f 	.word	0xffffbf8f
 8002ce0:	00008080 	.word	0x00008080
 8002ce4:	271f      	movs	r7, #31
 8002ce6:	401f      	ands	r7, r3
 8002ce8:	0039      	movs	r1, r7
 8002cea:	424f      	negs	r7, r1
 8002cec:	414f      	adcs	r7, r1
 8002cee:	0959      	lsrs	r1, r3, #5
 8002cf0:	1bc9      	subs	r1, r1, r7
 8002cf2:	8817      	ldrh	r7, [r2, #0]
 8002cf4:	9101      	str	r1, [sp, #4]
 8002cf6:	0289      	lsls	r1, r1, #10
 8002cf8:	430f      	orrs	r7, r1
 8002cfa:	4937      	ldr	r1, [pc, #220]	@ (8002dd8 <USB_EPStartXfer+0x458>)
 8002cfc:	e7d7      	b.n	8002cae <USB_EPStartXfer+0x32e>
 8002cfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d00:	d808      	bhi.n	8002d14 <USB_EPStartXfer+0x394>
 8002d02:	2001      	movs	r0, #1
 8002d04:	0859      	lsrs	r1, r3, #1
 8002d06:	4003      	ands	r3, r0
 8002d08:	18c9      	adds	r1, r1, r3
 8002d0a:	8813      	ldrh	r3, [r2, #0]
 8002d0c:	0289      	lsls	r1, r1, #10
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	e7a3      	b.n	8002c5c <USB_EPStartXfer+0x2dc>
 8002d14:	201f      	movs	r0, #31
 8002d16:	0959      	lsrs	r1, r3, #5
 8002d18:	4003      	ands	r3, r0
 8002d1a:	4258      	negs	r0, r3
 8002d1c:	4143      	adcs	r3, r0
 8002d1e:	1ac9      	subs	r1, r1, r3
 8002d20:	8813      	ldrh	r3, [r2, #0]
 8002d22:	0289      	lsls	r1, r1, #10
 8002d24:	4319      	orrs	r1, r3
 8002d26:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd8 <USB_EPStartXfer+0x458>)
 8002d28:	e7f1      	b.n	8002d0e <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8002d2c:	4283      	cmp	r3, r0
 8002d2e:	d000      	beq.n	8002d32 <USB_EPStartXfer+0x3b2>
 8002d30:	e657      	b.n	80029e2 <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 8002d32:	69a3      	ldr	r3, [r4, #24]
 8002d34:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 8002d36:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 8002d3c:	1a98      	subs	r0, r3, r2
          len = ep->maxpacket;
 8002d3e:	0013      	movs	r3, r2
 8002d40:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002d42:	2900      	cmp	r1, #0
 8002d44:	d19e      	bne.n	8002c84 <USB_EPStartXfer+0x304>
 8002d46:	002e      	movs	r6, r5
 8002d48:	4a24      	ldr	r2, [pc, #144]	@ (8002ddc <USB_EPStartXfer+0x45c>)
 8002d4a:	3650      	adds	r6, #80	@ 0x50
 8002d4c:	8831      	ldrh	r1, [r6, #0]
 8002d4e:	7820      	ldrb	r0, [r4, #0]
 8002d50:	18aa      	adds	r2, r5, r2
 8002d52:	1852      	adds	r2, r2, r1
 8002d54:	00c0      	lsls	r0, r0, #3
 8002d56:	1812      	adds	r2, r2, r0
 8002d58:	8811      	ldrh	r1, [r2, #0]
 8002d5a:	0589      	lsls	r1, r1, #22
 8002d5c:	0d89      	lsrs	r1, r1, #22
 8002d5e:	8011      	strh	r1, [r2, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <USB_EPStartXfer+0x3fa>
 8002d64:	2780      	movs	r7, #128	@ 0x80
 8002d66:	8811      	ldrh	r1, [r2, #0]
 8002d68:	023f      	lsls	r7, r7, #8
 8002d6a:	4339      	orrs	r1, r7
 8002d6c:	8011      	strh	r1, [r2, #0]
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002de0 <USB_EPStartXfer+0x460>)
 8002d70:	8831      	ldrh	r1, [r6, #0]
 8002d72:	18aa      	adds	r2, r5, r2
 8002d74:	1852      	adds	r2, r2, r1
 8002d76:	1812      	adds	r2, r2, r0
 8002d78:	e739      	b.n	8002bee <USB_EPStartXfer+0x26e>
 8002d7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d7c:	d808      	bhi.n	8002d90 <USB_EPStartXfer+0x410>
 8002d7e:	2101      	movs	r1, #1
 8002d80:	085f      	lsrs	r7, r3, #1
 8002d82:	4019      	ands	r1, r3
 8002d84:	187f      	adds	r7, r7, r1
 8002d86:	8811      	ldrh	r1, [r2, #0]
 8002d88:	02bf      	lsls	r7, r7, #10
 8002d8a:	4339      	orrs	r1, r7
 8002d8c:	b289      	uxth	r1, r1
 8002d8e:	e7ed      	b.n	8002d6c <USB_EPStartXfer+0x3ec>
 8002d90:	271f      	movs	r7, #31
 8002d92:	401f      	ands	r7, r3
 8002d94:	0039      	movs	r1, r7
 8002d96:	424f      	negs	r7, r1
 8002d98:	414f      	adcs	r7, r1
 8002d9a:	0959      	lsrs	r1, r3, #5
 8002d9c:	1bc9      	subs	r1, r1, r7
 8002d9e:	8817      	ldrh	r7, [r2, #0]
 8002da0:	9101      	str	r1, [sp, #4]
 8002da2:	0289      	lsls	r1, r1, #10
 8002da4:	430f      	orrs	r7, r1
 8002da6:	490c      	ldr	r1, [pc, #48]	@ (8002dd8 <USB_EPStartXfer+0x458>)
 8002da8:	e7ef      	b.n	8002d8a <USB_EPStartXfer+0x40a>
 8002daa:	2b3e      	cmp	r3, #62	@ 0x3e
 8002dac:	d808      	bhi.n	8002dc0 <USB_EPStartXfer+0x440>
 8002dae:	2001      	movs	r0, #1
 8002db0:	0859      	lsrs	r1, r3, #1
 8002db2:	4003      	ands	r3, r0
 8002db4:	18c9      	adds	r1, r1, r3
 8002db6:	8813      	ldrh	r3, [r2, #0]
 8002db8:	0289      	lsls	r1, r1, #10
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	e721      	b.n	8002c04 <USB_EPStartXfer+0x284>
 8002dc0:	201f      	movs	r0, #31
 8002dc2:	0959      	lsrs	r1, r3, #5
 8002dc4:	4003      	ands	r3, r0
 8002dc6:	4258      	negs	r0, r3
 8002dc8:	4143      	adcs	r3, r0
 8002dca:	1ac9      	subs	r1, r1, r3
 8002dcc:	8813      	ldrh	r3, [r2, #0]
 8002dce:	0289      	lsls	r1, r1, #10
 8002dd0:	4319      	orrs	r1, r3
 8002dd2:	4b01      	ldr	r3, [pc, #4]	@ (8002dd8 <USB_EPStartXfer+0x458>)
 8002dd4:	e7f1      	b.n	8002dba <USB_EPStartXfer+0x43a>
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	ffff8000 	.word	0xffff8000
 8002ddc:	00000402 	.word	0x00000402
 8002de0:	00000406 	.word	0x00000406

08002de4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002de6:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002de8:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002dea:	00ed      	lsls	r5, r5, #3
 8002dec:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 8002dee:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8002df0:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002df2:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8002df4:	1a47      	subs	r7, r0, r1
 8002df6:	19ea      	adds	r2, r5, r7
 8002df8:	2e00      	cmp	r6, #0
 8002dfa:	d106      	bne.n	8002e0a <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002dfc:	07db      	lsls	r3, r3, #31
 8002dfe:	d503      	bpl.n	8002e08 <USB_ReadPMA+0x24>
 8002e00:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 8002e02:	1900      	adds	r0, r0, r4
 8002e04:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002e06:	550b      	strb	r3, [r1, r4]
  }
}
 8002e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002e0a:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8002e0c:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002e0e:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002e10:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8002e16:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 8002e18:	e7ed      	b.n	8002df6 <USB_ReadPMA+0x12>
	...

08002e1c <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_CfgFSDesc);
 8002e1c:	2322      	movs	r3, #34	@ 0x22
 8002e1e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgFSDesc;
 8002e20:	4800      	ldr	r0, [pc, #0]	@ (8002e24 <USBD_HID_GetFSCfgDesc+0x8>)
}
 8002e22:	4770      	bx	lr
 8002e24:	2000006c 	.word	0x2000006c

08002e28 <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_CfgHSDesc);
 8002e28:	2322      	movs	r3, #34	@ 0x22
 8002e2a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgHSDesc;
 8002e2c:	4800      	ldr	r0, [pc, #0]	@ (8002e30 <USBD_HID_GetHSCfgDesc+0x8>)
}
 8002e2e:	4770      	bx	lr
 8002e30:	20000048 	.word	0x20000048

08002e34 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8002e34:	2322      	movs	r3, #34	@ 0x22
 8002e36:	8003      	strh	r3, [r0, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8002e38:	4800      	ldr	r0, [pc, #0]	@ (8002e3c <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
}
 8002e3a:	4770      	bx	lr
 8002e3c:	20000024 	.word	0x20000024

08002e40 <USBD_HID_DataIn>:
                                uint8_t epnum)
{

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002e40:	23ae      	movs	r3, #174	@ 0xae
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	58c3      	ldr	r3, [r0, r3]
 8002e46:	2000      	movs	r0, #0
 8002e48:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002e4a:	4770      	bx	lr

08002e4c <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8002e4c:	230a      	movs	r3, #10
 8002e4e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
 8002e50:	4800      	ldr	r0, [pc, #0]	@ (8002e54 <USBD_HID_GetDeviceQualifierDesc+0x8>)
}
 8002e52:	4770      	bx	lr
 8002e54:	2000000c 	.word	0x2000000c

08002e58 <USBD_HID_Setup>:
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8002e58:	22ae      	movs	r2, #174	@ 0xae
{
 8002e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e5c:	000b      	movs	r3, r1
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	5881      	ldr	r1, [r0, r2]
  uint16_t status_info = 0U;
 8002e62:	466a      	mov	r2, sp
{
 8002e64:	0004      	movs	r4, r0
 8002e66:	7818      	ldrb	r0, [r3, #0]
  uint16_t status_info = 0U;
 8002e68:	1d95      	adds	r5, r2, #6
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	0006      	movs	r6, r0
 8002e6e:	802a      	strh	r2, [r5, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e70:	3260      	adds	r2, #96	@ 0x60
 8002e72:	4016      	ands	r6, r2
 8002e74:	4210      	tst	r0, r2
 8002e76:	d01a      	beq.n	8002eae <USBD_HID_Setup+0x56>
 8002e78:	2e20      	cmp	r6, #32
 8002e7a:	d12b      	bne.n	8002ed4 <USBD_HID_Setup+0x7c>
      switch (req->bRequest)
 8002e7c:	7858      	ldrb	r0, [r3, #1]
 8002e7e:	3802      	subs	r0, #2
 8002e80:	2809      	cmp	r0, #9
 8002e82:	d827      	bhi.n	8002ed4 <USBD_HID_Setup+0x7c>
 8002e84:	f7fd f952 	bl	800012c <__gnu_thumb1_case_uqi>
 8002e88:	26260e0d 	.word	0x26260e0d
 8002e8c:	26262626 	.word	0x26262626
 8002e90:	0509      	.short	0x0509
          hhid->Protocol = (uint8_t)(req->wValue);
 8002e92:	789b      	ldrb	r3, [r3, #2]
 8002e94:	600b      	str	r3, [r1, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8002e96:	2000      	movs	r0, #0
}
 8002e98:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002e9a:	885b      	ldrh	r3, [r3, #2]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	604b      	str	r3, [r1, #4]
          break;
 8002ea0:	e7f9      	b.n	8002e96 <USBD_HID_Setup+0x3e>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8002ea2:	3104      	adds	r1, #4
 8002ea4:	2201      	movs	r2, #1
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	f000 fc3f 	bl	800372a <USBD_CtlSendData>
 8002eac:	e7f3      	b.n	8002e96 <USBD_HID_Setup+0x3e>
      switch (req->bRequest)
 8002eae:	7858      	ldrb	r0, [r3, #1]
 8002eb0:	280b      	cmp	r0, #11
 8002eb2:	d80f      	bhi.n	8002ed4 <USBD_HID_Setup+0x7c>
 8002eb4:	f7fd f93a 	bl	800012c <__gnu_thumb1_case_uqi>
 8002eb8:	0e0e0e06 	.word	0x0e0e0e06
 8002ebc:	0e140e0e 	.word	0x0e140e0e
 8002ec0:	322a0e0e 	.word	0x322a0e0e
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002ec4:	22a7      	movs	r2, #167	@ 0xa7
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	5ca2      	ldrb	r2, [r4, r2]
 8002eca:	2a03      	cmp	r2, #3
 8002ecc:	d102      	bne.n	8002ed4 <USBD_HID_Setup+0x7c>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002ece:	0029      	movs	r1, r5
 8002ed0:	3a01      	subs	r2, #1
 8002ed2:	e7e8      	b.n	8002ea6 <USBD_HID_Setup+0x4e>
            USBD_CtlError(pdev, req);
 8002ed4:	0020      	movs	r0, r4
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	f000 fc00 	bl	80036dc <USBD_CtlError>
            ret = USBD_FAIL;
 8002edc:	2002      	movs	r0, #2
 8002ede:	e7db      	b.n	8002e98 <USBD_HID_Setup+0x40>
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8002ee0:	885a      	ldrh	r2, [r3, #2]
 8002ee2:	0a12      	lsrs	r2, r2, #8
 8002ee4:	2a22      	cmp	r2, #34	@ 0x22
 8002ee6:	d107      	bne.n	8002ef8 <USBD_HID_Setup+0xa0>
        	  len = MIN(DS5_HID_REPORT_DESC_SIZE, req->wLength);
 8002ee8:	88db      	ldrh	r3, [r3, #6]
 8002eea:	1c1a      	adds	r2, r3, #0
 8002eec:	2b63      	cmp	r3, #99	@ 0x63
 8002eee:	d900      	bls.n	8002ef2 <USBD_HID_Setup+0x9a>
 8002ef0:	2263      	movs	r2, #99	@ 0x63
			  pbuf = DS5_HID_ReportDesc;
 8002ef2:	490e      	ldr	r1, [pc, #56]	@ (8002f2c <USBD_HID_Setup+0xd4>)
        	  len = MIN(DS5_HID_REPORT_DESC_SIZE, req->wLength);
 8002ef4:	b292      	uxth	r2, r2
			  pbuf = DS5_HID_ReportDesc;
 8002ef6:	e7d6      	b.n	8002ea6 <USBD_HID_Setup+0x4e>
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8002ef8:	2a21      	cmp	r2, #33	@ 0x21
 8002efa:	d1eb      	bne.n	8002ed4 <USBD_HID_Setup+0x7c>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8002efc:	88db      	ldrh	r3, [r3, #6]
 8002efe:	1c1a      	adds	r2, r3, #0
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d900      	bls.n	8002f06 <USBD_HID_Setup+0xae>
 8002f04:	2209      	movs	r2, #9
            pbuf = USBD_HID_Desc;
 8002f06:	490a      	ldr	r1, [pc, #40]	@ (8002f30 <USBD_HID_Setup+0xd8>)
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8002f08:	b292      	uxth	r2, r2
          USBD_CtlSendData(pdev, pbuf, len);
 8002f0a:	e7cc      	b.n	8002ea6 <USBD_HID_Setup+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f0c:	22a7      	movs	r2, #167	@ 0xa7
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	5ca2      	ldrb	r2, [r4, r2]
 8002f12:	2a03      	cmp	r2, #3
 8002f14:	d1de      	bne.n	8002ed4 <USBD_HID_Setup+0x7c>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8002f16:	3108      	adds	r1, #8
 8002f18:	3a02      	subs	r2, #2
 8002f1a:	e7c4      	b.n	8002ea6 <USBD_HID_Setup+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f1c:	22a7      	movs	r2, #167	@ 0xa7
 8002f1e:	0092      	lsls	r2, r2, #2
 8002f20:	5ca2      	ldrb	r2, [r4, r2]
 8002f22:	2a03      	cmp	r2, #3
 8002f24:	d1d6      	bne.n	8002ed4 <USBD_HID_Setup+0x7c>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8002f26:	789b      	ldrb	r3, [r3, #2]
 8002f28:	608b      	str	r3, [r1, #8]
 8002f2a:	e7b4      	b.n	8002e96 <USBD_HID_Setup+0x3e>
 8002f2c:	200000c8 	.word	0x200000c8
 8002f30:	20000018 	.word	0x20000018

08002f34 <USBD_HID_DeInit>:
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData != NULL)
 8002f36:	25ae      	movs	r5, #174	@ 0xae
{
 8002f38:	0004      	movs	r4, r0
  pdev->ep_in[DS5_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002f3a:	2600      	movs	r6, #0
  USBD_LL_CloseEP(pdev, DS5_HID_EPIN_ADDR);
 8002f3c:	2181      	movs	r1, #129	@ 0x81
  if (pdev->pClassData != NULL)
 8002f3e:	00ad      	lsls	r5, r5, #2
  USBD_LL_CloseEP(pdev, DS5_HID_EPIN_ADDR);
 8002f40:	f000 fda7 	bl	8003a92 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002f44:	5960      	ldr	r0, [r4, r5]
  pdev->ep_in[DS5_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002f46:	62e6      	str	r6, [r4, #44]	@ 0x2c
  if (pdev->pClassData != NULL)
 8002f48:	42b0      	cmp	r0, r6
 8002f4a:	d002      	beq.n	8002f52 <USBD_HID_DeInit+0x1e>
    USBD_free(pdev->pClassData);
 8002f4c:	f000 fdee 	bl	8003b2c <USBD_static_free>
    pdev->pClassData = NULL;
 8002f50:	5166      	str	r6, [r4, r5]
}
 8002f52:	2000      	movs	r0, #0
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f58 <USBD_HID_Init>:
{
 8002f58:	b570      	push	{r4, r5, r6, lr}
	if (g_current_mode == MODE_DS5) {
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <USBD_HID_Init+0x48>)
{
 8002f5c:	0004      	movs	r4, r0
	if (g_current_mode == MODE_DS5) {
 8002f5e:	781d      	ldrb	r5, [r3, #0]
 8002f60:	2d02      	cmp	r5, #2
 8002f62:	d113      	bne.n	8002f8c <USBD_HID_Init+0x34>
	  USBD_LL_OpenEP(pdev, DS5_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, DS5_HID_EPIN_SIZE);
 8002f64:	2340      	movs	r3, #64	@ 0x40
 8002f66:	2203      	movs	r2, #3
 8002f68:	2181      	movs	r1, #129	@ 0x81
 8002f6a:	f000 fd86 	bl	8003a7a <USBD_LL_OpenEP>
	  pdev->ep_in[DS5_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	62e3      	str	r3, [r4, #44]	@ 0x2c
  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8002f72:	2010      	movs	r0, #16
 8002f74:	f000 fdd6 	bl	8003b24 <USBD_static_malloc>
 8002f78:	22ae      	movs	r2, #174	@ 0xae
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	50a0      	str	r0, [r4, r2]
    return USBD_FAIL;
 8002f80:	2002      	movs	r0, #2
  if (pdev->pClassData == NULL)
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <USBD_HID_Init+0x32>
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002f86:	2000      	movs	r0, #0
 8002f88:	7318      	strb	r0, [r3, #12]
}
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (g_current_mode == MODE_GAMEPAD) {
 8002f8c:	2d01      	cmp	r5, #1
 8002f8e:	d1f0      	bne.n	8002f72 <USBD_HID_Init+0x1a>
	  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8002f90:	2304      	movs	r3, #4
 8002f92:	2203      	movs	r2, #3
 8002f94:	2181      	movs	r1, #129	@ 0x81
 8002f96:	f000 fd70 	bl	8003a7a <USBD_LL_OpenEP>
	  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002f9a:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8002f9c:	e7e9      	b.n	8002f72 <USBD_HID_Init+0x1a>
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	200002c0 	.word	0x200002c0

08002fa4 <USBD_HID_SendReport>:
{
 8002fa4:	0013      	movs	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002fa6:	22a7      	movs	r2, #167	@ 0xa7
{
 8002fa8:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	5c82      	ldrb	r2, [r0, r2]
 8002fae:	2a03      	cmp	r2, #3
 8002fb0:	d10b      	bne.n	8002fca <USBD_HID_SendReport+0x26>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8002fb2:	22ae      	movs	r2, #174	@ 0xae
 8002fb4:	0092      	lsls	r2, r2, #2
 8002fb6:	5882      	ldr	r2, [r0, r2]
    if (hhid->state == HID_IDLE)
 8002fb8:	7b14      	ldrb	r4, [r2, #12]
 8002fba:	2c00      	cmp	r4, #0
 8002fbc:	d105      	bne.n	8002fca <USBD_HID_SendReport+0x26>
      hhid->state = HID_BUSY;
 8002fbe:	3401      	adds	r4, #1
 8002fc0:	7314      	strb	r4, [r2, #12]
      USBD_LL_Transmit(pdev,
 8002fc2:	000a      	movs	r2, r1
 8002fc4:	2181      	movs	r1, #129	@ 0x81
 8002fc6:	f000 fd9b 	bl	8003b00 <USBD_LL_Transmit>
}
 8002fca:	2000      	movs	r0, #0
 8002fcc:	bd10      	pop	{r4, pc}

08002fce <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8002fce:	2302      	movs	r3, #2
{
 8002fd0:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d013      	beq.n	8002ffe <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002fd6:	23ad      	movs	r3, #173	@ 0xad
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	58c4      	ldr	r4, [r0, r3]
 8002fdc:	2c00      	cmp	r4, #0
 8002fde:	d001      	beq.n	8002fe4 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8002fe0:	2400      	movs	r4, #0
 8002fe2:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002fe4:	2900      	cmp	r1, #0
 8002fe6:	d002      	beq.n	8002fee <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8002fe8:	23ac      	movs	r3, #172	@ 0xac
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fee:	23a7      	movs	r3, #167	@ 0xa7
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8002ff6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002ff8:	f000 fd04 	bl	8003a04 <USBD_LL_Init>

  return USBD_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	0018      	movs	r0, r3
 8003000:	bd10      	pop	{r4, pc}

08003002 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003002:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003004:	2002      	movs	r0, #2
  if (pclass != NULL)
 8003006:	2900      	cmp	r1, #0
 8003008:	d003      	beq.n	8003012 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 800300a:	22ad      	movs	r2, #173	@ 0xad
    status = USBD_OK;
 800300c:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 8003012:	4770      	bx	lr

08003014 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003014:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003016:	f000 fd27 	bl	8003a68 <USBD_LL_Start>

  return USBD_OK;
}
 800301a:	2000      	movs	r0, #0
 800301c:	bd10      	pop	{r4, pc}

0800301e <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800301e:	23ad      	movs	r3, #173	@ 0xad
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	58c2      	ldr	r2, [r0, r3]
{
 8003024:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003026:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 8003028:	2a00      	cmp	r2, #0
 800302a:	d004      	beq.n	8003036 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800302c:	6813      	ldr	r3, [r2, #0]
 800302e:	4798      	blx	r3
 8003030:	1e43      	subs	r3, r0, #1
 8003032:	4198      	sbcs	r0, r3
 8003034:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003036:	0018      	movs	r0, r3
 8003038:	bd10      	pop	{r4, pc}

0800303a <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800303a:	23ad      	movs	r3, #173	@ 0xad
{
 800303c:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	58c3      	ldr	r3, [r0, r3]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4798      	blx	r3

  return USBD_OK;
}
 8003046:	2000      	movs	r0, #0
 8003048:	bd10      	pop	{r4, pc}
	...

0800304c <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800304c:	23aa      	movs	r3, #170	@ 0xaa
 800304e:	009b      	lsls	r3, r3, #2
{
 8003050:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003052:	18c5      	adds	r5, r0, r3
{
 8003054:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003056:	0028      	movs	r0, r5
 8003058:	f000 fb2c 	bl	80036b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800305c:	23a5      	movs	r3, #165	@ 0xa5
 800305e:	2201      	movs	r2, #1
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <USBD_LL_SetupStage+0x60>)
 8003066:	5ae2      	ldrh	r2, [r4, r3]
 8003068:	3b16      	subs	r3, #22
 800306a:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800306c:	3310      	adds	r3, #16
 800306e:	5ce1      	ldrb	r1, [r4, r3]
 8003070:	231f      	movs	r3, #31
 8003072:	400b      	ands	r3, r1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d009      	beq.n	800308c <USBD_LL_SetupStage+0x40>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d00c      	beq.n	8003096 <USBD_LL_SetupStage+0x4a>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10f      	bne.n	80030a0 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003080:	0029      	movs	r1, r5
 8003082:	0020      	movs	r0, r4
 8003084:	f000 f91a 	bl	80032bc <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8003088:	2000      	movs	r0, #0
 800308a:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800308c:	0029      	movs	r1, r5
 800308e:	0020      	movs	r0, r4
 8003090:	f000 fa54 	bl	800353c <USBD_StdItfReq>
      break;
 8003094:	e7f8      	b.n	8003088 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 8003096:	0029      	movs	r1, r5
 8003098:	0020      	movs	r0, r4
 800309a:	f000 fa77 	bl	800358c <USBD_StdEPReq>
      break;
 800309e:	e7f3      	b.n	8003088 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80030a0:	237f      	movs	r3, #127	@ 0x7f
 80030a2:	0020      	movs	r0, r4
 80030a4:	4399      	bics	r1, r3
 80030a6:	f000 fcfd 	bl	8003aa4 <USBD_LL_StallEP>
      break;
 80030aa:	e7ed      	b.n	8003088 <USBD_LL_SetupStage+0x3c>
 80030ac:	000002ae 	.word	0x000002ae

080030b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0004      	movs	r4, r0
 80030b4:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80030b6:	2900      	cmp	r1, #0
 80030b8:	d12e      	bne.n	8003118 <USBD_LL_DataOutStage+0x68>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80030ba:	23a5      	movs	r3, #165	@ 0xa5
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	58c2      	ldr	r2, [r0, r3]
 80030c0:	2a03      	cmp	r2, #3
 80030c2:	d123      	bne.n	800310c <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 80030c4:	0002      	movs	r2, r0
 80030c6:	3255      	adds	r2, #85	@ 0x55
 80030c8:	32ff      	adds	r2, #255	@ 0xff
 80030ca:	68d3      	ldr	r3, [r2, #12]
 80030cc:	6910      	ldr	r0, [r2, #16]
 80030ce:	4283      	cmp	r3, r0
 80030d0:	d90b      	bls.n	80030ea <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 80030d2:	1a1b      	subs	r3, r3, r0
 80030d4:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 80030d6:	b282      	uxth	r2, r0
 80030d8:	4298      	cmp	r0, r3
 80030da:	d900      	bls.n	80030de <USBD_LL_DataOutStage+0x2e>
 80030dc:	b29a      	uxth	r2, r3
 80030de:	0029      	movs	r1, r5
 80030e0:	0020      	movs	r0, r4
 80030e2:	f000 fb38 	bl	8003756 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80030e6:	2000      	movs	r0, #0
}
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80030ea:	23ad      	movs	r3, #173	@ 0xad
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	58e3      	ldr	r3, [r4, r3]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80030f6:	22a7      	movs	r2, #167	@ 0xa7
 80030f8:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80030fa:	5ca2      	ldrb	r2, [r4, r2]
 80030fc:	2a03      	cmp	r2, #3
 80030fe:	d101      	bne.n	8003104 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8003100:	0020      	movs	r0, r4
 8003102:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003104:	0020      	movs	r0, r4
 8003106:	f000 fb2e 	bl	8003766 <USBD_CtlSendStatus>
 800310a:	e7ec      	b.n	80030e6 <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800310c:	2a05      	cmp	r2, #5
 800310e:	d1ea      	bne.n	80030e6 <USBD_LL_DataOutStage+0x36>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003110:	50c1      	str	r1, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8003112:	f000 fcc7 	bl	8003aa4 <USBD_LL_StallEP>
 8003116:	e7e6      	b.n	80030e6 <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003118:	23ad      	movs	r3, #173	@ 0xad
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800311e:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0e0      	beq.n	80030e8 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003126:	22a7      	movs	r2, #167	@ 0xa7
 8003128:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 800312a:	5ca2      	ldrb	r2, [r4, r2]
 800312c:	2a03      	cmp	r2, #3
 800312e:	d1db      	bne.n	80030e8 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8003130:	0020      	movs	r0, r4
 8003132:	4798      	blx	r3
 8003134:	e7d7      	b.n	80030e6 <USBD_LL_DataOutStage+0x36>

08003136 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003138:	000d      	movs	r5, r1
 800313a:	0004      	movs	r4, r0
 800313c:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800313e:	2d00      	cmp	r5, #0
 8003140:	d14d      	bne.n	80031de <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003142:	23a5      	movs	r3, #165	@ 0xa5
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	58c3      	ldr	r3, [r0, r3]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d13e      	bne.n	80031ca <USBD_LL_DataInStage+0x94>
    {
      if (pep->rem_length > pep->maxpacket)
 800314c:	6a03      	ldr	r3, [r0, #32]
 800314e:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8003150:	42b3      	cmp	r3, r6
 8003152:	d911      	bls.n	8003178 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 8003154:	1b9b      	subs	r3, r3, r6
 8003156:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003158:	b29a      	uxth	r2, r3
 800315a:	f000 faf4 	bl	8003746 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800315e:	002b      	movs	r3, r5
 8003160:	002a      	movs	r2, r5
 8003162:	0029      	movs	r1, r5
 8003164:	0020      	movs	r0, r4
 8003166:	f000 fcd4 	bl	8003b12 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800316a:	23a8      	movs	r3, #168	@ 0xa8
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	5ce2      	ldrb	r2, [r4, r3]
 8003170:	2a01      	cmp	r2, #1
 8003172:	d031      	beq.n	80031d8 <USBD_LL_DataInStage+0xa2>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003174:	2000      	movs	r0, #0
}
 8003176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003178:	69c7      	ldr	r7, [r0, #28]
 800317a:	0031      	movs	r1, r6
 800317c:	0038      	movs	r0, r7
 800317e:	f7fd f86f 	bl	8000260 <__aeabi_uidivmod>
 8003182:	1e0d      	subs	r5, r1, #0
 8003184:	d10c      	bne.n	80031a0 <USBD_LL_DataInStage+0x6a>
 8003186:	42be      	cmp	r6, r7
 8003188:	d80a      	bhi.n	80031a0 <USBD_LL_DataInStage+0x6a>
            (pep->total_length < pdev->ep0_data_len))
 800318a:	26a6      	movs	r6, #166	@ 0xa6
 800318c:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 800318e:	59a3      	ldr	r3, [r4, r6]
 8003190:	429f      	cmp	r7, r3
 8003192:	d205      	bcs.n	80031a0 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003194:	000a      	movs	r2, r1
 8003196:	0020      	movs	r0, r4
 8003198:	f000 fad5 	bl	8003746 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800319c:	51a5      	str	r5, [r4, r6]
 800319e:	e7de      	b.n	800315e <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80031a0:	23ad      	movs	r3, #173	@ 0xad
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	58e3      	ldr	r3, [r4, r3]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <USBD_LL_DataInStage+0x84>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031ac:	22a7      	movs	r2, #167	@ 0xa7
 80031ae:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80031b0:	5ca2      	ldrb	r2, [r4, r2]
 80031b2:	2a03      	cmp	r2, #3
 80031b4:	d101      	bne.n	80031ba <USBD_LL_DataInStage+0x84>
            pdev->pClass->EP0_TxSent(pdev);
 80031b6:	0020      	movs	r0, r4
 80031b8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80031ba:	2180      	movs	r1, #128	@ 0x80
 80031bc:	0020      	movs	r0, r4
 80031be:	f000 fc71 	bl	8003aa4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80031c2:	0020      	movs	r0, r4
 80031c4:	f000 fadb 	bl	800377e <USBD_CtlReceiveStatus>
 80031c8:	e7cf      	b.n	800316a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80031ca:	2204      	movs	r2, #4
 80031cc:	4393      	bics	r3, r2
 80031ce:	d1cc      	bne.n	800316a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	f000 fc67 	bl	8003aa4 <USBD_LL_StallEP>
 80031d6:	e7c8      	b.n	800316a <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 80031d8:	2200      	movs	r2, #0
 80031da:	54e2      	strb	r2, [r4, r3]
 80031dc:	e7ca      	b.n	8003174 <USBD_LL_DataInStage+0x3e>
  else if ((pdev->pClass->DataIn != NULL) &&
 80031de:	23ad      	movs	r3, #173	@ 0xad
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80031e4:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0c4      	beq.n	8003176 <USBD_LL_DataInStage+0x40>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031ec:	22a7      	movs	r2, #167	@ 0xa7
 80031ee:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80031f0:	5ca2      	ldrb	r2, [r4, r2]
 80031f2:	2a03      	cmp	r2, #3
 80031f4:	d1bf      	bne.n	8003176 <USBD_LL_DataInStage+0x40>
    pdev->pClass->DataIn(pdev, epnum);
 80031f6:	0029      	movs	r1, r5
 80031f8:	0020      	movs	r0, r4
 80031fa:	4798      	blx	r3
 80031fc:	e7ba      	b.n	8003174 <USBD_LL_DataInStage+0x3e>

080031fe <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80031fe:	2200      	movs	r2, #0
{
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003204:	0011      	movs	r1, r2
 8003206:	2340      	movs	r3, #64	@ 0x40
 8003208:	f000 fc37 	bl	8003a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800320c:	0023      	movs	r3, r4
 800320e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003210:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003212:	33fc      	adds	r3, #252	@ 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003214:	2180      	movs	r1, #128	@ 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003216:	65dd      	str	r5, [r3, #92]	@ 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003218:	669e      	str	r6, [r3, #104]	@ 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800321a:	2200      	movs	r2, #0
 800321c:	0033      	movs	r3, r6
 800321e:	0020      	movs	r0, r4
 8003220:	f000 fc2b 	bl	8003a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003224:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8003226:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003228:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800322a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800322c:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800322e:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8003230:	3b08      	subs	r3, #8
 8003232:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8003234:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8003236:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003238:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 800323a:	3314      	adds	r3, #20
 800323c:	58e3      	ldr	r3, [r4, r3]
 800323e:	428b      	cmp	r3, r1
 8003240:	d005      	beq.n	800324e <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003242:	23ad      	movs	r3, #173	@ 0xad
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	58e3      	ldr	r3, [r4, r3]
 8003248:	0020      	movs	r0, r4
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800324e:	2000      	movs	r0, #0
 8003250:	bd70      	pop	{r4, r5, r6, pc}

08003252 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003252:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003254:	2000      	movs	r0, #0
 8003256:	4770      	bx	lr

08003258 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003258:	23a7      	movs	r3, #167	@ 0xa7
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	5cc1      	ldrb	r1, [r0, r3]
 800325e:	4a03      	ldr	r2, [pc, #12]	@ (800326c <USBD_LL_Suspend+0x14>)
 8003260:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003262:	2204      	movs	r2, #4
 8003264:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8003266:	2000      	movs	r0, #0
 8003268:	4770      	bx	lr
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	0000029d 	.word	0x0000029d

08003270 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003270:	23a7      	movs	r3, #167	@ 0xa7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	5cc2      	ldrb	r2, [r0, r3]
 8003276:	2a04      	cmp	r2, #4
 8003278:	d102      	bne.n	8003280 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800327a:	4a02      	ldr	r2, [pc, #8]	@ (8003284 <USBD_LL_Resume+0x14>)
 800327c:	5c82      	ldrb	r2, [r0, r2]
 800327e:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr
 8003284:	0000029d 	.word	0x0000029d

08003288 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003288:	23a7      	movs	r3, #167	@ 0xa7
{
 800328a:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	5cc3      	ldrb	r3, [r0, r3]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d106      	bne.n	80032a2 <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8003294:	23ad      	movs	r3, #173	@ 0xad
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	58c3      	ldr	r3, [r0, r3]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d000      	beq.n	80032a2 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 80032a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80032a2:	2000      	movs	r0, #0
 80032a4:	bd10      	pop	{r4, pc}

080032a6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80032a6:	b510      	push	{r4, lr}
 80032a8:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80032aa:	2180      	movs	r1, #128	@ 0x80
 80032ac:	f000 fbfa 	bl	8003aa4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80032b0:	2100      	movs	r1, #0
 80032b2:	0020      	movs	r0, r4
 80032b4:	f000 fbf6 	bl	8003aa4 <USBD_LL_StallEP>
}
 80032b8:	bd10      	pop	{r4, pc}
	...

080032bc <USBD_StdDevReq>:
{
 80032bc:	2260      	movs	r2, #96	@ 0x60
 80032be:	780b      	ldrb	r3, [r1, #0]
 80032c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032c2:	4013      	ands	r3, r2
 80032c4:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032c6:	0019      	movs	r1, r3
 80032c8:	1892      	adds	r2, r2, r2
 80032ca:	3920      	subs	r1, #32
{
 80032cc:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032ce:	4211      	tst	r1, r2
 80032d0:	d005      	beq.n	80032de <USBD_StdDevReq+0x22>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <USBD_StdDevReq+0x32>
        USBD_CtlError(pdev, req);
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7ff ffe5 	bl	80032a6 <USBD_CtlError.constprop.0>
        break;
 80032dc:	e005      	b.n	80032ea <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 80032de:	23ad      	movs	r3, #173	@ 0xad
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	58c3      	ldr	r3, [r0, r3]
 80032e4:	0029      	movs	r1, r5
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4798      	blx	r3
}
 80032ea:	2000      	movs	r0, #0
 80032ec:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      switch (req->bRequest)
 80032ee:	7868      	ldrb	r0, [r5, #1]
 80032f0:	2809      	cmp	r0, #9
 80032f2:	d8f0      	bhi.n	80032d6 <USBD_StdDevReq+0x1a>
 80032f4:	f7fc ff24 	bl	8000140 <__gnu_thumb1_case_shi>
 80032f8:	010e00ef 	.word	0x010e00ef
 80032fc:	0106ffef 	.word	0x0106ffef
 8003300:	007dffef 	.word	0x007dffef
 8003304:	ffef000a 	.word	0xffef000a
 8003308:	009f00d6 	.word	0x009f00d6
  uint16_t len = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	466a      	mov	r2, sp
 8003310:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8003312:	886b      	ldrh	r3, [r5, #2]
 8003314:	0a18      	lsrs	r0, r3, #8
 8003316:	3801      	subs	r0, #1
 8003318:	2806      	cmp	r0, #6
 800331a:	d8dc      	bhi.n	80032d6 <USBD_StdDevReq+0x1a>
 800331c:	f7fc fefc 	bl	8000118 <__gnu_thumb1_case_sqi>
 8003320:	db261704 	.word	0xdb261704
 8003324:	40db      	.short	0x40db
 8003326:	4c          	.byte	0x4c
 8003327:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003328:	23ac      	movs	r3, #172	@ 0xac
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	58e3      	ldr	r3, [r4, r3]
 800332e:	7c20      	ldrb	r0, [r4, #16]
 8003330:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003332:	466a      	mov	r2, sp
 8003334:	1d91      	adds	r1, r2, #6
 8003336:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003338:	466b      	mov	r3, sp
 800333a:	88d9      	ldrh	r1, [r3, #6]
 800333c:	88ea      	ldrh	r2, [r5, #6]
 800333e:	2900      	cmp	r1, #0
 8003340:	d052      	beq.n	80033e8 <USBD_StdDevReq+0x12c>
 8003342:	2a00      	cmp	r2, #0
 8003344:	d145      	bne.n	80033d2 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8003346:	0020      	movs	r0, r4
 8003348:	f000 fa0d 	bl	8003766 <USBD_CtlSendStatus>
 800334c:	e7cd      	b.n	80032ea <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 800334e:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003350:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003356:	2a00      	cmp	r2, #0
 8003358:	d106      	bne.n	8003368 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800335c:	466a      	mov	r2, sp
 800335e:	1d90      	adds	r0, r2, #6
 8003360:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003362:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003364:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003366:	e7e7      	b.n	8003338 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336a:	e7f7      	b.n	800335c <USBD_StdDevReq+0xa0>
      switch ((uint8_t)(req->wValue))
 800336c:	b2d8      	uxtb	r0, r3
 800336e:	2805      	cmp	r0, #5
 8003370:	d8b1      	bhi.n	80032d6 <USBD_StdDevReq+0x1a>
 8003372:	23ac      	movs	r3, #172	@ 0xac
 8003374:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003376:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 8003378:	f7fc fed8 	bl	800012c <__gnu_thumb1_case_uqi>
 800337c:	0c0a0803 	.word	0x0c0a0803
 8003380:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0a6      	beq.n	80032d6 <USBD_StdDevReq+0x1a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003388:	7c20      	ldrb	r0, [r4, #16]
 800338a:	e7d2      	b.n	8003332 <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	e7f9      	b.n	8003384 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	e7f7      	b.n	8003384 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	e7f5      	b.n	8003384 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	e7f3      	b.n	8003384 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	e7f1      	b.n	8003384 <USBD_StdDevReq+0xc8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033a0:	7c23      	ldrb	r3, [r4, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d000      	beq.n	80033a8 <USBD_StdDevReq+0xec>
 80033a6:	e796      	b.n	80032d6 <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80033a8:	23ad      	movs	r3, #173	@ 0xad
 80033aa:	466a      	mov	r2, sp
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	58e3      	ldr	r3, [r4, r3]
 80033b0:	1d90      	adds	r0, r2, #6
 80033b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b4:	4798      	blx	r3
  if (err != 0U)
 80033b6:	e7bf      	b.n	8003338 <USBD_StdDevReq+0x7c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033b8:	7c23      	ldrb	r3, [r4, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d000      	beq.n	80033c0 <USBD_StdDevReq+0x104>
 80033be:	e78a      	b.n	80032d6 <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80033c0:	23ad      	movs	r3, #173	@ 0xad
 80033c2:	466a      	mov	r2, sp
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	58e3      	ldr	r3, [r4, r3]
 80033c8:	1d90      	adds	r0, r2, #6
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80033ce:	2307      	movs	r3, #7
 80033d0:	e7c8      	b.n	8003364 <USBD_StdDevReq+0xa8>
      len = MIN(len, req->wLength);
 80033d2:	1c0b      	adds	r3, r1, #0
 80033d4:	4291      	cmp	r1, r2
 80033d6:	d900      	bls.n	80033da <USBD_StdDevReq+0x11e>
 80033d8:	1c13      	adds	r3, r2, #0
 80033da:	4669      	mov	r1, sp
 80033dc:	b29a      	uxth	r2, r3
 80033de:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80033e0:	0001      	movs	r1, r0
 80033e2:	0020      	movs	r0, r4
 80033e4:	f000 f9a1 	bl	800372a <USBD_CtlSendData>
    if (req->wLength == 0U)
 80033e8:	88eb      	ldrh	r3, [r5, #6]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d000      	beq.n	80033f0 <USBD_StdDevReq+0x134>
 80033ee:	e77c      	b.n	80032ea <USBD_StdDevReq+0x2e>
 80033f0:	e7a9      	b.n	8003346 <USBD_StdDevReq+0x8a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80033f2:	88ab      	ldrh	r3, [r5, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d000      	beq.n	80033fa <USBD_StdDevReq+0x13e>
 80033f8:	e76d      	b.n	80032d6 <USBD_StdDevReq+0x1a>
 80033fa:	88eb      	ldrh	r3, [r5, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d000      	beq.n	8003402 <USBD_StdDevReq+0x146>
 8003400:	e769      	b.n	80032d6 <USBD_StdDevReq+0x1a>
 8003402:	886d      	ldrh	r5, [r5, #2]
 8003404:	2d7f      	cmp	r5, #127	@ 0x7f
 8003406:	d900      	bls.n	800340a <USBD_StdDevReq+0x14e>
 8003408:	e765      	b.n	80032d6 <USBD_StdDevReq+0x1a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800340a:	26a7      	movs	r6, #167	@ 0xa7
 800340c:	00b6      	lsls	r6, r6, #2
 800340e:	5da3      	ldrb	r3, [r4, r6]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d100      	bne.n	8003416 <USBD_StdDevReq+0x15a>
 8003414:	e75f      	b.n	80032d6 <USBD_StdDevReq+0x1a>
      pdev->dev_address = dev_addr;
 8003416:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <USBD_StdDevReq+0x278>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003418:	b2ed      	uxtb	r5, r5
      pdev->dev_address = dev_addr;
 800341a:	54e5      	strb	r5, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800341c:	0029      	movs	r1, r5
 800341e:	0020      	movs	r0, r4
 8003420:	f000 fb65 	bl	8003aee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003424:	0020      	movs	r0, r4
 8003426:	f000 f99e 	bl	8003766 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800342a:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 800342c:	2d00      	cmp	r5, #0
 800342e:	d100      	bne.n	8003432 <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003430:	2301      	movs	r3, #1
 8003432:	55a3      	strb	r3, [r4, r6]
 8003434:	e759      	b.n	80032ea <USBD_StdDevReq+0x2e>
  cfgidx = (uint8_t)(req->wValue);
 8003436:	78a9      	ldrb	r1, [r5, #2]
 8003438:	4d3f      	ldr	r5, [pc, #252]	@ (8003538 <USBD_StdDevReq+0x27c>)
 800343a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800343c:	2901      	cmp	r1, #1
 800343e:	d900      	bls.n	8003442 <USBD_StdDevReq+0x186>
 8003440:	e749      	b.n	80032d6 <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 8003442:	23a7      	movs	r3, #167	@ 0xa7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	5ce2      	ldrb	r2, [r4, r3]
 8003448:	2a02      	cmp	r2, #2
 800344a:	d009      	beq.n	8003460 <USBD_StdDevReq+0x1a4>
 800344c:	2a03      	cmp	r2, #3
 800344e:	d015      	beq.n	800347c <USBD_StdDevReq+0x1c0>
        USBD_CtlError(pdev, req);
 8003450:	0020      	movs	r0, r4
 8003452:	f7ff ff28 	bl	80032a6 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003456:	0020      	movs	r0, r4
 8003458:	7829      	ldrb	r1, [r5, #0]
 800345a:	f7ff fdee 	bl	800303a <USBD_ClrClassConfig>
        break;
 800345e:	e744      	b.n	80032ea <USBD_StdDevReq+0x2e>
        if (cfgidx)
 8003460:	2900      	cmp	r1, #0
 8003462:	d100      	bne.n	8003466 <USBD_StdDevReq+0x1aa>
 8003464:	e76f      	b.n	8003346 <USBD_StdDevReq+0x8a>
          pdev->dev_config = cfgidx;
 8003466:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003468:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 800346a:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800346c:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800346e:	0020      	movs	r0, r4
 8003470:	f7ff fdd5 	bl	800301e <USBD_SetClassConfig>
 8003474:	2802      	cmp	r0, #2
 8003476:	d000      	beq.n	800347a <USBD_StdDevReq+0x1be>
 8003478:	e765      	b.n	8003346 <USBD_StdDevReq+0x8a>
 800347a:	e72c      	b.n	80032d6 <USBD_StdDevReq+0x1a>
        if (cfgidx == 0U)
 800347c:	2900      	cmp	r1, #0
 800347e:	d106      	bne.n	800348e <USBD_StdDevReq+0x1d2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003480:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8003482:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003484:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8003486:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003488:	f7ff fdd7 	bl	800303a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800348c:	e75b      	b.n	8003346 <USBD_StdDevReq+0x8a>
        else if (cfgidx != pdev->dev_config)
 800348e:	6861      	ldr	r1, [r4, #4]
 8003490:	2901      	cmp	r1, #1
 8003492:	d100      	bne.n	8003496 <USBD_StdDevReq+0x1da>
 8003494:	e757      	b.n	8003346 <USBD_StdDevReq+0x8a>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003496:	b2c9      	uxtb	r1, r1
 8003498:	0020      	movs	r0, r4
 800349a:	f7ff fdce 	bl	800303a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800349e:	7829      	ldrb	r1, [r5, #0]
 80034a0:	6061      	str	r1, [r4, #4]
 80034a2:	e7e4      	b.n	800346e <USBD_StdDevReq+0x1b2>
  if (req->wLength != 1U)
 80034a4:	88ea      	ldrh	r2, [r5, #6]
 80034a6:	2a01      	cmp	r2, #1
 80034a8:	d000      	beq.n	80034ac <USBD_StdDevReq+0x1f0>
 80034aa:	e714      	b.n	80032d6 <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 80034ac:	23a7      	movs	r3, #167	@ 0xa7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	5ce3      	ldrb	r3, [r4, r3]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d807      	bhi.n	80034c6 <USBD_StdDevReq+0x20a>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d100      	bne.n	80034bc <USBD_StdDevReq+0x200>
 80034ba:	e70c      	b.n	80032d6 <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 80034bc:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80034be:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 80034c0:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80034c2:	3108      	adds	r1, #8
 80034c4:	e003      	b.n	80034ce <USBD_StdDevReq+0x212>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80034c6:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d000      	beq.n	80034ce <USBD_StdDevReq+0x212>
 80034cc:	e703      	b.n	80032d6 <USBD_StdDevReq+0x1a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80034ce:	0020      	movs	r0, r4
 80034d0:	f000 f92b 	bl	800372a <USBD_CtlSendData>
      break;
 80034d4:	e709      	b.n	80032ea <USBD_StdDevReq+0x2e>
  switch (pdev->dev_state)
 80034d6:	23a7      	movs	r3, #167	@ 0xa7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	5ce3      	ldrb	r3, [r4, r3]
 80034dc:	3b01      	subs	r3, #1
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d900      	bls.n	80034e4 <USBD_StdDevReq+0x228>
 80034e2:	e6f8      	b.n	80032d6 <USBD_StdDevReq+0x1a>
      if (req->wLength != 0x2U)
 80034e4:	88eb      	ldrh	r3, [r5, #6]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d000      	beq.n	80034ec <USBD_StdDevReq+0x230>
 80034ea:	e6f4      	b.n	80032d6 <USBD_StdDevReq+0x1a>
      if (pdev->dev_remote_wakeup)
 80034ec:	23a9      	movs	r3, #169	@ 0xa9
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80034f2:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup)
 80034f4:	2a00      	cmp	r2, #0
 80034f6:	d000      	beq.n	80034fa <USBD_StdDevReq+0x23e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80034f8:	3302      	adds	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80034fa:	0021      	movs	r1, r4
 80034fc:	2202      	movs	r2, #2
 80034fe:	60e3      	str	r3, [r4, #12]
 8003500:	310c      	adds	r1, #12
 8003502:	e7e4      	b.n	80034ce <USBD_StdDevReq+0x212>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003504:	886b      	ldrh	r3, [r5, #2]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d000      	beq.n	800350c <USBD_StdDevReq+0x250>
 800350a:	e6ee      	b.n	80032ea <USBD_StdDevReq+0x2e>
    pdev->dev_remote_wakeup = 1U;
 800350c:	22a9      	movs	r2, #169	@ 0xa9
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8003512:	e718      	b.n	8003346 <USBD_StdDevReq+0x8a>
  switch (pdev->dev_state)
 8003514:	23a7      	movs	r3, #167	@ 0xa7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	5ce3      	ldrb	r3, [r4, r3]
 800351a:	3b01      	subs	r3, #1
 800351c:	2b02      	cmp	r3, #2
 800351e:	d900      	bls.n	8003522 <USBD_StdDevReq+0x266>
 8003520:	e6d9      	b.n	80032d6 <USBD_StdDevReq+0x1a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003522:	886b      	ldrh	r3, [r5, #2]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d000      	beq.n	800352a <USBD_StdDevReq+0x26e>
 8003528:	e6df      	b.n	80032ea <USBD_StdDevReq+0x2e>
        pdev->dev_remote_wakeup = 0U;
 800352a:	23a9      	movs	r3, #169	@ 0xa9
 800352c:	2200      	movs	r2, #0
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	50e2      	str	r2, [r4, r3]
 8003532:	e708      	b.n	8003346 <USBD_StdDevReq+0x8a>
 8003534:	0000029e 	.word	0x0000029e
 8003538:	200002f0 	.word	0x200002f0

0800353c <USBD_StdItfReq>:
{
 800353c:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800353e:	780a      	ldrb	r2, [r1, #0]
{
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	4013      	ands	r3, r2
 8003544:	0004      	movs	r4, r0
 8003546:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003548:	0652      	lsls	r2, r2, #25
 800354a:	d501      	bpl.n	8003550 <USBD_StdItfReq+0x14>
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d119      	bne.n	8003584 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8003550:	23a7      	movs	r3, #167	@ 0xa7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	5ce3      	ldrb	r3, [r4, r3]
 8003556:	3b01      	subs	r3, #1
 8003558:	2b02      	cmp	r3, #2
 800355a:	d813      	bhi.n	8003584 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800355c:	792b      	ldrb	r3, [r5, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d810      	bhi.n	8003584 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003562:	23ad      	movs	r3, #173	@ 0xad
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	58e3      	ldr	r3, [r4, r3]
 8003568:	0029      	movs	r1, r5
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	0020      	movs	r0, r4
 800356e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003570:	88eb      	ldrh	r3, [r5, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <USBD_StdItfReq+0x44>
 8003576:	2800      	cmp	r0, #0
 8003578:	d102      	bne.n	8003580 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 800357a:	0020      	movs	r0, r4
 800357c:	f000 f8f3 	bl	8003766 <USBD_CtlSendStatus>
}
 8003580:	2000      	movs	r0, #0
 8003582:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8003584:	0020      	movs	r0, r4
 8003586:	f7ff fe8e 	bl	80032a6 <USBD_CtlError.constprop.0>
          break;
 800358a:	e7f9      	b.n	8003580 <USBD_StdItfReq+0x44>

0800358c <USBD_StdEPReq>:
{
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	0004      	movs	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8003590:	2060      	movs	r0, #96	@ 0x60
{
 8003592:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8003594:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003596:	7809      	ldrb	r1, [r1, #0]
 8003598:	4001      	ands	r1, r0
 800359a:	000d      	movs	r5, r1
 800359c:	1800      	adds	r0, r0, r0
 800359e:	3d20      	subs	r5, #32
 80035a0:	4205      	tst	r5, r0
 80035a2:	d005      	beq.n	80035b0 <USBD_StdEPReq+0x24>
 80035a4:	2900      	cmp	r1, #0
 80035a6:	d00c      	beq.n	80035c2 <USBD_StdEPReq+0x36>
              USBD_CtlError(pdev, req);
 80035a8:	0020      	movs	r0, r4
 80035aa:	f7ff fe7c 	bl	80032a6 <USBD_CtlError.constprop.0>
              break;
 80035ae:	e006      	b.n	80035be <USBD_StdEPReq+0x32>
      pdev->pClass->Setup(pdev, req);
 80035b0:	22ad      	movs	r2, #173	@ 0xad
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	58a2      	ldr	r2, [r4, r2]
 80035b6:	0019      	movs	r1, r3
 80035b8:	0020      	movs	r0, r4
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	4790      	blx	r2
}
 80035be:	2000      	movs	r0, #0
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 80035c2:	7858      	ldrb	r0, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80035c4:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80035c6:	2801      	cmp	r0, #1
 80035c8:	d038      	beq.n	800363c <USBD_StdEPReq+0xb0>
 80035ca:	2803      	cmp	r0, #3
 80035cc:	d020      	beq.n	8003610 <USBD_StdEPReq+0x84>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d1ea      	bne.n	80035a8 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 80035d2:	23a7      	movs	r3, #167	@ 0xa7
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	5ce3      	ldrb	r3, [r4, r3]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d049      	beq.n	8003670 <USBD_StdEPReq+0xe4>
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d1e3      	bne.n	80035a8 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035e0:	230f      	movs	r3, #15
 80035e2:	2514      	movs	r5, #20
 80035e4:	400b      	ands	r3, r1
 80035e6:	436b      	muls	r3, r5
 80035e8:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 80035ea:	0612      	lsls	r2, r2, #24
 80035ec:	d550      	bpl.n	8003690 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0d9      	beq.n	80035a8 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80035f4:	237f      	movs	r3, #127	@ 0x7f
 80035f6:	400b      	ands	r3, r1
 80035f8:	3301      	adds	r3, #1
 80035fa:	435d      	muls	r5, r3
 80035fc:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80035fe:	2980      	cmp	r1, #128	@ 0x80
 8003600:	d051      	beq.n	80036a6 <USBD_StdEPReq+0x11a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003602:	0020      	movs	r0, r4
 8003604:	f000 fa60 	bl	8003ac8 <USBD_LL_IsStallEP>
 8003608:	2800      	cmp	r0, #0
 800360a:	d051      	beq.n	80036b0 <USBD_StdEPReq+0x124>
                pep->status = 0x0001U;
 800360c:	2301      	movs	r3, #1
 800360e:	e04b      	b.n	80036a8 <USBD_StdEPReq+0x11c>
          switch (pdev->dev_state)
 8003610:	22a7      	movs	r2, #167	@ 0xa7
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	5ca2      	ldrb	r2, [r4, r2]
 8003616:	2a02      	cmp	r2, #2
 8003618:	d020      	beq.n	800365c <USBD_StdEPReq+0xd0>
 800361a:	2a03      	cmp	r2, #3
 800361c:	d1c4      	bne.n	80035a8 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800361e:	885a      	ldrh	r2, [r3, #2]
 8003620:	2a00      	cmp	r2, #0
 8003622:	d107      	bne.n	8003634 <USBD_StdEPReq+0xa8>
                if ((ep_addr != 0x00U) &&
 8003624:	064a      	lsls	r2, r1, #25
 8003626:	d005      	beq.n	8003634 <USBD_StdEPReq+0xa8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003628:	88db      	ldrh	r3, [r3, #6]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <USBD_StdEPReq+0xa8>
                  USBD_LL_StallEP(pdev, ep_addr);
 800362e:	0020      	movs	r0, r4
 8003630:	f000 fa38 	bl	8003aa4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003634:	0020      	movs	r0, r4
 8003636:	f000 f896 	bl	8003766 <USBD_CtlSendStatus>
              break;
 800363a:	e7c0      	b.n	80035be <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800363c:	22a7      	movs	r2, #167	@ 0xa7
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	5ca2      	ldrb	r2, [r4, r2]
 8003642:	2a02      	cmp	r2, #2
 8003644:	d00a      	beq.n	800365c <USBD_StdEPReq+0xd0>
 8003646:	2a03      	cmp	r2, #3
 8003648:	d1ae      	bne.n	80035a8 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800364a:	885b      	ldrh	r3, [r3, #2]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1b6      	bne.n	80035be <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003650:	064b      	lsls	r3, r1, #25
 8003652:	d0ef      	beq.n	8003634 <USBD_StdEPReq+0xa8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003654:	0020      	movs	r0, r4
 8003656:	f000 fa2e 	bl	8003ab6 <USBD_LL_ClearStallEP>
 800365a:	e7eb      	b.n	8003634 <USBD_StdEPReq+0xa8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800365c:	064b      	lsls	r3, r1, #25
 800365e:	d0a3      	beq.n	80035a8 <USBD_StdEPReq+0x1c>
                USBD_LL_StallEP(pdev, ep_addr);
 8003660:	0020      	movs	r0, r4
 8003662:	f000 fa1f 	bl	8003aa4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003666:	2180      	movs	r1, #128	@ 0x80
 8003668:	0020      	movs	r0, r4
 800366a:	f000 fa1b 	bl	8003aa4 <USBD_LL_StallEP>
 800366e:	e7a6      	b.n	80035be <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003670:	0649      	lsls	r1, r1, #25
 8003672:	d199      	bne.n	80035a8 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003674:	0021      	movs	r1, r4
 8003676:	3155      	adds	r1, #85	@ 0x55
 8003678:	31ff      	adds	r1, #255	@ 0xff
 800367a:	0612      	lsls	r2, r2, #24
 800367c:	d501      	bpl.n	8003682 <USBD_StdEPReq+0xf6>
 800367e:	3941      	subs	r1, #65	@ 0x41
 8003680:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 8003682:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003684:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8003686:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003688:	0020      	movs	r0, r4
 800368a:	f000 f84e 	bl	800372a <USBD_CtlSendData>
              break;
 800368e:	e796      	b.n	80035be <USBD_StdEPReq+0x32>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003690:	33fc      	adds	r3, #252	@ 0xfc
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d100      	bne.n	800369a <USBD_StdEPReq+0x10e>
 8003698:	e786      	b.n	80035a8 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800369a:	434d      	muls	r5, r1
 800369c:	3555      	adds	r5, #85	@ 0x55
 800369e:	35ff      	adds	r5, #255	@ 0xff
 80036a0:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80036a2:	2900      	cmp	r1, #0
 80036a4:	d1ad      	bne.n	8003602 <USBD_StdEPReq+0x76>
                pep->status = 0x0000U;
 80036a6:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 80036a8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80036aa:	2202      	movs	r2, #2
 80036ac:	0029      	movs	r1, r5
 80036ae:	e7eb      	b.n	8003688 <USBD_StdEPReq+0xfc>
                pep->status = 0x0000U;
 80036b0:	6028      	str	r0, [r5, #0]
 80036b2:	e7fa      	b.n	80036aa <USBD_StdEPReq+0x11e>

080036b4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80036b4:	780b      	ldrb	r3, [r1, #0]
 80036b6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80036b8:	784b      	ldrb	r3, [r1, #1]
 80036ba:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80036bc:	78cb      	ldrb	r3, [r1, #3]
 80036be:	788a      	ldrb	r2, [r1, #2]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	4313      	orrs	r3, r2
 80036c4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80036c6:	794b      	ldrb	r3, [r1, #5]
 80036c8:	790a      	ldrb	r2, [r1, #4]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	4313      	orrs	r3, r2
 80036ce:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80036d0:	79cb      	ldrb	r3, [r1, #7]
 80036d2:	798a      	ldrb	r2, [r1, #6]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	4313      	orrs	r3, r2
 80036d8:	80c3      	strh	r3, [r0, #6]
}
 80036da:	4770      	bx	lr

080036dc <USBD_CtlError>:
{
 80036dc:	b510      	push	{r4, lr}
 80036de:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	f000 f9df 	bl	8003aa4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80036e6:	2100      	movs	r1, #0
 80036e8:	0020      	movs	r0, r4
 80036ea:	f000 f9db 	bl	8003aa4 <USBD_LL_StallEP>
}
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	0004      	movs	r4, r0
 80036f4:	000d      	movs	r5, r1
 80036f6:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d00d      	beq.n	8003718 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80036fc:	f7fc fd04 	bl	8000108 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003700:	b2c3      	uxtb	r3, r0
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003708:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800370a:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 800370c:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800370e:	706b      	strb	r3, [r5, #1]
 8003710:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8003712:	7821      	ldrb	r1, [r4, #0]
 8003714:	2900      	cmp	r1, #0
 8003716:	d100      	bne.n	800371a <USBD_GetString+0x2a>
}
 8003718:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	54e9      	strb	r1, [r5, r3]
 800371e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003720:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8003722:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 8003724:	b2db      	uxtb	r3, r3
 8003726:	54a8      	strb	r0, [r5, r2]
 8003728:	e7f3      	b.n	8003712 <USBD_GetString+0x22>

0800372a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800372a:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800372c:	22a5      	movs	r2, #165	@ 0xa5
{
 800372e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003730:	2402      	movs	r4, #2
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003736:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8003738:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800373a:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 800373c:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800373e:	f000 f9df 	bl	8003b00 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003742:	2000      	movs	r0, #0
 8003744:	bd10      	pop	{r4, pc}

08003746 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003746:	b510      	push	{r4, lr}
 8003748:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800374a:	000a      	movs	r2, r1
 800374c:	2100      	movs	r1, #0
 800374e:	f000 f9d7 	bl	8003b00 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003752:	2000      	movs	r0, #0
 8003754:	bd10      	pop	{r4, pc}

08003756 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003756:	b510      	push	{r4, lr}
 8003758:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800375a:	000a      	movs	r2, r1
 800375c:	2100      	movs	r1, #0
 800375e:	f000 f9d8 	bl	8003b12 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003762:	2000      	movs	r0, #0
 8003764:	bd10      	pop	{r4, pc}

08003766 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003766:	23a5      	movs	r3, #165	@ 0xa5
 8003768:	2204      	movs	r2, #4
 800376a:	009b      	lsls	r3, r3, #2
{
 800376c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800376e:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003770:	2300      	movs	r3, #0
 8003772:	001a      	movs	r2, r3
 8003774:	0019      	movs	r1, r3
 8003776:	f000 f9c3 	bl	8003b00 <USBD_LL_Transmit>

  return USBD_OK;
}
 800377a:	2000      	movs	r0, #0
 800377c:	bd10      	pop	{r4, pc}

0800377e <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800377e:	23a5      	movs	r3, #165	@ 0xa5
 8003780:	2205      	movs	r2, #5
 8003782:	009b      	lsls	r3, r3, #2
{
 8003784:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003786:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003788:	2300      	movs	r3, #0
 800378a:	001a      	movs	r2, r3
 800378c:	0019      	movs	r1, r3
 800378e:	f000 f9c0 	bl	8003b12 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003792:	2000      	movs	r0, #0
 8003794:	bd10      	pop	{r4, pc}
	...

08003798 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003798:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800379a:	4c0d      	ldr	r4, [pc, #52]	@ (80037d0 <MX_USB_DEVICE_Init+0x38>)
 800379c:	2200      	movs	r2, #0
 800379e:	0020      	movs	r0, r4
 80037a0:	490c      	ldr	r1, [pc, #48]	@ (80037d4 <MX_USB_DEVICE_Init+0x3c>)
 80037a2:	f7ff fc14 	bl	8002fce <USBD_Init>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d001      	beq.n	80037ae <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 80037aa:	f7fc fedb 	bl	8000564 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80037ae:	0020      	movs	r0, r4
 80037b0:	4909      	ldr	r1, [pc, #36]	@ (80037d8 <MX_USB_DEVICE_Init+0x40>)
 80037b2:	f7ff fc26 	bl	8003002 <USBD_RegisterClass>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d001      	beq.n	80037be <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 80037ba:	f7fc fed3 	bl	8000564 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80037be:	0020      	movs	r0, r4
 80037c0:	f7ff fc28 	bl	8003014 <USBD_Start>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d001      	beq.n	80037cc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 80037c8:	f7fc fecc 	bl	8000564 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	200002f4 	.word	0x200002f4
 80037d4:	20000160 	.word	0x20000160
 80037d8:	20000090 	.word	0x20000090

080037dc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80037dc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 80037de:	4801      	ldr	r0, [pc, #4]	@ (80037e4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80037e0:	800b      	strh	r3, [r1, #0]
}
 80037e2:	4770      	bx	lr
 80037e4:	20000148 	.word	0x20000148

080037e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80037e8:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80037ea:	2600      	movs	r6, #0
 80037ec:	0052      	lsls	r2, r2, #1
 80037ee:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 80037f0:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 80037f2:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80037f4:	0023      	movs	r3, r4
 80037f6:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 80037f8:	2d09      	cmp	r5, #9
 80037fa:	d800      	bhi.n	80037fe <IntToUnicode+0x16>
      pbuf[2 * idx] = (value >> 28) + '0';
 80037fc:	3b07      	subs	r3, #7
 80037fe:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8003800:	704e      	strb	r6, [r1, #1]
  for (idx = 0; idx < len; idx++)
 8003802:	3102      	adds	r1, #2
    value = value << 4;
 8003804:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8003806:	428a      	cmp	r2, r1
 8003808:	d1f2      	bne.n	80037f0 <IntToUnicode+0x8>
  }
}
 800380a:	bd70      	pop	{r4, r5, r6, pc}

0800380c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800380c:	231a      	movs	r3, #26
{
 800380e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003810:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <USBD_FS_SerialStrDescriptor+0x30>)
 8003814:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 800381c:	2800      	cmp	r0, #0
 800381e:	d00a      	beq.n	8003836 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <USBD_FS_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003822:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003824:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003826:	4908      	ldr	r1, [pc, #32]	@ (8003848 <USBD_FS_SerialStrDescriptor+0x3c>)
 8003828:	f7ff ffde 	bl	80037e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800382c:	2204      	movs	r2, #4
 800382e:	0020      	movs	r0, r4
 8003830:	4906      	ldr	r1, [pc, #24]	@ (800384c <USBD_FS_SerialStrDescriptor+0x40>)
 8003832:	f7ff ffd9 	bl	80037e8 <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 8003836:	4806      	ldr	r0, [pc, #24]	@ (8003850 <USBD_FS_SerialStrDescriptor+0x44>)
}
 8003838:	bd10      	pop	{r4, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	1ffff7ac 	.word	0x1ffff7ac
 8003840:	1ffff7b4 	.word	0x1ffff7b4
 8003844:	1ffff7b0 	.word	0x1ffff7b0
 8003848:	2000012e 	.word	0x2000012e
 800384c:	2000013e 	.word	0x2000013e
 8003850:	2000012c 	.word	0x2000012c

08003854 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003854:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003856:	4c04      	ldr	r4, [pc, #16]	@ (8003868 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003858:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800385a:	0021      	movs	r1, r4
 800385c:	4803      	ldr	r0, [pc, #12]	@ (800386c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800385e:	f7ff ff47 	bl	80036f0 <USBD_GetString>
}
 8003862:	0020      	movs	r0, r4
 8003864:	bd10      	pop	{r4, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	200005b8 	.word	0x200005b8
 800386c:	08004b3f 	.word	0x08004b3f

08003870 <USBD_FS_DeviceDescriptor>:
  *length = sizeof(USBD_FS_DeviceDesc);
 8003870:	2312      	movs	r3, #18
 8003872:	800b      	strh	r3, [r1, #0]
  switch (g_current_mode)
 8003874:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <USBD_FS_DeviceDescriptor+0x28>)
 8003876:	4809      	ldr	r0, [pc, #36]	@ (800389c <USBD_FS_DeviceDescriptor+0x2c>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <USBD_FS_DeviceDescriptor+0x1e>
 800387e:	2b02      	cmp	r3, #2
 8003880:	d002      	beq.n	8003888 <USBD_FS_DeviceDescriptor+0x18>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <USBD_FS_DeviceDescriptor+0x22>
}
 8003886:	4770      	bx	lr
      USBD_FS_DeviceDesc[8] = LOBYTE(USBD_VID_DS5);      // idVendor Low Byte
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <USBD_FS_DeviceDescriptor+0x30>)
      USBD_FS_DeviceDesc[8] = LOBYTE(USBD_VID_DEFAULT);
 800388a:	6083      	str	r3, [r0, #8]
      break;
 800388c:	e7fb      	b.n	8003886 <USBD_FS_DeviceDescriptor+0x16>
      USBD_FS_DeviceDesc[8] = LOBYTE(USBD_VID_DEFAULT);
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <USBD_FS_DeviceDescriptor+0x34>)
 8003890:	e7fb      	b.n	800388a <USBD_FS_DeviceDescriptor+0x1a>
      USBD_FS_DeviceDesc[8] = LOBYTE(USBD_VID_DEFAULT);
 8003892:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <USBD_FS_DeviceDescriptor+0x38>)
 8003894:	e7f9      	b.n	800388a <USBD_FS_DeviceDescriptor+0x1a>
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	200002c0 	.word	0x200002c0
 800389c:	2000014c 	.word	0x2000014c
 80038a0:	0ce6054c 	.word	0x0ce6054c
 80038a4:	57500483 	.word	0x57500483
 80038a8:	57510483 	.word	0x57510483

080038ac <USBD_FS_ProductStrDescriptor>:
{
 80038ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038ae:	4c04      	ldr	r4, [pc, #16]	@ (80038c0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80038b0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80038b2:	0021      	movs	r1, r4
 80038b4:	4803      	ldr	r0, [pc, #12]	@ (80038c4 <USBD_FS_ProductStrDescriptor+0x18>)
 80038b6:	f7ff ff1b 	bl	80036f0 <USBD_GetString>
}
 80038ba:	0020      	movs	r0, r4
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	200005b8 	.word	0x200005b8
 80038c4:	08004b52 	.word	0x08004b52

080038c8 <USBD_FS_ConfigStrDescriptor>:
{
 80038c8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80038ca:	4c04      	ldr	r4, [pc, #16]	@ (80038dc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80038cc:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80038ce:	0021      	movs	r1, r4
 80038d0:	4803      	ldr	r0, [pc, #12]	@ (80038e0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80038d2:	f7ff ff0d 	bl	80036f0 <USBD_GetString>
}
 80038d6:	0020      	movs	r0, r4
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	200005b8 	.word	0x200005b8
 80038e0:	08004b66 	.word	0x08004b66

080038e4 <USBD_FS_InterfaceStrDescriptor>:
{
 80038e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80038e6:	4c04      	ldr	r4, [pc, #16]	@ (80038f8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80038e8:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80038ea:	0021      	movs	r1, r4
 80038ec:	4803      	ldr	r0, [pc, #12]	@ (80038fc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80038ee:	f7ff feff 	bl	80036f0 <USBD_GetString>
}
 80038f2:	0020      	movs	r0, r4
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	200005b8 	.word	0x200005b8
 80038fc:	08004b71 	.word	0x08004b71

08003900 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003900:	2800      	cmp	r0, #0
 8003902:	d003      	beq.n	800390c <USBD_Get_USB_Status+0xc>
 8003904:	3802      	subs	r0, #2
 8003906:	1e43      	subs	r3, r0, #1
 8003908:	4198      	sbcs	r0, r3
 800390a:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800390c:	4770      	bx	lr
	...

08003910 <HAL_PCD_MspInit>:
{
 8003910:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_PCD_MspInit+0x30>)
 8003914:	6802      	ldr	r2, [r0, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d111      	bne.n	800393e <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 800391a:	2180      	movs	r1, #128	@ 0x80
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_PCD_MspInit+0x34>)
 800391e:	0409      	lsls	r1, r1, #16
 8003920:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003922:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8003924:	430a      	orrs	r2, r1
 8003926:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003928:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	400b      	ands	r3, r1
 800392e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003930:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003932:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003934:	f7fc ff48 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003938:	201f      	movs	r0, #31
 800393a:	f7fc ff6f 	bl	800081c <HAL_NVIC_EnableIRQ>
}
 800393e:	bd07      	pop	{r0, r1, r2, pc}
 8003940:	40005c00 	.word	0x40005c00
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003948:	23a6      	movs	r3, #166	@ 0xa6
{
 800394a:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	18c1      	adds	r1, r0, r3
 8003950:	3340      	adds	r3, #64	@ 0x40
 8003952:	58c0      	ldr	r0, [r0, r3]
 8003954:	f7ff fb7a 	bl	800304c <USBD_LL_SetupStage>
}
 8003958:	bd10      	pop	{r4, pc}

0800395a <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800395a:	2328      	movs	r3, #40	@ 0x28
 800395c:	434b      	muls	r3, r1
 800395e:	18c3      	adds	r3, r0, r3
 8003960:	33fc      	adds	r3, #252	@ 0xfc
 8003962:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003964:	23b6      	movs	r3, #182	@ 0xb6
{
 8003966:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	58c0      	ldr	r0, [r0, r3]
 800396c:	f7ff fba0 	bl	80030b0 <USBD_LL_DataOutStage>
}
 8003970:	bd10      	pop	{r4, pc}

08003972 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003972:	2328      	movs	r3, #40	@ 0x28
 8003974:	434b      	muls	r3, r1
 8003976:	18c3      	adds	r3, r0, r3
 8003978:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800397a:	23b6      	movs	r3, #182	@ 0xb6
{
 800397c:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	58c0      	ldr	r0, [r0, r3]
 8003982:	f7ff fbd8 	bl	8003136 <USBD_LL_DataInStage>
}
 8003986:	bd10      	pop	{r4, pc}

08003988 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003988:	23b6      	movs	r3, #182	@ 0xb6
{
 800398a:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	58c0      	ldr	r0, [r0, r3]
 8003990:	f7ff fc7a 	bl	8003288 <USBD_LL_SOF>
}
 8003994:	bd10      	pop	{r4, pc}

08003996 <HAL_PCD_ResetCallback>:
{
 8003996:	b570      	push	{r4, r5, r6, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003998:	7943      	ldrb	r3, [r0, #5]
{
 800399a:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800399c:	2b02      	cmp	r3, #2
 800399e:	d001      	beq.n	80039a4 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80039a0:	f7fc fde0 	bl	8000564 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80039a4:	25b6      	movs	r5, #182	@ 0xb6
 80039a6:	00ad      	lsls	r5, r5, #2
 80039a8:	2101      	movs	r1, #1
 80039aa:	5960      	ldr	r0, [r4, r5]
 80039ac:	f7ff fc51 	bl	8003252 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80039b0:	5960      	ldr	r0, [r4, r5]
 80039b2:	f7ff fc24 	bl	80031fe <USBD_LL_Reset>
}
 80039b6:	bd70      	pop	{r4, r5, r6, pc}

080039b8 <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80039b8:	23b6      	movs	r3, #182	@ 0xb6
{
 80039ba:	b510      	push	{r4, lr}
 80039bc:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	58c0      	ldr	r0, [r0, r3]
 80039c2:	f7ff fc49 	bl	8003258 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80039c6:	7a63      	ldrb	r3, [r4, #9]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80039cc:	2306      	movs	r3, #6
 80039ce:	4a02      	ldr	r2, [pc, #8]	@ (80039d8 <HAL_PCD_SuspendCallback+0x20>)
 80039d0:	6911      	ldr	r1, [r2, #16]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	6113      	str	r3, [r2, #16]
}
 80039d6:	bd10      	pop	{r4, pc}
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <HAL_PCD_ResumeCallback>:
{
 80039dc:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 80039de:	7a43      	ldrb	r3, [r0, #9]
{
 80039e0:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80039e6:	2106      	movs	r1, #6
 80039e8:	4a05      	ldr	r2, [pc, #20]	@ (8003a00 <HAL_PCD_ResumeCallback+0x24>)
 80039ea:	6913      	ldr	r3, [r2, #16]
 80039ec:	438b      	bics	r3, r1
 80039ee:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80039f0:	f7fc fca4 	bl	800033c <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80039f4:	23b6      	movs	r3, #182	@ 0xb6
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	58e0      	ldr	r0, [r4, r3]
 80039fa:	f7ff fc39 	bl	8003270 <USBD_LL_Resume>
}
 80039fe:	bd10      	pop	{r4, pc}
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8003a04:	23b6      	movs	r3, #182	@ 0xb6
{
 8003a06:	b570      	push	{r4, r5, r6, lr}
 8003a08:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003a0a:	4815      	ldr	r0, [pc, #84]	@ (8003a60 <USBD_LL_Init+0x5c>)
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8003a10:	4b14      	ldr	r3, [pc, #80]	@ (8003a64 <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_FS;
 8003a12:	25b0      	movs	r5, #176	@ 0xb0
  hpcd_USB_FS.Instance = USB;
 8003a14:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003a16:	2382      	movs	r3, #130	@ 0x82
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003a20:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8003a22:	00ad      	lsls	r5, r5, #2
 8003a24:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003a26:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003a28:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003a2a:	f7fd f8ef 	bl	8000c0c <HAL_PCD_Init>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d001      	beq.n	8003a36 <USBD_LL_Init+0x32>
    Error_Handler( );
 8003a32:	f7fc fd97 	bl	8000564 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003a36:	2200      	movs	r2, #0
 8003a38:	5960      	ldr	r0, [r4, r5]
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	2318      	movs	r3, #24
 8003a3e:	f7fd ff1c 	bl	800187a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003a42:	5960      	ldr	r0, [r4, r5]
 8003a44:	2358      	movs	r3, #88	@ 0x58
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	@ 0x80
 8003a4a:	f7fd ff16 	bl	800187a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8003a4e:	2380      	movs	r3, #128	@ 0x80
 8003a50:	5960      	ldr	r0, [r4, r5]
 8003a52:	2200      	movs	r2, #0
 8003a54:	2181      	movs	r1, #129	@ 0x81
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	f7fd ff0f 	bl	800187a <HAL_PCDEx_PMAConfig>
}
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	200007cc 	.word	0x200007cc
 8003a64:	40005c00 	.word	0x40005c00

08003a68 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8003a68:	23b0      	movs	r3, #176	@ 0xb0
{
 8003a6a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	58c0      	ldr	r0, [r0, r3]
 8003a70:	f7fd f918 	bl	8000ca4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a74:	f7ff ff44 	bl	8003900 <USBD_Get_USB_Status>
}
 8003a78:	bd10      	pop	{r4, pc}

08003a7a <USBD_LL_OpenEP>:
{
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	0014      	movs	r4, r2
 8003a7e:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003a80:	0023      	movs	r3, r4
 8003a82:	24b0      	movs	r4, #176	@ 0xb0
 8003a84:	00a4      	lsls	r4, r4, #2
 8003a86:	5900      	ldr	r0, [r0, r4]
 8003a88:	f7fd fe16 	bl	80016b8 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a8c:	f7ff ff38 	bl	8003900 <USBD_Get_USB_Status>
}
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003a92:	23b0      	movs	r3, #176	@ 0xb0
{
 8003a94:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	58c0      	ldr	r0, [r0, r3]
 8003a9a:	f7fd fe39 	bl	8001710 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a9e:	f7ff ff2f 	bl	8003900 <USBD_Get_USB_Status>
}
 8003aa2:	bd10      	pop	{r4, pc}

08003aa4 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003aa4:	23b0      	movs	r3, #176	@ 0xb0
{
 8003aa6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	58c0      	ldr	r0, [r0, r3]
 8003aac:	f7fd fe89 	bl	80017c2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003ab0:	f7ff ff26 	bl	8003900 <USBD_Get_USB_Status>
}
 8003ab4:	bd10      	pop	{r4, pc}

08003ab6 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003ab6:	23b0      	movs	r3, #176	@ 0xb0
{
 8003ab8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	58c0      	ldr	r0, [r0, r3]
 8003abe:	f7fd feae 	bl	800181e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003ac2:	f7ff ff1d 	bl	8003900 <USBD_Get_USB_Status>
}
 8003ac6:	bd10      	pop	{r4, pc}

08003ac8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003ac8:	23b0      	movs	r3, #176	@ 0xb0
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8003ace:	b248      	sxtb	r0, r1
 8003ad0:	2228      	movs	r2, #40	@ 0x28
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	da05      	bge.n	8003ae2 <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003ad6:	207f      	movs	r0, #127	@ 0x7f
 8003ad8:	4001      	ands	r1, r0
 8003ada:	434a      	muls	r2, r1
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	7c98      	ldrb	r0, [r3, #18]
}
 8003ae0:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003ae2:	434a      	muls	r2, r1
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	3353      	adds	r3, #83	@ 0x53
 8003ae8:	33ff      	adds	r3, #255	@ 0xff
 8003aea:	7818      	ldrb	r0, [r3, #0]
 8003aec:	e7f8      	b.n	8003ae0 <USBD_LL_IsStallEP+0x18>

08003aee <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003aee:	23b0      	movs	r3, #176	@ 0xb0
{
 8003af0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	58c0      	ldr	r0, [r0, r3]
 8003af6:	f7fd f8e8 	bl	8000cca <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003afa:	f7ff ff01 	bl	8003900 <USBD_Get_USB_Status>
}
 8003afe:	bd10      	pop	{r4, pc}

08003b00 <USBD_LL_Transmit>:
{
 8003b00:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003b02:	24b0      	movs	r4, #176	@ 0xb0
 8003b04:	00a4      	lsls	r4, r4, #2
 8003b06:	5900      	ldr	r0, [r0, r4]
 8003b08:	f7fd fe43 	bl	8001792 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b0c:	f7ff fef8 	bl	8003900 <USBD_Get_USB_Status>
}
 8003b10:	bd10      	pop	{r4, pc}

08003b12 <USBD_LL_PrepareReceive>:
{
 8003b12:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003b14:	24b0      	movs	r4, #176	@ 0xb0
 8003b16:	00a4      	lsls	r4, r4, #2
 8003b18:	5900      	ldr	r0, [r0, r4]
 8003b1a:	f7fd fe1f 	bl	800175c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b1e:	f7ff feef 	bl	8003900 <USBD_Get_USB_Status>
}
 8003b22:	bd10      	pop	{r4, pc}

08003b24 <USBD_static_malloc>:
  return mem;
 8003b24:	4800      	ldr	r0, [pc, #0]	@ (8003b28 <USBD_static_malloc+0x4>)
}
 8003b26:	4770      	bx	lr
 8003b28:	200007b8 	.word	0x200007b8

08003b2c <USBD_static_free>:
}
 8003b2c:	4770      	bx	lr
	...

08003b30 <std>:
 8003b30:	2300      	movs	r3, #0
 8003b32:	b510      	push	{r4, lr}
 8003b34:	0004      	movs	r4, r0
 8003b36:	6003      	str	r3, [r0, #0]
 8003b38:	6043      	str	r3, [r0, #4]
 8003b3a:	6083      	str	r3, [r0, #8]
 8003b3c:	8181      	strh	r1, [r0, #12]
 8003b3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b40:	81c2      	strh	r2, [r0, #14]
 8003b42:	6103      	str	r3, [r0, #16]
 8003b44:	6143      	str	r3, [r0, #20]
 8003b46:	6183      	str	r3, [r0, #24]
 8003b48:	0019      	movs	r1, r3
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	305c      	adds	r0, #92	@ 0x5c
 8003b4e:	f000 fa0f 	bl	8003f70 <memset>
 8003b52:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <std+0x50>)
 8003b54:	6224      	str	r4, [r4, #32]
 8003b56:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b58:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <std+0x54>)
 8003b5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b88 <std+0x58>)
 8003b5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b60:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <std+0x5c>)
 8003b62:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <std+0x60>)
 8003b66:	429c      	cmp	r4, r3
 8003b68:	d005      	beq.n	8003b76 <std+0x46>
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <std+0x64>)
 8003b6c:	429c      	cmp	r4, r3
 8003b6e:	d002      	beq.n	8003b76 <std+0x46>
 8003b70:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <std+0x68>)
 8003b72:	429c      	cmp	r4, r3
 8003b74:	d103      	bne.n	8003b7e <std+0x4e>
 8003b76:	0020      	movs	r0, r4
 8003b78:	3058      	adds	r0, #88	@ 0x58
 8003b7a:	f000 fa79 	bl	8004070 <__retarget_lock_init_recursive>
 8003b7e:	bd10      	pop	{r4, pc}
 8003b80:	08003d99 	.word	0x08003d99
 8003b84:	08003dc1 	.word	0x08003dc1
 8003b88:	08003df9 	.word	0x08003df9
 8003b8c:	08003e25 	.word	0x08003e25
 8003b90:	20000aa8 	.word	0x20000aa8
 8003b94:	20000b10 	.word	0x20000b10
 8003b98:	20000b78 	.word	0x20000b78

08003b9c <stdio_exit_handler>:
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	4a03      	ldr	r2, [pc, #12]	@ (8003bac <stdio_exit_handler+0x10>)
 8003ba0:	4903      	ldr	r1, [pc, #12]	@ (8003bb0 <stdio_exit_handler+0x14>)
 8003ba2:	4804      	ldr	r0, [pc, #16]	@ (8003bb4 <stdio_exit_handler+0x18>)
 8003ba4:	f000 f86c 	bl	8003c80 <_fwalk_sglue>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	2000017c 	.word	0x2000017c
 8003bb0:	080048fd 	.word	0x080048fd
 8003bb4:	2000018c 	.word	0x2000018c

08003bb8 <cleanup_stdio>:
 8003bb8:	6841      	ldr	r1, [r0, #4]
 8003bba:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <cleanup_stdio+0x30>)
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	0004      	movs	r4, r0
 8003bc0:	4299      	cmp	r1, r3
 8003bc2:	d001      	beq.n	8003bc8 <cleanup_stdio+0x10>
 8003bc4:	f000 fe9a 	bl	80048fc <_fflush_r>
 8003bc8:	68a1      	ldr	r1, [r4, #8]
 8003bca:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <cleanup_stdio+0x34>)
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <cleanup_stdio+0x1e>
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	f000 fe93 	bl	80048fc <_fflush_r>
 8003bd6:	68e1      	ldr	r1, [r4, #12]
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <cleanup_stdio+0x38>)
 8003bda:	4299      	cmp	r1, r3
 8003bdc:	d002      	beq.n	8003be4 <cleanup_stdio+0x2c>
 8003bde:	0020      	movs	r0, r4
 8003be0:	f000 fe8c 	bl	80048fc <_fflush_r>
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	20000aa8 	.word	0x20000aa8
 8003bec:	20000b10 	.word	0x20000b10
 8003bf0:	20000b78 	.word	0x20000b78

08003bf4 <global_stdio_init.part.0>:
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	4b09      	ldr	r3, [pc, #36]	@ (8003c1c <global_stdio_init.part.0+0x28>)
 8003bf8:	4a09      	ldr	r2, [pc, #36]	@ (8003c20 <global_stdio_init.part.0+0x2c>)
 8003bfa:	2104      	movs	r1, #4
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	4809      	ldr	r0, [pc, #36]	@ (8003c24 <global_stdio_init.part.0+0x30>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	f7ff ff95 	bl	8003b30 <std>
 8003c06:	2201      	movs	r2, #1
 8003c08:	2109      	movs	r1, #9
 8003c0a:	4807      	ldr	r0, [pc, #28]	@ (8003c28 <global_stdio_init.part.0+0x34>)
 8003c0c:	f7ff ff90 	bl	8003b30 <std>
 8003c10:	2202      	movs	r2, #2
 8003c12:	2112      	movs	r1, #18
 8003c14:	4805      	ldr	r0, [pc, #20]	@ (8003c2c <global_stdio_init.part.0+0x38>)
 8003c16:	f7ff ff8b 	bl	8003b30 <std>
 8003c1a:	bd10      	pop	{r4, pc}
 8003c1c:	20000be0 	.word	0x20000be0
 8003c20:	08003b9d 	.word	0x08003b9d
 8003c24:	20000aa8 	.word	0x20000aa8
 8003c28:	20000b10 	.word	0x20000b10
 8003c2c:	20000b78 	.word	0x20000b78

08003c30 <__sfp_lock_acquire>:
 8003c30:	b510      	push	{r4, lr}
 8003c32:	4802      	ldr	r0, [pc, #8]	@ (8003c3c <__sfp_lock_acquire+0xc>)
 8003c34:	f000 fa1d 	bl	8004072 <__retarget_lock_acquire_recursive>
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	20000be9 	.word	0x20000be9

08003c40 <__sfp_lock_release>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4802      	ldr	r0, [pc, #8]	@ (8003c4c <__sfp_lock_release+0xc>)
 8003c44:	f000 fa16 	bl	8004074 <__retarget_lock_release_recursive>
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	20000be9 	.word	0x20000be9

08003c50 <__sinit>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	0004      	movs	r4, r0
 8003c54:	f7ff ffec 	bl	8003c30 <__sfp_lock_acquire>
 8003c58:	6a23      	ldr	r3, [r4, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <__sinit+0x14>
 8003c5e:	f7ff ffef 	bl	8003c40 <__sfp_lock_release>
 8003c62:	bd10      	pop	{r4, pc}
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <__sinit+0x28>)
 8003c66:	6223      	str	r3, [r4, #32]
 8003c68:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <__sinit+0x2c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f6      	bne.n	8003c5e <__sinit+0xe>
 8003c70:	f7ff ffc0 	bl	8003bf4 <global_stdio_init.part.0>
 8003c74:	e7f3      	b.n	8003c5e <__sinit+0xe>
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	08003bb9 	.word	0x08003bb9
 8003c7c:	20000be0 	.word	0x20000be0

08003c80 <_fwalk_sglue>:
 8003c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c82:	0014      	movs	r4, r2
 8003c84:	2600      	movs	r6, #0
 8003c86:	9000      	str	r0, [sp, #0]
 8003c88:	9101      	str	r1, [sp, #4]
 8003c8a:	68a5      	ldr	r5, [r4, #8]
 8003c8c:	6867      	ldr	r7, [r4, #4]
 8003c8e:	3f01      	subs	r7, #1
 8003c90:	d504      	bpl.n	8003c9c <_fwalk_sglue+0x1c>
 8003c92:	6824      	ldr	r4, [r4, #0]
 8003c94:	2c00      	cmp	r4, #0
 8003c96:	d1f8      	bne.n	8003c8a <_fwalk_sglue+0xa>
 8003c98:	0030      	movs	r0, r6
 8003c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c9c:	89ab      	ldrh	r3, [r5, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d908      	bls.n	8003cb4 <_fwalk_sglue+0x34>
 8003ca2:	220e      	movs	r2, #14
 8003ca4:	5eab      	ldrsh	r3, [r5, r2]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	d004      	beq.n	8003cb4 <_fwalk_sglue+0x34>
 8003caa:	0029      	movs	r1, r5
 8003cac:	9800      	ldr	r0, [sp, #0]
 8003cae:	9b01      	ldr	r3, [sp, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	4306      	orrs	r6, r0
 8003cb4:	3568      	adds	r5, #104	@ 0x68
 8003cb6:	e7ea      	b.n	8003c8e <_fwalk_sglue+0xe>

08003cb8 <iprintf>:
 8003cb8:	b40f      	push	{r0, r1, r2, r3}
 8003cba:	b507      	push	{r0, r1, r2, lr}
 8003cbc:	4905      	ldr	r1, [pc, #20]	@ (8003cd4 <iprintf+0x1c>)
 8003cbe:	ab04      	add	r3, sp, #16
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	cb04      	ldmia	r3!, {r2}
 8003cc4:	6881      	ldr	r1, [r0, #8]
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	f000 fafa 	bl	80042c0 <_vfiprintf_r>
 8003ccc:	b003      	add	sp, #12
 8003cce:	bc08      	pop	{r3}
 8003cd0:	b004      	add	sp, #16
 8003cd2:	4718      	bx	r3
 8003cd4:	20000188 	.word	0x20000188

08003cd8 <_puts_r>:
 8003cd8:	6a03      	ldr	r3, [r0, #32]
 8003cda:	b570      	push	{r4, r5, r6, lr}
 8003cdc:	0005      	movs	r5, r0
 8003cde:	000e      	movs	r6, r1
 8003ce0:	6884      	ldr	r4, [r0, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <_puts_r+0x12>
 8003ce6:	f7ff ffb3 	bl	8003c50 <__sinit>
 8003cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cec:	07db      	lsls	r3, r3, #31
 8003cee:	d405      	bmi.n	8003cfc <_puts_r+0x24>
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	059b      	lsls	r3, r3, #22
 8003cf4:	d402      	bmi.n	8003cfc <_puts_r+0x24>
 8003cf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cf8:	f000 f9bb 	bl	8004072 <__retarget_lock_acquire_recursive>
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	071b      	lsls	r3, r3, #28
 8003d00:	d502      	bpl.n	8003d08 <_puts_r+0x30>
 8003d02:	6923      	ldr	r3, [r4, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11f      	bne.n	8003d48 <_puts_r+0x70>
 8003d08:	0021      	movs	r1, r4
 8003d0a:	0028      	movs	r0, r5
 8003d0c:	f000 f8d2 	bl	8003eb4 <__swsetup_r>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d019      	beq.n	8003d48 <_puts_r+0x70>
 8003d14:	2501      	movs	r5, #1
 8003d16:	426d      	negs	r5, r5
 8003d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d1a:	07db      	lsls	r3, r3, #31
 8003d1c:	d405      	bmi.n	8003d2a <_puts_r+0x52>
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	059b      	lsls	r3, r3, #22
 8003d22:	d402      	bmi.n	8003d2a <_puts_r+0x52>
 8003d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d26:	f000 f9a5 	bl	8004074 <__retarget_lock_release_recursive>
 8003d2a:	0028      	movs	r0, r5
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	3601      	adds	r6, #1
 8003d30:	60a3      	str	r3, [r4, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da04      	bge.n	8003d40 <_puts_r+0x68>
 8003d36:	69a2      	ldr	r2, [r4, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	dc16      	bgt.n	8003d6a <_puts_r+0x92>
 8003d3c:	290a      	cmp	r1, #10
 8003d3e:	d014      	beq.n	8003d6a <_puts_r+0x92>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	7019      	strb	r1, [r3, #0]
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	7831      	ldrb	r1, [r6, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	2900      	cmp	r1, #0
 8003d50:	d1ed      	bne.n	8003d2e <_puts_r+0x56>
 8003d52:	60a3      	str	r3, [r4, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	da0f      	bge.n	8003d78 <_puts_r+0xa0>
 8003d58:	0022      	movs	r2, r4
 8003d5a:	0028      	movs	r0, r5
 8003d5c:	310a      	adds	r1, #10
 8003d5e:	f000 f867 	bl	8003e30 <__swbuf_r>
 8003d62:	3001      	adds	r0, #1
 8003d64:	d0d6      	beq.n	8003d14 <_puts_r+0x3c>
 8003d66:	250a      	movs	r5, #10
 8003d68:	e7d6      	b.n	8003d18 <_puts_r+0x40>
 8003d6a:	0022      	movs	r2, r4
 8003d6c:	0028      	movs	r0, r5
 8003d6e:	f000 f85f 	bl	8003e30 <__swbuf_r>
 8003d72:	3001      	adds	r0, #1
 8003d74:	d1e8      	bne.n	8003d48 <_puts_r+0x70>
 8003d76:	e7cd      	b.n	8003d14 <_puts_r+0x3c>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	6022      	str	r2, [r4, #0]
 8003d7e:	220a      	movs	r2, #10
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e7f0      	b.n	8003d66 <_puts_r+0x8e>

08003d84 <puts>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <puts+0x10>)
 8003d88:	0001      	movs	r1, r0
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	f7ff ffa4 	bl	8003cd8 <_puts_r>
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	20000188 	.word	0x20000188

08003d98 <__sread>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	000c      	movs	r4, r1
 8003d9c:	250e      	movs	r5, #14
 8003d9e:	5f49      	ldrsh	r1, [r1, r5]
 8003da0:	f000 f914 	bl	8003fcc <_read_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	db03      	blt.n	8003db0 <__sread+0x18>
 8003da8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003daa:	181b      	adds	r3, r3, r0
 8003dac:	6563      	str	r3, [r4, #84]	@ 0x54
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	4a02      	ldr	r2, [pc, #8]	@ (8003dbc <__sread+0x24>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	e7f9      	b.n	8003dae <__sread+0x16>
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	ffffefff 	.word	0xffffefff

08003dc0 <__swrite>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	001f      	movs	r7, r3
 8003dc4:	898b      	ldrh	r3, [r1, #12]
 8003dc6:	0005      	movs	r5, r0
 8003dc8:	000c      	movs	r4, r1
 8003dca:	0016      	movs	r6, r2
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	d505      	bpl.n	8003ddc <__swrite+0x1c>
 8003dd0:	230e      	movs	r3, #14
 8003dd2:	5ec9      	ldrsh	r1, [r1, r3]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f000 f8e4 	bl	8003fa4 <_lseek_r>
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	4a05      	ldr	r2, [pc, #20]	@ (8003df4 <__swrite+0x34>)
 8003de0:	0028      	movs	r0, r5
 8003de2:	4013      	ands	r3, r2
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	0032      	movs	r2, r6
 8003de8:	230e      	movs	r3, #14
 8003dea:	5ee1      	ldrsh	r1, [r4, r3]
 8003dec:	003b      	movs	r3, r7
 8003dee:	f000 f901 	bl	8003ff4 <_write_r>
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df4:	ffffefff 	.word	0xffffefff

08003df8 <__sseek>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	000c      	movs	r4, r1
 8003dfc:	250e      	movs	r5, #14
 8003dfe:	5f49      	ldrsh	r1, [r1, r5]
 8003e00:	f000 f8d0 	bl	8003fa4 <_lseek_r>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	1c42      	adds	r2, r0, #1
 8003e08:	d103      	bne.n	8003e12 <__sseek+0x1a>
 8003e0a:	4a05      	ldr	r2, [pc, #20]	@ (8003e20 <__sseek+0x28>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	bd70      	pop	{r4, r5, r6, pc}
 8003e12:	2280      	movs	r2, #128	@ 0x80
 8003e14:	0152      	lsls	r2, r2, #5
 8003e16:	4313      	orrs	r3, r2
 8003e18:	81a3      	strh	r3, [r4, #12]
 8003e1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e1c:	e7f8      	b.n	8003e10 <__sseek+0x18>
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	ffffefff 	.word	0xffffefff

08003e24 <__sclose>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	230e      	movs	r3, #14
 8003e28:	5ec9      	ldrsh	r1, [r1, r3]
 8003e2a:	f000 f8a9 	bl	8003f80 <_close_r>
 8003e2e:	bd10      	pop	{r4, pc}

08003e30 <__swbuf_r>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	0006      	movs	r6, r0
 8003e34:	000d      	movs	r5, r1
 8003e36:	0014      	movs	r4, r2
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d004      	beq.n	8003e46 <__swbuf_r+0x16>
 8003e3c:	6a03      	ldr	r3, [r0, #32]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <__swbuf_r+0x16>
 8003e42:	f7ff ff05 	bl	8003c50 <__sinit>
 8003e46:	69a3      	ldr	r3, [r4, #24]
 8003e48:	60a3      	str	r3, [r4, #8]
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	d502      	bpl.n	8003e56 <__swbuf_r+0x26>
 8003e50:	6923      	ldr	r3, [r4, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <__swbuf_r+0x3a>
 8003e56:	0021      	movs	r1, r4
 8003e58:	0030      	movs	r0, r6
 8003e5a:	f000 f82b 	bl	8003eb4 <__swsetup_r>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d003      	beq.n	8003e6a <__swbuf_r+0x3a>
 8003e62:	2501      	movs	r5, #1
 8003e64:	426d      	negs	r5, r5
 8003e66:	0028      	movs	r0, r5
 8003e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	b2ef      	uxtb	r7, r5
 8003e70:	1ac0      	subs	r0, r0, r3
 8003e72:	6963      	ldr	r3, [r4, #20]
 8003e74:	b2ed      	uxtb	r5, r5
 8003e76:	4283      	cmp	r3, r0
 8003e78:	dc05      	bgt.n	8003e86 <__swbuf_r+0x56>
 8003e7a:	0021      	movs	r1, r4
 8003e7c:	0030      	movs	r0, r6
 8003e7e:	f000 fd3d 	bl	80048fc <_fflush_r>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d1ed      	bne.n	8003e62 <__swbuf_r+0x32>
 8003e86:	68a3      	ldr	r3, [r4, #8]
 8003e88:	3001      	adds	r0, #1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	60a3      	str	r3, [r4, #8]
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	6022      	str	r2, [r4, #0]
 8003e94:	701f      	strb	r7, [r3, #0]
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	4283      	cmp	r3, r0
 8003e9a:	d004      	beq.n	8003ea6 <__swbuf_r+0x76>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	07db      	lsls	r3, r3, #31
 8003ea0:	d5e1      	bpl.n	8003e66 <__swbuf_r+0x36>
 8003ea2:	2d0a      	cmp	r5, #10
 8003ea4:	d1df      	bne.n	8003e66 <__swbuf_r+0x36>
 8003ea6:	0021      	movs	r1, r4
 8003ea8:	0030      	movs	r0, r6
 8003eaa:	f000 fd27 	bl	80048fc <_fflush_r>
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d0d9      	beq.n	8003e66 <__swbuf_r+0x36>
 8003eb2:	e7d6      	b.n	8003e62 <__swbuf_r+0x32>

08003eb4 <__swsetup_r>:
 8003eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f6c <__swsetup_r+0xb8>)
 8003eb6:	b570      	push	{r4, r5, r6, lr}
 8003eb8:	0005      	movs	r5, r0
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	000c      	movs	r4, r1
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d004      	beq.n	8003ecc <__swsetup_r+0x18>
 8003ec2:	6a03      	ldr	r3, [r0, #32]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <__swsetup_r+0x18>
 8003ec8:	f7ff fec2 	bl	8003c50 <__sinit>
 8003ecc:	220c      	movs	r2, #12
 8003ece:	5ea3      	ldrsh	r3, [r4, r2]
 8003ed0:	071a      	lsls	r2, r3, #28
 8003ed2:	d423      	bmi.n	8003f1c <__swsetup_r+0x68>
 8003ed4:	06da      	lsls	r2, r3, #27
 8003ed6:	d407      	bmi.n	8003ee8 <__swsetup_r+0x34>
 8003ed8:	2209      	movs	r2, #9
 8003eda:	602a      	str	r2, [r5, #0]
 8003edc:	2240      	movs	r2, #64	@ 0x40
 8003ede:	2001      	movs	r0, #1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	4240      	negs	r0, r0
 8003ee6:	e03a      	b.n	8003f5e <__swsetup_r+0xaa>
 8003ee8:	075b      	lsls	r3, r3, #29
 8003eea:	d513      	bpl.n	8003f14 <__swsetup_r+0x60>
 8003eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	d008      	beq.n	8003f04 <__swsetup_r+0x50>
 8003ef2:	0023      	movs	r3, r4
 8003ef4:	3344      	adds	r3, #68	@ 0x44
 8003ef6:	4299      	cmp	r1, r3
 8003ef8:	d002      	beq.n	8003f00 <__swsetup_r+0x4c>
 8003efa:	0028      	movs	r0, r5
 8003efc:	f000 f8bc 	bl	8004078 <_free_r>
 8003f00:	2300      	movs	r3, #0
 8003f02:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f04:	2224      	movs	r2, #36	@ 0x24
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	4393      	bics	r3, r2
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6063      	str	r3, [r4, #4]
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	2308      	movs	r3, #8
 8003f16:	89a2      	ldrh	r2, [r4, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	81a3      	strh	r3, [r4, #12]
 8003f1c:	6923      	ldr	r3, [r4, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <__swsetup_r+0x86>
 8003f22:	21a0      	movs	r1, #160	@ 0xa0
 8003f24:	2280      	movs	r2, #128	@ 0x80
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	0089      	lsls	r1, r1, #2
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <__swsetup_r+0x86>
 8003f32:	0021      	movs	r1, r4
 8003f34:	0028      	movs	r0, r5
 8003f36:	f000 fd37 	bl	80049a8 <__smakebuf_r>
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	5ea3      	ldrsh	r3, [r4, r2]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	001a      	movs	r2, r3
 8003f42:	400a      	ands	r2, r1
 8003f44:	420b      	tst	r3, r1
 8003f46:	d00b      	beq.n	8003f60 <__swsetup_r+0xac>
 8003f48:	2200      	movs	r2, #0
 8003f4a:	60a2      	str	r2, [r4, #8]
 8003f4c:	6962      	ldr	r2, [r4, #20]
 8003f4e:	4252      	negs	r2, r2
 8003f50:	61a2      	str	r2, [r4, #24]
 8003f52:	2000      	movs	r0, #0
 8003f54:	6922      	ldr	r2, [r4, #16]
 8003f56:	4282      	cmp	r2, r0
 8003f58:	d101      	bne.n	8003f5e <__swsetup_r+0xaa>
 8003f5a:	061a      	lsls	r2, r3, #24
 8003f5c:	d4be      	bmi.n	8003edc <__swsetup_r+0x28>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	0799      	lsls	r1, r3, #30
 8003f62:	d400      	bmi.n	8003f66 <__swsetup_r+0xb2>
 8003f64:	6962      	ldr	r2, [r4, #20]
 8003f66:	60a2      	str	r2, [r4, #8]
 8003f68:	e7f3      	b.n	8003f52 <__swsetup_r+0x9e>
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	20000188 	.word	0x20000188

08003f70 <memset>:
 8003f70:	0003      	movs	r3, r0
 8003f72:	1882      	adds	r2, r0, r2
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d100      	bne.n	8003f7a <memset+0xa>
 8003f78:	4770      	bx	lr
 8003f7a:	7019      	strb	r1, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	e7f9      	b.n	8003f74 <memset+0x4>

08003f80 <_close_r>:
 8003f80:	2300      	movs	r3, #0
 8003f82:	b570      	push	{r4, r5, r6, lr}
 8003f84:	4d06      	ldr	r5, [pc, #24]	@ (8003fa0 <_close_r+0x20>)
 8003f86:	0004      	movs	r4, r0
 8003f88:	0008      	movs	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fc fb53 	bl	8000636 <_close>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d103      	bne.n	8003f9c <_close_r+0x1c>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d000      	beq.n	8003f9c <_close_r+0x1c>
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	bd70      	pop	{r4, r5, r6, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	20000be4 	.word	0x20000be4

08003fa4 <_lseek_r>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	0004      	movs	r4, r0
 8003fa8:	0008      	movs	r0, r1
 8003faa:	0011      	movs	r1, r2
 8003fac:	001a      	movs	r2, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	4d05      	ldr	r5, [pc, #20]	@ (8003fc8 <_lseek_r+0x24>)
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	f7fc fb49 	bl	800064a <_lseek>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d103      	bne.n	8003fc4 <_lseek_r+0x20>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d000      	beq.n	8003fc4 <_lseek_r+0x20>
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	bd70      	pop	{r4, r5, r6, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	20000be4 	.word	0x20000be4

08003fcc <_read_r>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	0004      	movs	r4, r0
 8003fd0:	0008      	movs	r0, r1
 8003fd2:	0011      	movs	r1, r2
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4d05      	ldr	r5, [pc, #20]	@ (8003ff0 <_read_r+0x24>)
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fc fb1e 	bl	800061c <_read>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d103      	bne.n	8003fec <_read_r+0x20>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d000      	beq.n	8003fec <_read_r+0x20>
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	20000be4 	.word	0x20000be4

08003ff4 <_write_r>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	0004      	movs	r4, r0
 8003ff8:	0008      	movs	r0, r1
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	001a      	movs	r2, r3
 8003ffe:	2300      	movs	r3, #0
 8004000:	4d05      	ldr	r5, [pc, #20]	@ (8004018 <_write_r+0x24>)
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	f7fc f98e 	bl	8000324 <_write>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d103      	bne.n	8004014 <_write_r+0x20>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d000      	beq.n	8004014 <_write_r+0x20>
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	20000be4 	.word	0x20000be4

0800401c <__errno>:
 800401c:	4b01      	ldr	r3, [pc, #4]	@ (8004024 <__errno+0x8>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	4770      	bx	lr
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	20000188 	.word	0x20000188

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	2600      	movs	r6, #0
 800402c:	4c0c      	ldr	r4, [pc, #48]	@ (8004060 <__libc_init_array+0x38>)
 800402e:	4d0d      	ldr	r5, [pc, #52]	@ (8004064 <__libc_init_array+0x3c>)
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	42a6      	cmp	r6, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	2600      	movs	r6, #0
 800403a:	f000 fd39 	bl	8004ab0 <_init>
 800403e:	4c0a      	ldr	r4, [pc, #40]	@ (8004068 <__libc_init_array+0x40>)
 8004040:	4d0a      	ldr	r5, [pc, #40]	@ (800406c <__libc_init_array+0x44>)
 8004042:	1b64      	subs	r4, r4, r5
 8004044:	10a4      	asrs	r4, r4, #2
 8004046:	42a6      	cmp	r6, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	00b3      	lsls	r3, r6, #2
 800404e:	58eb      	ldr	r3, [r5, r3]
 8004050:	4798      	blx	r3
 8004052:	3601      	adds	r6, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	00b3      	lsls	r3, r6, #2
 8004058:	58eb      	ldr	r3, [r5, r3]
 800405a:	4798      	blx	r3
 800405c:	3601      	adds	r6, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	08004bf0 	.word	0x08004bf0
 8004064:	08004bf0 	.word	0x08004bf0
 8004068:	08004bf4 	.word	0x08004bf4
 800406c:	08004bf0 	.word	0x08004bf0

08004070 <__retarget_lock_init_recursive>:
 8004070:	4770      	bx	lr

08004072 <__retarget_lock_acquire_recursive>:
 8004072:	4770      	bx	lr

08004074 <__retarget_lock_release_recursive>:
 8004074:	4770      	bx	lr
	...

08004078 <_free_r>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	0005      	movs	r5, r0
 800407c:	1e0c      	subs	r4, r1, #0
 800407e:	d010      	beq.n	80040a2 <_free_r+0x2a>
 8004080:	3c04      	subs	r4, #4
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	da00      	bge.n	800408a <_free_r+0x12>
 8004088:	18e4      	adds	r4, r4, r3
 800408a:	0028      	movs	r0, r5
 800408c:	f000 f8e0 	bl	8004250 <__malloc_lock>
 8004090:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <_free_r+0x90>)
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <_free_r+0x2c>
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	6014      	str	r4, [r2, #0]
 800409c:	0028      	movs	r0, r5
 800409e:	f000 f8df 	bl	8004260 <__malloc_unlock>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	42a3      	cmp	r3, r4
 80040a6:	d908      	bls.n	80040ba <_free_r+0x42>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	1821      	adds	r1, r4, r0
 80040ac:	428b      	cmp	r3, r1
 80040ae:	d1f3      	bne.n	8004098 <_free_r+0x20>
 80040b0:	6819      	ldr	r1, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	1809      	adds	r1, r1, r0
 80040b6:	6021      	str	r1, [r4, #0]
 80040b8:	e7ee      	b.n	8004098 <_free_r+0x20>
 80040ba:	001a      	movs	r2, r3
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <_free_r+0x4e>
 80040c2:	42a3      	cmp	r3, r4
 80040c4:	d9f9      	bls.n	80040ba <_free_r+0x42>
 80040c6:	6811      	ldr	r1, [r2, #0]
 80040c8:	1850      	adds	r0, r2, r1
 80040ca:	42a0      	cmp	r0, r4
 80040cc:	d10b      	bne.n	80040e6 <_free_r+0x6e>
 80040ce:	6820      	ldr	r0, [r4, #0]
 80040d0:	1809      	adds	r1, r1, r0
 80040d2:	1850      	adds	r0, r2, r1
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	4283      	cmp	r3, r0
 80040d8:	d1e0      	bne.n	800409c <_free_r+0x24>
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	1841      	adds	r1, r0, r1
 80040e0:	6011      	str	r1, [r2, #0]
 80040e2:	6053      	str	r3, [r2, #4]
 80040e4:	e7da      	b.n	800409c <_free_r+0x24>
 80040e6:	42a0      	cmp	r0, r4
 80040e8:	d902      	bls.n	80040f0 <_free_r+0x78>
 80040ea:	230c      	movs	r3, #12
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	e7d5      	b.n	800409c <_free_r+0x24>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	1821      	adds	r1, r4, r0
 80040f4:	428b      	cmp	r3, r1
 80040f6:	d103      	bne.n	8004100 <_free_r+0x88>
 80040f8:	6819      	ldr	r1, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	1809      	adds	r1, r1, r0
 80040fe:	6021      	str	r1, [r4, #0]
 8004100:	6063      	str	r3, [r4, #4]
 8004102:	6054      	str	r4, [r2, #4]
 8004104:	e7ca      	b.n	800409c <_free_r+0x24>
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	20000bf0 	.word	0x20000bf0

0800410c <sbrk_aligned>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4e0f      	ldr	r6, [pc, #60]	@ (800414c <sbrk_aligned+0x40>)
 8004110:	000d      	movs	r5, r1
 8004112:	6831      	ldr	r1, [r6, #0]
 8004114:	0004      	movs	r4, r0
 8004116:	2900      	cmp	r1, #0
 8004118:	d102      	bne.n	8004120 <sbrk_aligned+0x14>
 800411a:	f000 fcab 	bl	8004a74 <_sbrk_r>
 800411e:	6030      	str	r0, [r6, #0]
 8004120:	0029      	movs	r1, r5
 8004122:	0020      	movs	r0, r4
 8004124:	f000 fca6 	bl	8004a74 <_sbrk_r>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d103      	bne.n	8004134 <sbrk_aligned+0x28>
 800412c:	2501      	movs	r5, #1
 800412e:	426d      	negs	r5, r5
 8004130:	0028      	movs	r0, r5
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	2303      	movs	r3, #3
 8004136:	1cc5      	adds	r5, r0, #3
 8004138:	439d      	bics	r5, r3
 800413a:	42a8      	cmp	r0, r5
 800413c:	d0f8      	beq.n	8004130 <sbrk_aligned+0x24>
 800413e:	1a29      	subs	r1, r5, r0
 8004140:	0020      	movs	r0, r4
 8004142:	f000 fc97 	bl	8004a74 <_sbrk_r>
 8004146:	3001      	adds	r0, #1
 8004148:	d1f2      	bne.n	8004130 <sbrk_aligned+0x24>
 800414a:	e7ef      	b.n	800412c <sbrk_aligned+0x20>
 800414c:	20000bec 	.word	0x20000bec

08004150 <_malloc_r>:
 8004150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004152:	2203      	movs	r2, #3
 8004154:	1ccb      	adds	r3, r1, #3
 8004156:	4393      	bics	r3, r2
 8004158:	3308      	adds	r3, #8
 800415a:	0005      	movs	r5, r0
 800415c:	001f      	movs	r7, r3
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d234      	bcs.n	80041cc <_malloc_r+0x7c>
 8004162:	270c      	movs	r7, #12
 8004164:	42b9      	cmp	r1, r7
 8004166:	d833      	bhi.n	80041d0 <_malloc_r+0x80>
 8004168:	0028      	movs	r0, r5
 800416a:	f000 f871 	bl	8004250 <__malloc_lock>
 800416e:	4e37      	ldr	r6, [pc, #220]	@ (800424c <_malloc_r+0xfc>)
 8004170:	6833      	ldr	r3, [r6, #0]
 8004172:	001c      	movs	r4, r3
 8004174:	2c00      	cmp	r4, #0
 8004176:	d12f      	bne.n	80041d8 <_malloc_r+0x88>
 8004178:	0039      	movs	r1, r7
 800417a:	0028      	movs	r0, r5
 800417c:	f7ff ffc6 	bl	800410c <sbrk_aligned>
 8004180:	0004      	movs	r4, r0
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d15f      	bne.n	8004246 <_malloc_r+0xf6>
 8004186:	6834      	ldr	r4, [r6, #0]
 8004188:	9400      	str	r4, [sp, #0]
 800418a:	9b00      	ldr	r3, [sp, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d14a      	bne.n	8004226 <_malloc_r+0xd6>
 8004190:	2c00      	cmp	r4, #0
 8004192:	d052      	beq.n	800423a <_malloc_r+0xea>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	0028      	movs	r0, r5
 8004198:	18e3      	adds	r3, r4, r3
 800419a:	9900      	ldr	r1, [sp, #0]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	f000 fc69 	bl	8004a74 <_sbrk_r>
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	4283      	cmp	r3, r0
 80041a6:	d148      	bne.n	800423a <_malloc_r+0xea>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	0028      	movs	r0, r5
 80041ac:	1aff      	subs	r7, r7, r3
 80041ae:	0039      	movs	r1, r7
 80041b0:	f7ff ffac 	bl	800410c <sbrk_aligned>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d040      	beq.n	800423a <_malloc_r+0xea>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	19db      	adds	r3, r3, r7
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	6833      	ldr	r3, [r6, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	2a00      	cmp	r2, #0
 80041c4:	d133      	bne.n	800422e <_malloc_r+0xde>
 80041c6:	9b00      	ldr	r3, [sp, #0]
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	e019      	b.n	8004200 <_malloc_r+0xb0>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	dac9      	bge.n	8004164 <_malloc_r+0x14>
 80041d0:	230c      	movs	r3, #12
 80041d2:	602b      	str	r3, [r5, #0]
 80041d4:	2000      	movs	r0, #0
 80041d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041d8:	6821      	ldr	r1, [r4, #0]
 80041da:	1bc9      	subs	r1, r1, r7
 80041dc:	d420      	bmi.n	8004220 <_malloc_r+0xd0>
 80041de:	290b      	cmp	r1, #11
 80041e0:	d90a      	bls.n	80041f8 <_malloc_r+0xa8>
 80041e2:	19e2      	adds	r2, r4, r7
 80041e4:	6027      	str	r7, [r4, #0]
 80041e6:	42a3      	cmp	r3, r4
 80041e8:	d104      	bne.n	80041f4 <_malloc_r+0xa4>
 80041ea:	6032      	str	r2, [r6, #0]
 80041ec:	6863      	ldr	r3, [r4, #4]
 80041ee:	6011      	str	r1, [r2, #0]
 80041f0:	6053      	str	r3, [r2, #4]
 80041f2:	e005      	b.n	8004200 <_malloc_r+0xb0>
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	e7f9      	b.n	80041ec <_malloc_r+0x9c>
 80041f8:	6862      	ldr	r2, [r4, #4]
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	d10e      	bne.n	800421c <_malloc_r+0xcc>
 80041fe:	6032      	str	r2, [r6, #0]
 8004200:	0028      	movs	r0, r5
 8004202:	f000 f82d 	bl	8004260 <__malloc_unlock>
 8004206:	0020      	movs	r0, r4
 8004208:	2207      	movs	r2, #7
 800420a:	300b      	adds	r0, #11
 800420c:	1d23      	adds	r3, r4, #4
 800420e:	4390      	bics	r0, r2
 8004210:	1ac2      	subs	r2, r0, r3
 8004212:	4298      	cmp	r0, r3
 8004214:	d0df      	beq.n	80041d6 <_malloc_r+0x86>
 8004216:	1a1b      	subs	r3, r3, r0
 8004218:	50a3      	str	r3, [r4, r2]
 800421a:	e7dc      	b.n	80041d6 <_malloc_r+0x86>
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	e7ef      	b.n	8004200 <_malloc_r+0xb0>
 8004220:	0023      	movs	r3, r4
 8004222:	6864      	ldr	r4, [r4, #4]
 8004224:	e7a6      	b.n	8004174 <_malloc_r+0x24>
 8004226:	9c00      	ldr	r4, [sp, #0]
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	e7ad      	b.n	800418a <_malloc_r+0x3a>
 800422e:	001a      	movs	r2, r3
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	42a3      	cmp	r3, r4
 8004234:	d1fb      	bne.n	800422e <_malloc_r+0xde>
 8004236:	2300      	movs	r3, #0
 8004238:	e7da      	b.n	80041f0 <_malloc_r+0xa0>
 800423a:	230c      	movs	r3, #12
 800423c:	0028      	movs	r0, r5
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f000 f80e 	bl	8004260 <__malloc_unlock>
 8004244:	e7c6      	b.n	80041d4 <_malloc_r+0x84>
 8004246:	6007      	str	r7, [r0, #0]
 8004248:	e7da      	b.n	8004200 <_malloc_r+0xb0>
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	20000bf0 	.word	0x20000bf0

08004250 <__malloc_lock>:
 8004250:	b510      	push	{r4, lr}
 8004252:	4802      	ldr	r0, [pc, #8]	@ (800425c <__malloc_lock+0xc>)
 8004254:	f7ff ff0d 	bl	8004072 <__retarget_lock_acquire_recursive>
 8004258:	bd10      	pop	{r4, pc}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	20000be8 	.word	0x20000be8

08004260 <__malloc_unlock>:
 8004260:	b510      	push	{r4, lr}
 8004262:	4802      	ldr	r0, [pc, #8]	@ (800426c <__malloc_unlock+0xc>)
 8004264:	f7ff ff06 	bl	8004074 <__retarget_lock_release_recursive>
 8004268:	bd10      	pop	{r4, pc}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	20000be8 	.word	0x20000be8

08004270 <__sfputc_r>:
 8004270:	6893      	ldr	r3, [r2, #8]
 8004272:	b510      	push	{r4, lr}
 8004274:	3b01      	subs	r3, #1
 8004276:	6093      	str	r3, [r2, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	da04      	bge.n	8004286 <__sfputc_r+0x16>
 800427c:	6994      	ldr	r4, [r2, #24]
 800427e:	42a3      	cmp	r3, r4
 8004280:	db07      	blt.n	8004292 <__sfputc_r+0x22>
 8004282:	290a      	cmp	r1, #10
 8004284:	d005      	beq.n	8004292 <__sfputc_r+0x22>
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	1c58      	adds	r0, r3, #1
 800428a:	6010      	str	r0, [r2, #0]
 800428c:	7019      	strb	r1, [r3, #0]
 800428e:	0008      	movs	r0, r1
 8004290:	bd10      	pop	{r4, pc}
 8004292:	f7ff fdcd 	bl	8003e30 <__swbuf_r>
 8004296:	0001      	movs	r1, r0
 8004298:	e7f9      	b.n	800428e <__sfputc_r+0x1e>

0800429a <__sfputs_r>:
 800429a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429c:	0006      	movs	r6, r0
 800429e:	000f      	movs	r7, r1
 80042a0:	0014      	movs	r4, r2
 80042a2:	18d5      	adds	r5, r2, r3
 80042a4:	42ac      	cmp	r4, r5
 80042a6:	d101      	bne.n	80042ac <__sfputs_r+0x12>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e007      	b.n	80042bc <__sfputs_r+0x22>
 80042ac:	7821      	ldrb	r1, [r4, #0]
 80042ae:	003a      	movs	r2, r7
 80042b0:	0030      	movs	r0, r6
 80042b2:	f7ff ffdd 	bl	8004270 <__sfputc_r>
 80042b6:	3401      	adds	r4, #1
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d1f3      	bne.n	80042a4 <__sfputs_r+0xa>
 80042bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042c0 <_vfiprintf_r>:
 80042c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c2:	b0a1      	sub	sp, #132	@ 0x84
 80042c4:	000f      	movs	r7, r1
 80042c6:	0015      	movs	r5, r2
 80042c8:	001e      	movs	r6, r3
 80042ca:	9003      	str	r0, [sp, #12]
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d004      	beq.n	80042da <_vfiprintf_r+0x1a>
 80042d0:	6a03      	ldr	r3, [r0, #32]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <_vfiprintf_r+0x1a>
 80042d6:	f7ff fcbb 	bl	8003c50 <__sinit>
 80042da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042dc:	07db      	lsls	r3, r3, #31
 80042de:	d405      	bmi.n	80042ec <_vfiprintf_r+0x2c>
 80042e0:	89bb      	ldrh	r3, [r7, #12]
 80042e2:	059b      	lsls	r3, r3, #22
 80042e4:	d402      	bmi.n	80042ec <_vfiprintf_r+0x2c>
 80042e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80042e8:	f7ff fec3 	bl	8004072 <__retarget_lock_acquire_recursive>
 80042ec:	89bb      	ldrh	r3, [r7, #12]
 80042ee:	071b      	lsls	r3, r3, #28
 80042f0:	d502      	bpl.n	80042f8 <_vfiprintf_r+0x38>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d113      	bne.n	8004320 <_vfiprintf_r+0x60>
 80042f8:	0039      	movs	r1, r7
 80042fa:	9803      	ldr	r0, [sp, #12]
 80042fc:	f7ff fdda 	bl	8003eb4 <__swsetup_r>
 8004300:	2800      	cmp	r0, #0
 8004302:	d00d      	beq.n	8004320 <_vfiprintf_r+0x60>
 8004304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004306:	07db      	lsls	r3, r3, #31
 8004308:	d503      	bpl.n	8004312 <_vfiprintf_r+0x52>
 800430a:	2001      	movs	r0, #1
 800430c:	4240      	negs	r0, r0
 800430e:	b021      	add	sp, #132	@ 0x84
 8004310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004312:	89bb      	ldrh	r3, [r7, #12]
 8004314:	059b      	lsls	r3, r3, #22
 8004316:	d4f8      	bmi.n	800430a <_vfiprintf_r+0x4a>
 8004318:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800431a:	f7ff feab 	bl	8004074 <__retarget_lock_release_recursive>
 800431e:	e7f4      	b.n	800430a <_vfiprintf_r+0x4a>
 8004320:	2300      	movs	r3, #0
 8004322:	ac08      	add	r4, sp, #32
 8004324:	6163      	str	r3, [r4, #20]
 8004326:	3320      	adds	r3, #32
 8004328:	7663      	strb	r3, [r4, #25]
 800432a:	3310      	adds	r3, #16
 800432c:	76a3      	strb	r3, [r4, #26]
 800432e:	9607      	str	r6, [sp, #28]
 8004330:	002e      	movs	r6, r5
 8004332:	7833      	ldrb	r3, [r6, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <_vfiprintf_r+0x7c>
 8004338:	2b25      	cmp	r3, #37	@ 0x25
 800433a:	d148      	bne.n	80043ce <_vfiprintf_r+0x10e>
 800433c:	1b73      	subs	r3, r6, r5
 800433e:	9305      	str	r3, [sp, #20]
 8004340:	42ae      	cmp	r6, r5
 8004342:	d00b      	beq.n	800435c <_vfiprintf_r+0x9c>
 8004344:	002a      	movs	r2, r5
 8004346:	0039      	movs	r1, r7
 8004348:	9803      	ldr	r0, [sp, #12]
 800434a:	f7ff ffa6 	bl	800429a <__sfputs_r>
 800434e:	3001      	adds	r0, #1
 8004350:	d100      	bne.n	8004354 <_vfiprintf_r+0x94>
 8004352:	e0ae      	b.n	80044b2 <_vfiprintf_r+0x1f2>
 8004354:	6963      	ldr	r3, [r4, #20]
 8004356:	9a05      	ldr	r2, [sp, #20]
 8004358:	189b      	adds	r3, r3, r2
 800435a:	6163      	str	r3, [r4, #20]
 800435c:	7833      	ldrb	r3, [r6, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d100      	bne.n	8004364 <_vfiprintf_r+0xa4>
 8004362:	e0a6      	b.n	80044b2 <_vfiprintf_r+0x1f2>
 8004364:	2201      	movs	r2, #1
 8004366:	2300      	movs	r3, #0
 8004368:	4252      	negs	r2, r2
 800436a:	6062      	str	r2, [r4, #4]
 800436c:	a904      	add	r1, sp, #16
 800436e:	3254      	adds	r2, #84	@ 0x54
 8004370:	1852      	adds	r2, r2, r1
 8004372:	1c75      	adds	r5, r6, #1
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	60e3      	str	r3, [r4, #12]
 8004378:	60a3      	str	r3, [r4, #8]
 800437a:	7013      	strb	r3, [r2, #0]
 800437c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800437e:	4b59      	ldr	r3, [pc, #356]	@ (80044e4 <_vfiprintf_r+0x224>)
 8004380:	2205      	movs	r2, #5
 8004382:	0018      	movs	r0, r3
 8004384:	7829      	ldrb	r1, [r5, #0]
 8004386:	9305      	str	r3, [sp, #20]
 8004388:	f000 fb86 	bl	8004a98 <memchr>
 800438c:	1c6e      	adds	r6, r5, #1
 800438e:	2800      	cmp	r0, #0
 8004390:	d11f      	bne.n	80043d2 <_vfiprintf_r+0x112>
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	06d3      	lsls	r3, r2, #27
 8004396:	d504      	bpl.n	80043a2 <_vfiprintf_r+0xe2>
 8004398:	2353      	movs	r3, #83	@ 0x53
 800439a:	a904      	add	r1, sp, #16
 800439c:	185b      	adds	r3, r3, r1
 800439e:	2120      	movs	r1, #32
 80043a0:	7019      	strb	r1, [r3, #0]
 80043a2:	0713      	lsls	r3, r2, #28
 80043a4:	d504      	bpl.n	80043b0 <_vfiprintf_r+0xf0>
 80043a6:	2353      	movs	r3, #83	@ 0x53
 80043a8:	a904      	add	r1, sp, #16
 80043aa:	185b      	adds	r3, r3, r1
 80043ac:	212b      	movs	r1, #43	@ 0x2b
 80043ae:	7019      	strb	r1, [r3, #0]
 80043b0:	782b      	ldrb	r3, [r5, #0]
 80043b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b4:	d016      	beq.n	80043e4 <_vfiprintf_r+0x124>
 80043b6:	002e      	movs	r6, r5
 80043b8:	2100      	movs	r1, #0
 80043ba:	200a      	movs	r0, #10
 80043bc:	68e3      	ldr	r3, [r4, #12]
 80043be:	7832      	ldrb	r2, [r6, #0]
 80043c0:	1c75      	adds	r5, r6, #1
 80043c2:	3a30      	subs	r2, #48	@ 0x30
 80043c4:	2a09      	cmp	r2, #9
 80043c6:	d950      	bls.n	800446a <_vfiprintf_r+0x1aa>
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d111      	bne.n	80043f0 <_vfiprintf_r+0x130>
 80043cc:	e017      	b.n	80043fe <_vfiprintf_r+0x13e>
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7af      	b.n	8004332 <_vfiprintf_r+0x72>
 80043d2:	9b05      	ldr	r3, [sp, #20]
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	1ac0      	subs	r0, r0, r3
 80043d8:	2301      	movs	r3, #1
 80043da:	4083      	lsls	r3, r0
 80043dc:	4313      	orrs	r3, r2
 80043de:	0035      	movs	r5, r6
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	e7cc      	b.n	800437e <_vfiprintf_r+0xbe>
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	1d19      	adds	r1, r3, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	9107      	str	r1, [sp, #28]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	db01      	blt.n	80043f4 <_vfiprintf_r+0x134>
 80043f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043f2:	e004      	b.n	80043fe <_vfiprintf_r+0x13e>
 80043f4:	425b      	negs	r3, r3
 80043f6:	60e3      	str	r3, [r4, #12]
 80043f8:	2302      	movs	r3, #2
 80043fa:	4313      	orrs	r3, r2
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	7833      	ldrb	r3, [r6, #0]
 8004400:	2b2e      	cmp	r3, #46	@ 0x2e
 8004402:	d10c      	bne.n	800441e <_vfiprintf_r+0x15e>
 8004404:	7873      	ldrb	r3, [r6, #1]
 8004406:	2b2a      	cmp	r3, #42	@ 0x2a
 8004408:	d134      	bne.n	8004474 <_vfiprintf_r+0x1b4>
 800440a:	9b07      	ldr	r3, [sp, #28]
 800440c:	3602      	adds	r6, #2
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	9207      	str	r2, [sp, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da01      	bge.n	800441c <_vfiprintf_r+0x15c>
 8004418:	2301      	movs	r3, #1
 800441a:	425b      	negs	r3, r3
 800441c:	9309      	str	r3, [sp, #36]	@ 0x24
 800441e:	4d32      	ldr	r5, [pc, #200]	@ (80044e8 <_vfiprintf_r+0x228>)
 8004420:	2203      	movs	r2, #3
 8004422:	0028      	movs	r0, r5
 8004424:	7831      	ldrb	r1, [r6, #0]
 8004426:	f000 fb37 	bl	8004a98 <memchr>
 800442a:	2800      	cmp	r0, #0
 800442c:	d006      	beq.n	800443c <_vfiprintf_r+0x17c>
 800442e:	2340      	movs	r3, #64	@ 0x40
 8004430:	1b40      	subs	r0, r0, r5
 8004432:	4083      	lsls	r3, r0
 8004434:	6822      	ldr	r2, [r4, #0]
 8004436:	3601      	adds	r6, #1
 8004438:	4313      	orrs	r3, r2
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	7831      	ldrb	r1, [r6, #0]
 800443e:	2206      	movs	r2, #6
 8004440:	482a      	ldr	r0, [pc, #168]	@ (80044ec <_vfiprintf_r+0x22c>)
 8004442:	1c75      	adds	r5, r6, #1
 8004444:	7621      	strb	r1, [r4, #24]
 8004446:	f000 fb27 	bl	8004a98 <memchr>
 800444a:	2800      	cmp	r0, #0
 800444c:	d040      	beq.n	80044d0 <_vfiprintf_r+0x210>
 800444e:	4b28      	ldr	r3, [pc, #160]	@ (80044f0 <_vfiprintf_r+0x230>)
 8004450:	2b00      	cmp	r3, #0
 8004452:	d122      	bne.n	800449a <_vfiprintf_r+0x1da>
 8004454:	2207      	movs	r2, #7
 8004456:	9b07      	ldr	r3, [sp, #28]
 8004458:	3307      	adds	r3, #7
 800445a:	4393      	bics	r3, r2
 800445c:	3308      	adds	r3, #8
 800445e:	9307      	str	r3, [sp, #28]
 8004460:	6963      	ldr	r3, [r4, #20]
 8004462:	9a04      	ldr	r2, [sp, #16]
 8004464:	189b      	adds	r3, r3, r2
 8004466:	6163      	str	r3, [r4, #20]
 8004468:	e762      	b.n	8004330 <_vfiprintf_r+0x70>
 800446a:	4343      	muls	r3, r0
 800446c:	002e      	movs	r6, r5
 800446e:	2101      	movs	r1, #1
 8004470:	189b      	adds	r3, r3, r2
 8004472:	e7a4      	b.n	80043be <_vfiprintf_r+0xfe>
 8004474:	2300      	movs	r3, #0
 8004476:	200a      	movs	r0, #10
 8004478:	0019      	movs	r1, r3
 800447a:	3601      	adds	r6, #1
 800447c:	6063      	str	r3, [r4, #4]
 800447e:	7832      	ldrb	r2, [r6, #0]
 8004480:	1c75      	adds	r5, r6, #1
 8004482:	3a30      	subs	r2, #48	@ 0x30
 8004484:	2a09      	cmp	r2, #9
 8004486:	d903      	bls.n	8004490 <_vfiprintf_r+0x1d0>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0c8      	beq.n	800441e <_vfiprintf_r+0x15e>
 800448c:	9109      	str	r1, [sp, #36]	@ 0x24
 800448e:	e7c6      	b.n	800441e <_vfiprintf_r+0x15e>
 8004490:	4341      	muls	r1, r0
 8004492:	002e      	movs	r6, r5
 8004494:	2301      	movs	r3, #1
 8004496:	1889      	adds	r1, r1, r2
 8004498:	e7f1      	b.n	800447e <_vfiprintf_r+0x1be>
 800449a:	aa07      	add	r2, sp, #28
 800449c:	9200      	str	r2, [sp, #0]
 800449e:	0021      	movs	r1, r4
 80044a0:	003a      	movs	r2, r7
 80044a2:	4b14      	ldr	r3, [pc, #80]	@ (80044f4 <_vfiprintf_r+0x234>)
 80044a4:	9803      	ldr	r0, [sp, #12]
 80044a6:	e000      	b.n	80044aa <_vfiprintf_r+0x1ea>
 80044a8:	bf00      	nop
 80044aa:	9004      	str	r0, [sp, #16]
 80044ac:	9b04      	ldr	r3, [sp, #16]
 80044ae:	3301      	adds	r3, #1
 80044b0:	d1d6      	bne.n	8004460 <_vfiprintf_r+0x1a0>
 80044b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044b4:	07db      	lsls	r3, r3, #31
 80044b6:	d405      	bmi.n	80044c4 <_vfiprintf_r+0x204>
 80044b8:	89bb      	ldrh	r3, [r7, #12]
 80044ba:	059b      	lsls	r3, r3, #22
 80044bc:	d402      	bmi.n	80044c4 <_vfiprintf_r+0x204>
 80044be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80044c0:	f7ff fdd8 	bl	8004074 <__retarget_lock_release_recursive>
 80044c4:	89bb      	ldrh	r3, [r7, #12]
 80044c6:	065b      	lsls	r3, r3, #25
 80044c8:	d500      	bpl.n	80044cc <_vfiprintf_r+0x20c>
 80044ca:	e71e      	b.n	800430a <_vfiprintf_r+0x4a>
 80044cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80044ce:	e71e      	b.n	800430e <_vfiprintf_r+0x4e>
 80044d0:	aa07      	add	r2, sp, #28
 80044d2:	9200      	str	r2, [sp, #0]
 80044d4:	0021      	movs	r1, r4
 80044d6:	003a      	movs	r2, r7
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <_vfiprintf_r+0x234>)
 80044da:	9803      	ldr	r0, [sp, #12]
 80044dc:	f000 f87c 	bl	80045d8 <_printf_i>
 80044e0:	e7e3      	b.n	80044aa <_vfiprintf_r+0x1ea>
 80044e2:	46c0      	nop			@ (mov r8, r8)
 80044e4:	08004b7f 	.word	0x08004b7f
 80044e8:	08004b85 	.word	0x08004b85
 80044ec:	08004b89 	.word	0x08004b89
 80044f0:	00000000 	.word	0x00000000
 80044f4:	0800429b 	.word	0x0800429b

080044f8 <_printf_common>:
 80044f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044fa:	0016      	movs	r6, r2
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	688a      	ldr	r2, [r1, #8]
 8004500:	690b      	ldr	r3, [r1, #16]
 8004502:	000c      	movs	r4, r1
 8004504:	9000      	str	r0, [sp, #0]
 8004506:	4293      	cmp	r3, r2
 8004508:	da00      	bge.n	800450c <_printf_common+0x14>
 800450a:	0013      	movs	r3, r2
 800450c:	0022      	movs	r2, r4
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	3243      	adds	r2, #67	@ 0x43
 8004512:	7812      	ldrb	r2, [r2, #0]
 8004514:	2a00      	cmp	r2, #0
 8004516:	d001      	beq.n	800451c <_printf_common+0x24>
 8004518:	3301      	adds	r3, #1
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	069b      	lsls	r3, r3, #26
 8004520:	d502      	bpl.n	8004528 <_printf_common+0x30>
 8004522:	6833      	ldr	r3, [r6, #0]
 8004524:	3302      	adds	r3, #2
 8004526:	6033      	str	r3, [r6, #0]
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	2306      	movs	r3, #6
 800452c:	0015      	movs	r5, r2
 800452e:	401d      	ands	r5, r3
 8004530:	421a      	tst	r2, r3
 8004532:	d027      	beq.n	8004584 <_printf_common+0x8c>
 8004534:	0023      	movs	r3, r4
 8004536:	3343      	adds	r3, #67	@ 0x43
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	1e5a      	subs	r2, r3, #1
 800453c:	4193      	sbcs	r3, r2
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	0692      	lsls	r2, r2, #26
 8004542:	d430      	bmi.n	80045a6 <_printf_common+0xae>
 8004544:	0022      	movs	r2, r4
 8004546:	9901      	ldr	r1, [sp, #4]
 8004548:	9800      	ldr	r0, [sp, #0]
 800454a:	9d08      	ldr	r5, [sp, #32]
 800454c:	3243      	adds	r2, #67	@ 0x43
 800454e:	47a8      	blx	r5
 8004550:	3001      	adds	r0, #1
 8004552:	d025      	beq.n	80045a0 <_printf_common+0xa8>
 8004554:	2206      	movs	r2, #6
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	2500      	movs	r5, #0
 800455a:	4013      	ands	r3, r2
 800455c:	2b04      	cmp	r3, #4
 800455e:	d105      	bne.n	800456c <_printf_common+0x74>
 8004560:	6833      	ldr	r3, [r6, #0]
 8004562:	68e5      	ldr	r5, [r4, #12]
 8004564:	1aed      	subs	r5, r5, r3
 8004566:	43eb      	mvns	r3, r5
 8004568:	17db      	asrs	r3, r3, #31
 800456a:	401d      	ands	r5, r3
 800456c:	68a3      	ldr	r3, [r4, #8]
 800456e:	6922      	ldr	r2, [r4, #16]
 8004570:	4293      	cmp	r3, r2
 8004572:	dd01      	ble.n	8004578 <_printf_common+0x80>
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	18ed      	adds	r5, r5, r3
 8004578:	2600      	movs	r6, #0
 800457a:	42b5      	cmp	r5, r6
 800457c:	d120      	bne.n	80045c0 <_printf_common+0xc8>
 800457e:	2000      	movs	r0, #0
 8004580:	e010      	b.n	80045a4 <_printf_common+0xac>
 8004582:	3501      	adds	r5, #1
 8004584:	68e3      	ldr	r3, [r4, #12]
 8004586:	6832      	ldr	r2, [r6, #0]
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	42ab      	cmp	r3, r5
 800458c:	ddd2      	ble.n	8004534 <_printf_common+0x3c>
 800458e:	0022      	movs	r2, r4
 8004590:	2301      	movs	r3, #1
 8004592:	9901      	ldr	r1, [sp, #4]
 8004594:	9800      	ldr	r0, [sp, #0]
 8004596:	9f08      	ldr	r7, [sp, #32]
 8004598:	3219      	adds	r2, #25
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	d1f0      	bne.n	8004582 <_printf_common+0x8a>
 80045a0:	2001      	movs	r0, #1
 80045a2:	4240      	negs	r0, r0
 80045a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045a6:	2030      	movs	r0, #48	@ 0x30
 80045a8:	18e1      	adds	r1, r4, r3
 80045aa:	3143      	adds	r1, #67	@ 0x43
 80045ac:	7008      	strb	r0, [r1, #0]
 80045ae:	0021      	movs	r1, r4
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	3145      	adds	r1, #69	@ 0x45
 80045b4:	7809      	ldrb	r1, [r1, #0]
 80045b6:	18a2      	adds	r2, r4, r2
 80045b8:	3243      	adds	r2, #67	@ 0x43
 80045ba:	3302      	adds	r3, #2
 80045bc:	7011      	strb	r1, [r2, #0]
 80045be:	e7c1      	b.n	8004544 <_printf_common+0x4c>
 80045c0:	0022      	movs	r2, r4
 80045c2:	2301      	movs	r3, #1
 80045c4:	9901      	ldr	r1, [sp, #4]
 80045c6:	9800      	ldr	r0, [sp, #0]
 80045c8:	9f08      	ldr	r7, [sp, #32]
 80045ca:	321a      	adds	r2, #26
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	d0e6      	beq.n	80045a0 <_printf_common+0xa8>
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7d1      	b.n	800457a <_printf_common+0x82>
	...

080045d8 <_printf_i>:
 80045d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045da:	b08b      	sub	sp, #44	@ 0x2c
 80045dc:	9206      	str	r2, [sp, #24]
 80045de:	000a      	movs	r2, r1
 80045e0:	3243      	adds	r2, #67	@ 0x43
 80045e2:	9307      	str	r3, [sp, #28]
 80045e4:	9005      	str	r0, [sp, #20]
 80045e6:	9203      	str	r2, [sp, #12]
 80045e8:	7e0a      	ldrb	r2, [r1, #24]
 80045ea:	000c      	movs	r4, r1
 80045ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80045ee:	2a78      	cmp	r2, #120	@ 0x78
 80045f0:	d809      	bhi.n	8004606 <_printf_i+0x2e>
 80045f2:	2a62      	cmp	r2, #98	@ 0x62
 80045f4:	d80b      	bhi.n	800460e <_printf_i+0x36>
 80045f6:	2a00      	cmp	r2, #0
 80045f8:	d100      	bne.n	80045fc <_printf_i+0x24>
 80045fa:	e0ba      	b.n	8004772 <_printf_i+0x19a>
 80045fc:	497a      	ldr	r1, [pc, #488]	@ (80047e8 <_printf_i+0x210>)
 80045fe:	9104      	str	r1, [sp, #16]
 8004600:	2a58      	cmp	r2, #88	@ 0x58
 8004602:	d100      	bne.n	8004606 <_printf_i+0x2e>
 8004604:	e08e      	b.n	8004724 <_printf_i+0x14c>
 8004606:	0025      	movs	r5, r4
 8004608:	3542      	adds	r5, #66	@ 0x42
 800460a:	702a      	strb	r2, [r5, #0]
 800460c:	e022      	b.n	8004654 <_printf_i+0x7c>
 800460e:	0010      	movs	r0, r2
 8004610:	3863      	subs	r0, #99	@ 0x63
 8004612:	2815      	cmp	r0, #21
 8004614:	d8f7      	bhi.n	8004606 <_printf_i+0x2e>
 8004616:	f7fb fd93 	bl	8000140 <__gnu_thumb1_case_shi>
 800461a:	0016      	.short	0x0016
 800461c:	fff6001f 	.word	0xfff6001f
 8004620:	fff6fff6 	.word	0xfff6fff6
 8004624:	001ffff6 	.word	0x001ffff6
 8004628:	fff6fff6 	.word	0xfff6fff6
 800462c:	fff6fff6 	.word	0xfff6fff6
 8004630:	0036009f 	.word	0x0036009f
 8004634:	fff6007e 	.word	0xfff6007e
 8004638:	00b0fff6 	.word	0x00b0fff6
 800463c:	0036fff6 	.word	0x0036fff6
 8004640:	fff6fff6 	.word	0xfff6fff6
 8004644:	0082      	.short	0x0082
 8004646:	0025      	movs	r5, r4
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	3542      	adds	r5, #66	@ 0x42
 800464c:	1d11      	adds	r1, r2, #4
 800464e:	6019      	str	r1, [r3, #0]
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	702b      	strb	r3, [r5, #0]
 8004654:	2301      	movs	r3, #1
 8004656:	e09e      	b.n	8004796 <_printf_i+0x1be>
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	6809      	ldr	r1, [r1, #0]
 800465c:	1d02      	adds	r2, r0, #4
 800465e:	060d      	lsls	r5, r1, #24
 8004660:	d50b      	bpl.n	800467a <_printf_i+0xa2>
 8004662:	6806      	ldr	r6, [r0, #0]
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	2e00      	cmp	r6, #0
 8004668:	da03      	bge.n	8004672 <_printf_i+0x9a>
 800466a:	232d      	movs	r3, #45	@ 0x2d
 800466c:	9a03      	ldr	r2, [sp, #12]
 800466e:	4276      	negs	r6, r6
 8004670:	7013      	strb	r3, [r2, #0]
 8004672:	4b5d      	ldr	r3, [pc, #372]	@ (80047e8 <_printf_i+0x210>)
 8004674:	270a      	movs	r7, #10
 8004676:	9304      	str	r3, [sp, #16]
 8004678:	e018      	b.n	80046ac <_printf_i+0xd4>
 800467a:	6806      	ldr	r6, [r0, #0]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	0649      	lsls	r1, r1, #25
 8004680:	d5f1      	bpl.n	8004666 <_printf_i+0x8e>
 8004682:	b236      	sxth	r6, r6
 8004684:	e7ef      	b.n	8004666 <_printf_i+0x8e>
 8004686:	6808      	ldr	r0, [r1, #0]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	c940      	ldmia	r1!, {r6}
 800468c:	0605      	lsls	r5, r0, #24
 800468e:	d402      	bmi.n	8004696 <_printf_i+0xbe>
 8004690:	0640      	lsls	r0, r0, #25
 8004692:	d500      	bpl.n	8004696 <_printf_i+0xbe>
 8004694:	b2b6      	uxth	r6, r6
 8004696:	6019      	str	r1, [r3, #0]
 8004698:	4b53      	ldr	r3, [pc, #332]	@ (80047e8 <_printf_i+0x210>)
 800469a:	270a      	movs	r7, #10
 800469c:	9304      	str	r3, [sp, #16]
 800469e:	2a6f      	cmp	r2, #111	@ 0x6f
 80046a0:	d100      	bne.n	80046a4 <_printf_i+0xcc>
 80046a2:	3f02      	subs	r7, #2
 80046a4:	0023      	movs	r3, r4
 80046a6:	2200      	movs	r2, #0
 80046a8:	3343      	adds	r3, #67	@ 0x43
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	60a3      	str	r3, [r4, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db06      	blt.n	80046c2 <_printf_i+0xea>
 80046b4:	2104      	movs	r1, #4
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	9d03      	ldr	r5, [sp, #12]
 80046ba:	438a      	bics	r2, r1
 80046bc:	6022      	str	r2, [r4, #0]
 80046be:	4333      	orrs	r3, r6
 80046c0:	d00c      	beq.n	80046dc <_printf_i+0x104>
 80046c2:	9d03      	ldr	r5, [sp, #12]
 80046c4:	0030      	movs	r0, r6
 80046c6:	0039      	movs	r1, r7
 80046c8:	f7fb fdca 	bl	8000260 <__aeabi_uidivmod>
 80046cc:	9b04      	ldr	r3, [sp, #16]
 80046ce:	3d01      	subs	r5, #1
 80046d0:	5c5b      	ldrb	r3, [r3, r1]
 80046d2:	702b      	strb	r3, [r5, #0]
 80046d4:	0033      	movs	r3, r6
 80046d6:	0006      	movs	r6, r0
 80046d8:	429f      	cmp	r7, r3
 80046da:	d9f3      	bls.n	80046c4 <_printf_i+0xec>
 80046dc:	2f08      	cmp	r7, #8
 80046de:	d109      	bne.n	80046f4 <_printf_i+0x11c>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	07db      	lsls	r3, r3, #31
 80046e4:	d506      	bpl.n	80046f4 <_printf_i+0x11c>
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	6923      	ldr	r3, [r4, #16]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	dc02      	bgt.n	80046f4 <_printf_i+0x11c>
 80046ee:	2330      	movs	r3, #48	@ 0x30
 80046f0:	3d01      	subs	r5, #1
 80046f2:	702b      	strb	r3, [r5, #0]
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	1b5b      	subs	r3, r3, r5
 80046f8:	6123      	str	r3, [r4, #16]
 80046fa:	9b07      	ldr	r3, [sp, #28]
 80046fc:	0021      	movs	r1, r4
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	9805      	ldr	r0, [sp, #20]
 8004702:	9b06      	ldr	r3, [sp, #24]
 8004704:	aa09      	add	r2, sp, #36	@ 0x24
 8004706:	f7ff fef7 	bl	80044f8 <_printf_common>
 800470a:	3001      	adds	r0, #1
 800470c:	d148      	bne.n	80047a0 <_printf_i+0x1c8>
 800470e:	2001      	movs	r0, #1
 8004710:	4240      	negs	r0, r0
 8004712:	b00b      	add	sp, #44	@ 0x2c
 8004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004716:	2220      	movs	r2, #32
 8004718:	6809      	ldr	r1, [r1, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	6022      	str	r2, [r4, #0]
 800471e:	2278      	movs	r2, #120	@ 0x78
 8004720:	4932      	ldr	r1, [pc, #200]	@ (80047ec <_printf_i+0x214>)
 8004722:	9104      	str	r1, [sp, #16]
 8004724:	0021      	movs	r1, r4
 8004726:	3145      	adds	r1, #69	@ 0x45
 8004728:	700a      	strb	r2, [r1, #0]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	c940      	ldmia	r1!, {r6}
 8004730:	0610      	lsls	r0, r2, #24
 8004732:	d402      	bmi.n	800473a <_printf_i+0x162>
 8004734:	0650      	lsls	r0, r2, #25
 8004736:	d500      	bpl.n	800473a <_printf_i+0x162>
 8004738:	b2b6      	uxth	r6, r6
 800473a:	6019      	str	r1, [r3, #0]
 800473c:	07d3      	lsls	r3, r2, #31
 800473e:	d502      	bpl.n	8004746 <_printf_i+0x16e>
 8004740:	2320      	movs	r3, #32
 8004742:	4313      	orrs	r3, r2
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	2e00      	cmp	r6, #0
 8004748:	d001      	beq.n	800474e <_printf_i+0x176>
 800474a:	2710      	movs	r7, #16
 800474c:	e7aa      	b.n	80046a4 <_printf_i+0xcc>
 800474e:	2220      	movs	r2, #32
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	4393      	bics	r3, r2
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	e7f8      	b.n	800474a <_printf_i+0x172>
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	680d      	ldr	r5, [r1, #0]
 800475c:	1d10      	adds	r0, r2, #4
 800475e:	6949      	ldr	r1, [r1, #20]
 8004760:	6018      	str	r0, [r3, #0]
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	062e      	lsls	r6, r5, #24
 8004766:	d501      	bpl.n	800476c <_printf_i+0x194>
 8004768:	6019      	str	r1, [r3, #0]
 800476a:	e002      	b.n	8004772 <_printf_i+0x19a>
 800476c:	066d      	lsls	r5, r5, #25
 800476e:	d5fb      	bpl.n	8004768 <_printf_i+0x190>
 8004770:	8019      	strh	r1, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	9d03      	ldr	r5, [sp, #12]
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	e7bf      	b.n	80046fa <_printf_i+0x122>
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	1d11      	adds	r1, r2, #4
 800477e:	6019      	str	r1, [r3, #0]
 8004780:	6815      	ldr	r5, [r2, #0]
 8004782:	2100      	movs	r1, #0
 8004784:	0028      	movs	r0, r5
 8004786:	6862      	ldr	r2, [r4, #4]
 8004788:	f000 f986 	bl	8004a98 <memchr>
 800478c:	2800      	cmp	r0, #0
 800478e:	d001      	beq.n	8004794 <_printf_i+0x1bc>
 8004790:	1b40      	subs	r0, r0, r5
 8004792:	6060      	str	r0, [r4, #4]
 8004794:	6863      	ldr	r3, [r4, #4]
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	2300      	movs	r3, #0
 800479a:	9a03      	ldr	r2, [sp, #12]
 800479c:	7013      	strb	r3, [r2, #0]
 800479e:	e7ac      	b.n	80046fa <_printf_i+0x122>
 80047a0:	002a      	movs	r2, r5
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	9906      	ldr	r1, [sp, #24]
 80047a6:	9805      	ldr	r0, [sp, #20]
 80047a8:	9d07      	ldr	r5, [sp, #28]
 80047aa:	47a8      	blx	r5
 80047ac:	3001      	adds	r0, #1
 80047ae:	d0ae      	beq.n	800470e <_printf_i+0x136>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	079b      	lsls	r3, r3, #30
 80047b4:	d415      	bmi.n	80047e2 <_printf_i+0x20a>
 80047b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b8:	68e0      	ldr	r0, [r4, #12]
 80047ba:	4298      	cmp	r0, r3
 80047bc:	daa9      	bge.n	8004712 <_printf_i+0x13a>
 80047be:	0018      	movs	r0, r3
 80047c0:	e7a7      	b.n	8004712 <_printf_i+0x13a>
 80047c2:	0022      	movs	r2, r4
 80047c4:	2301      	movs	r3, #1
 80047c6:	9906      	ldr	r1, [sp, #24]
 80047c8:	9805      	ldr	r0, [sp, #20]
 80047ca:	9e07      	ldr	r6, [sp, #28]
 80047cc:	3219      	adds	r2, #25
 80047ce:	47b0      	blx	r6
 80047d0:	3001      	adds	r0, #1
 80047d2:	d09c      	beq.n	800470e <_printf_i+0x136>
 80047d4:	3501      	adds	r5, #1
 80047d6:	68e3      	ldr	r3, [r4, #12]
 80047d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	42ab      	cmp	r3, r5
 80047de:	dcf0      	bgt.n	80047c2 <_printf_i+0x1ea>
 80047e0:	e7e9      	b.n	80047b6 <_printf_i+0x1de>
 80047e2:	2500      	movs	r5, #0
 80047e4:	e7f7      	b.n	80047d6 <_printf_i+0x1fe>
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	08004b90 	.word	0x08004b90
 80047ec:	08004ba1 	.word	0x08004ba1

080047f0 <__sflush_r>:
 80047f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f2:	220c      	movs	r2, #12
 80047f4:	5e8b      	ldrsh	r3, [r1, r2]
 80047f6:	0005      	movs	r5, r0
 80047f8:	000c      	movs	r4, r1
 80047fa:	071a      	lsls	r2, r3, #28
 80047fc:	d456      	bmi.n	80048ac <__sflush_r+0xbc>
 80047fe:	684a      	ldr	r2, [r1, #4]
 8004800:	2a00      	cmp	r2, #0
 8004802:	dc02      	bgt.n	800480a <__sflush_r+0x1a>
 8004804:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004806:	2a00      	cmp	r2, #0
 8004808:	dd4e      	ble.n	80048a8 <__sflush_r+0xb8>
 800480a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800480c:	2f00      	cmp	r7, #0
 800480e:	d04b      	beq.n	80048a8 <__sflush_r+0xb8>
 8004810:	2200      	movs	r2, #0
 8004812:	2080      	movs	r0, #128	@ 0x80
 8004814:	682e      	ldr	r6, [r5, #0]
 8004816:	602a      	str	r2, [r5, #0]
 8004818:	001a      	movs	r2, r3
 800481a:	0140      	lsls	r0, r0, #5
 800481c:	6a21      	ldr	r1, [r4, #32]
 800481e:	4002      	ands	r2, r0
 8004820:	4203      	tst	r3, r0
 8004822:	d033      	beq.n	800488c <__sflush_r+0x9c>
 8004824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	075b      	lsls	r3, r3, #29
 800482a:	d506      	bpl.n	800483a <__sflush_r+0x4a>
 800482c:	6863      	ldr	r3, [r4, #4]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <__sflush_r+0x4a>
 8004836:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	2300      	movs	r3, #0
 800483c:	0028      	movs	r0, r5
 800483e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004840:	6a21      	ldr	r1, [r4, #32]
 8004842:	47b8      	blx	r7
 8004844:	89a2      	ldrh	r2, [r4, #12]
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	d106      	bne.n	8004858 <__sflush_r+0x68>
 800484a:	6829      	ldr	r1, [r5, #0]
 800484c:	291d      	cmp	r1, #29
 800484e:	d846      	bhi.n	80048de <__sflush_r+0xee>
 8004850:	4b29      	ldr	r3, [pc, #164]	@ (80048f8 <__sflush_r+0x108>)
 8004852:	40cb      	lsrs	r3, r1
 8004854:	07db      	lsls	r3, r3, #31
 8004856:	d542      	bpl.n	80048de <__sflush_r+0xee>
 8004858:	2300      	movs	r3, #0
 800485a:	6063      	str	r3, [r4, #4]
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	04d2      	lsls	r2, r2, #19
 8004862:	d505      	bpl.n	8004870 <__sflush_r+0x80>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <__sflush_r+0x7e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d100      	bne.n	8004870 <__sflush_r+0x80>
 800486e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004872:	602e      	str	r6, [r5, #0]
 8004874:	2900      	cmp	r1, #0
 8004876:	d017      	beq.n	80048a8 <__sflush_r+0xb8>
 8004878:	0023      	movs	r3, r4
 800487a:	3344      	adds	r3, #68	@ 0x44
 800487c:	4299      	cmp	r1, r3
 800487e:	d002      	beq.n	8004886 <__sflush_r+0x96>
 8004880:	0028      	movs	r0, r5
 8004882:	f7ff fbf9 	bl	8004078 <_free_r>
 8004886:	2300      	movs	r3, #0
 8004888:	6363      	str	r3, [r4, #52]	@ 0x34
 800488a:	e00d      	b.n	80048a8 <__sflush_r+0xb8>
 800488c:	2301      	movs	r3, #1
 800488e:	0028      	movs	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	0002      	movs	r2, r0
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d1c6      	bne.n	8004826 <__sflush_r+0x36>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0c3      	beq.n	8004826 <__sflush_r+0x36>
 800489e:	2b1d      	cmp	r3, #29
 80048a0:	d001      	beq.n	80048a6 <__sflush_r+0xb6>
 80048a2:	2b16      	cmp	r3, #22
 80048a4:	d11a      	bne.n	80048dc <__sflush_r+0xec>
 80048a6:	602e      	str	r6, [r5, #0]
 80048a8:	2000      	movs	r0, #0
 80048aa:	e01e      	b.n	80048ea <__sflush_r+0xfa>
 80048ac:	690e      	ldr	r6, [r1, #16]
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	d0fa      	beq.n	80048a8 <__sflush_r+0xb8>
 80048b2:	680f      	ldr	r7, [r1, #0]
 80048b4:	600e      	str	r6, [r1, #0]
 80048b6:	1bba      	subs	r2, r7, r6
 80048b8:	9201      	str	r2, [sp, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	079b      	lsls	r3, r3, #30
 80048be:	d100      	bne.n	80048c2 <__sflush_r+0xd2>
 80048c0:	694a      	ldr	r2, [r1, #20]
 80048c2:	60a2      	str	r2, [r4, #8]
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	ddee      	ble.n	80048a8 <__sflush_r+0xb8>
 80048ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80048cc:	0032      	movs	r2, r6
 80048ce:	001f      	movs	r7, r3
 80048d0:	0028      	movs	r0, r5
 80048d2:	9b01      	ldr	r3, [sp, #4]
 80048d4:	6a21      	ldr	r1, [r4, #32]
 80048d6:	47b8      	blx	r7
 80048d8:	2800      	cmp	r0, #0
 80048da:	dc07      	bgt.n	80048ec <__sflush_r+0xfc>
 80048dc:	89a2      	ldrh	r2, [r4, #12]
 80048de:	2340      	movs	r3, #64	@ 0x40
 80048e0:	2001      	movs	r0, #1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	4240      	negs	r0, r0
 80048ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048ec:	9b01      	ldr	r3, [sp, #4]
 80048ee:	1836      	adds	r6, r6, r0
 80048f0:	1a1b      	subs	r3, r3, r0
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	e7e6      	b.n	80048c4 <__sflush_r+0xd4>
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	20400001 	.word	0x20400001

080048fc <_fflush_r>:
 80048fc:	690b      	ldr	r3, [r1, #16]
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	0005      	movs	r5, r0
 8004902:	000c      	movs	r4, r1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <_fflush_r+0x12>
 8004908:	2500      	movs	r5, #0
 800490a:	0028      	movs	r0, r5
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	2800      	cmp	r0, #0
 8004910:	d004      	beq.n	800491c <_fflush_r+0x20>
 8004912:	6a03      	ldr	r3, [r0, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <_fflush_r+0x20>
 8004918:	f7ff f99a 	bl	8003c50 <__sinit>
 800491c:	220c      	movs	r2, #12
 800491e:	5ea3      	ldrsh	r3, [r4, r2]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f1      	beq.n	8004908 <_fflush_r+0xc>
 8004924:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004926:	07d2      	lsls	r2, r2, #31
 8004928:	d404      	bmi.n	8004934 <_fflush_r+0x38>
 800492a:	059b      	lsls	r3, r3, #22
 800492c:	d402      	bmi.n	8004934 <_fflush_r+0x38>
 800492e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004930:	f7ff fb9f 	bl	8004072 <__retarget_lock_acquire_recursive>
 8004934:	0028      	movs	r0, r5
 8004936:	0021      	movs	r1, r4
 8004938:	f7ff ff5a 	bl	80047f0 <__sflush_r>
 800493c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800493e:	0005      	movs	r5, r0
 8004940:	07db      	lsls	r3, r3, #31
 8004942:	d4e2      	bmi.n	800490a <_fflush_r+0xe>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	059b      	lsls	r3, r3, #22
 8004948:	d4df      	bmi.n	800490a <_fflush_r+0xe>
 800494a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800494c:	f7ff fb92 	bl	8004074 <__retarget_lock_release_recursive>
 8004950:	e7db      	b.n	800490a <_fflush_r+0xe>
	...

08004954 <__swhatbuf_r>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	000e      	movs	r6, r1
 8004958:	001d      	movs	r5, r3
 800495a:	230e      	movs	r3, #14
 800495c:	5ec9      	ldrsh	r1, [r1, r3]
 800495e:	0014      	movs	r4, r2
 8004960:	b096      	sub	sp, #88	@ 0x58
 8004962:	2900      	cmp	r1, #0
 8004964:	da0c      	bge.n	8004980 <__swhatbuf_r+0x2c>
 8004966:	89b2      	ldrh	r2, [r6, #12]
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	0011      	movs	r1, r2
 800496c:	4019      	ands	r1, r3
 800496e:	421a      	tst	r2, r3
 8004970:	d114      	bne.n	800499c <__swhatbuf_r+0x48>
 8004972:	2380      	movs	r3, #128	@ 0x80
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	2000      	movs	r0, #0
 8004978:	6029      	str	r1, [r5, #0]
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	b016      	add	sp, #88	@ 0x58
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	466a      	mov	r2, sp
 8004982:	f000 f853 	bl	8004a2c <_fstat_r>
 8004986:	2800      	cmp	r0, #0
 8004988:	dbed      	blt.n	8004966 <__swhatbuf_r+0x12>
 800498a:	23f0      	movs	r3, #240	@ 0xf0
 800498c:	9901      	ldr	r1, [sp, #4]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	4019      	ands	r1, r3
 8004992:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <__swhatbuf_r+0x50>)
 8004994:	18c9      	adds	r1, r1, r3
 8004996:	424b      	negs	r3, r1
 8004998:	4159      	adcs	r1, r3
 800499a:	e7ea      	b.n	8004972 <__swhatbuf_r+0x1e>
 800499c:	2100      	movs	r1, #0
 800499e:	2340      	movs	r3, #64	@ 0x40
 80049a0:	e7e9      	b.n	8004976 <__swhatbuf_r+0x22>
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	ffffe000 	.word	0xffffe000

080049a8 <__smakebuf_r>:
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049aa:	2602      	movs	r6, #2
 80049ac:	898b      	ldrh	r3, [r1, #12]
 80049ae:	0005      	movs	r5, r0
 80049b0:	000c      	movs	r4, r1
 80049b2:	b085      	sub	sp, #20
 80049b4:	4233      	tst	r3, r6
 80049b6:	d007      	beq.n	80049c8 <__smakebuf_r+0x20>
 80049b8:	0023      	movs	r3, r4
 80049ba:	3347      	adds	r3, #71	@ 0x47
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	2301      	movs	r3, #1
 80049c2:	6163      	str	r3, [r4, #20]
 80049c4:	b005      	add	sp, #20
 80049c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c8:	ab03      	add	r3, sp, #12
 80049ca:	aa02      	add	r2, sp, #8
 80049cc:	f7ff ffc2 	bl	8004954 <__swhatbuf_r>
 80049d0:	9f02      	ldr	r7, [sp, #8]
 80049d2:	9001      	str	r0, [sp, #4]
 80049d4:	0039      	movs	r1, r7
 80049d6:	0028      	movs	r0, r5
 80049d8:	f7ff fbba 	bl	8004150 <_malloc_r>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d108      	bne.n	80049f2 <__smakebuf_r+0x4a>
 80049e0:	220c      	movs	r2, #12
 80049e2:	5ea3      	ldrsh	r3, [r4, r2]
 80049e4:	059a      	lsls	r2, r3, #22
 80049e6:	d4ed      	bmi.n	80049c4 <__smakebuf_r+0x1c>
 80049e8:	2203      	movs	r2, #3
 80049ea:	4393      	bics	r3, r2
 80049ec:	431e      	orrs	r6, r3
 80049ee:	81a6      	strh	r6, [r4, #12]
 80049f0:	e7e2      	b.n	80049b8 <__smakebuf_r+0x10>
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	89a2      	ldrh	r2, [r4, #12]
 80049f6:	6020      	str	r0, [r4, #0]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	6120      	str	r0, [r4, #16]
 8004a00:	6167      	str	r7, [r4, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <__smakebuf_r+0x78>
 8004a06:	0028      	movs	r0, r5
 8004a08:	230e      	movs	r3, #14
 8004a0a:	5ee1      	ldrsh	r1, [r4, r3]
 8004a0c:	f000 f820 	bl	8004a50 <_isatty_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d005      	beq.n	8004a20 <__smakebuf_r+0x78>
 8004a14:	2303      	movs	r3, #3
 8004a16:	89a2      	ldrh	r2, [r4, #12]
 8004a18:	439a      	bics	r2, r3
 8004a1a:	3b02      	subs	r3, #2
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	9a01      	ldr	r2, [sp, #4]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	e7cc      	b.n	80049c4 <__smakebuf_r+0x1c>
	...

08004a2c <_fstat_r>:
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	b570      	push	{r4, r5, r6, lr}
 8004a30:	4d06      	ldr	r5, [pc, #24]	@ (8004a4c <_fstat_r+0x20>)
 8004a32:	0004      	movs	r4, r0
 8004a34:	0008      	movs	r0, r1
 8004a36:	0011      	movs	r1, r2
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	f7fb fdff 	bl	800063c <_fstat>
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	d103      	bne.n	8004a4a <_fstat_r+0x1e>
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d000      	beq.n	8004a4a <_fstat_r+0x1e>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	20000be4 	.word	0x20000be4

08004a50 <_isatty_r>:
 8004a50:	2300      	movs	r3, #0
 8004a52:	b570      	push	{r4, r5, r6, lr}
 8004a54:	4d06      	ldr	r5, [pc, #24]	@ (8004a70 <_isatty_r+0x20>)
 8004a56:	0004      	movs	r4, r0
 8004a58:	0008      	movs	r0, r1
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	f7fb fdf3 	bl	8000646 <_isatty>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d103      	bne.n	8004a6c <_isatty_r+0x1c>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d000      	beq.n	8004a6c <_isatty_r+0x1c>
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	20000be4 	.word	0x20000be4

08004a74 <_sbrk_r>:
 8004a74:	2300      	movs	r3, #0
 8004a76:	b570      	push	{r4, r5, r6, lr}
 8004a78:	4d06      	ldr	r5, [pc, #24]	@ (8004a94 <_sbrk_r+0x20>)
 8004a7a:	0004      	movs	r4, r0
 8004a7c:	0008      	movs	r0, r1
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	f7fb fde6 	bl	8000650 <_sbrk>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d103      	bne.n	8004a90 <_sbrk_r+0x1c>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d000      	beq.n	8004a90 <_sbrk_r+0x1c>
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	bd70      	pop	{r4, r5, r6, pc}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	20000be4 	.word	0x20000be4

08004a98 <memchr>:
 8004a98:	b2c9      	uxtb	r1, r1
 8004a9a:	1882      	adds	r2, r0, r2
 8004a9c:	4290      	cmp	r0, r2
 8004a9e:	d101      	bne.n	8004aa4 <memchr+0xc>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	4770      	bx	lr
 8004aa4:	7803      	ldrb	r3, [r0, #0]
 8004aa6:	428b      	cmp	r3, r1
 8004aa8:	d0fb      	beq.n	8004aa2 <memchr+0xa>
 8004aaa:	3001      	adds	r0, #1
 8004aac:	e7f6      	b.n	8004a9c <memchr+0x4>
	...

08004ab0 <_init>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr

08004abc <_fini>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr
